%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: Adobe Illustrator Artwork
%%Creator: Adobe Illustrator(R) 24.2
%%For:  
%%CreationDate: 12/22/2021
%%BoundingBox: 0 0 1085 400
%%HiResBoundingBox: 0 0 1084.7918 400
%%CropBox: 0 0 1084.7918 400
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 24.2.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 24.2.0 x490 R agm 4.7767 ct 5.4352%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 48 8%%BeginData: 14422 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFF
%CAFFCAFFCAFFCAFFCAFFCAFFA8CACAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFF
%CAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFA7FFCAFFCAFF
%CAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFF
%CAFFCAFFCAFFCAFFCAFFCAA8CFCACAA8CFCACAA8CFCACAA8CFCACAA8CFCA
%CAA8CFCACAA8CFCACAA8CFCACAA8CFCACAA8CFCACAA7FFCACAA8CFCACAA8
%CFCACAA8CFCACAA8CFCACAA8CFCACAA8CFCACAA8CFCACAA8CFCACAA8CFCA
%CFA8CAA8CFA8CFCACAA8CFCACAA8CFCACAA8CFCACAA8CFCACAA8CFCACAA8
%CFCACAA8CFCACAA8CFCACAA8CFCACAA8CFCACACFCAFFCACFCAFFCACFA8FF
%CACFA8FFCACFA8FFCACFA8FFCACFA8FFCACFA8FFCACFA8FFCACFA8FFA8CA
%CAFFCACFA8FFCACFA8FFCACFA8FFCACFA8FFCACFA8FFCACFA8FFCACFA8FF
%CACFA8FFCACFA8FFCACFA1CFCACFA8FFCACFA8FFCACFA8FFCACFA8FFCACF
%A8FFCACFA8FFCACFA8FFCACFA8FFCACFA8FFCACFA8FFCACFCAFFCAA8CAA8
%CFA8CAA7CAA7CAA7CAA7CAA7CAA7CAA7CAA7CAA7CAA7CAA7CAA7CAA7CAA7
%CAA7CAA7CAA7CAA1CAA7CAA7CAA7CAA7CAA7CAA7CAA7CAA7CAA7CAA7CAA7
%CAA7CAA7CAA7CAA7CAA7CAA7CAA7CAA7CAA7A7A1CAA7CAA7CAA7CAA7CAA7
%CAA7CAA7CAA7CAA7CAA7CAA7CAA7CAA7CAA7CAA7CAA7CAA7CAA7CAA7CAA7
%CAA8CAA8CFFFCAFFCACFA8CFCACAA8CFCACAA8CFCACAA8CFCACAA8CFCACA
%A8CFCACAA8CFCACAA8CFCACAA8CFA8CACACFCACAA8CFCACAA8CFCACAA8CF
%CACAA8CFCACAA8CFCACAA8CFCACAA8CFCACAA8CFCACAA8CFCACAA1CFCACA
%A8CFCACAA8CFCACAA8CFCACAA8CFCACAA8CFCACAA8CFCACAA8CFCACAA8CF
%CACAA8CFCACAA8CACAFFCAFFCACACAA8CFA8CAA7CAA8CAA8CFCACAA8CFCA
%CAA8CFCACAA8CFA8CAA8CFCACAA8CFCACAA8CFCACAA8A8A1CAA8CFCACAA8
%CFCACAA8CFCACAA8CFCACAA8CFCACFA8CAA8CAA8CFCACAA8CFCACAA8CFCA
%CAA8FFA7A1A7FFCACAA8CFCACAA8CFCACAA8CFCACAA8CFA8CAA7CFCACAA8
%CFCACAA8CFCACAA8CFCACAA8CFA8CAA7CACACAA8CFFFCACFCACFA8CAA8FF
%CACFCAFFCACFCAFFCACFCAFFCACFCACFA8CACAFFCACFCAFFCACFCAFFCACA
%A1A7A8FFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACAA8CACAFFCAFF
%CACFCAFFCACFCAFFCAFFCAA8A1A8CAFFCACFCAFFCACFCAFFCACFCAFFCACF
%CAFFA8CACAFFCACFCAFFCACFCAFFCACFCAFFCAFFCACAA8CAA8FFCACFCAA8
%CFA8CAA8CAA7CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CAA8CAA8CFA8
%CAA8CFA8CAA8CAA1A17DA1A8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8
%CFA8CAA7CFA8CAA8CFA8CAA8CFA8CAA8CFA8A87CA1A1A8A8CFA8CAA8CFA8
%CAA8CFA8CAA8CFA8CAA8CAA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA7
%CAA7CAA8CFA8CAFFCAFFCAFFCACAA8FFCAFFCAFFCAFFCAFFCAFFCAFFCAFF
%CACFCACACAFFCAFFCAFFCAFFCAFFCACAA8CFA8CACAFFCAFFCAFFCAFFCAFF
%CAFFCAFFCAFFCAFFCACFA8CFCAFFCAFFCAFFCAFFCAFFCAFFCACFA8CAA8CA
%A8FFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCACACAFFCAFFCAFFCAFFCAFF
%CAFFCAFFCAFFCACFCACACAFFCAFFCAA8CFCACFA8CAA8CAA8CFCACAA8CFCA
%CAA8CFCACAA8CFCACAA8CAA8CAA8CFCACAA8CFCACAA8FFCAFFA8FFCACAA8
%CFCACAA8CFCACAA8CFCACAA8CFCACAA8CFA8CAA8CFCACAA8CFCACAA8CFCA
%CAA8CFA8CFA8FFCACFA8CFCACAA8CFCACAA8CFCACAA8CFCACAA8CAA8CAA8
%CFCACAA8CFCACAA8CFCACAA8CFCACAA8CAA8CAA8CFCACACFCAFFCACFA8CA
%CACFCAFFCACFCAFFCACFCAFFCACFCAFFCACAA8CFCACFCAFFCACFCAFFCACF
%CAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCACFA8CACAFF
%CACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACF
%CAFFCACFA8CACACFCAFFCACFCAFFCACFCAFFCACFCAFFCACAA8CACAFFCAFF
%CAA8CAA8CFA8CAA7CAA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA7CFA8
%CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8
%CFA8CAA8CAA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8
%CAA8CFA8CAA8CFA8CAA8CFA8CAA7CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8
%CFA8CAA7CAA8CAA8CFFFCAFFCACFA8CACAFFCAFFCAFFCAFFCAFFCAFFCAFF
%CAFFCACFA8CFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFF
%CAFFCAFFCAFFCAFFCAFFCAFFCACACAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFF
%CAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCACFA8CFCAFFCAFFCAFFCAFF
%CAFFCAFFCAFFCAFFCACAA8CACAFFCAFFCACACAA8CFA8CAA7CAA8CAA8CFCA
%CAA8CFCACAA8CFCACAA8CFA8CAA8CFCACAA8CFCACAA8CFCACAA8CFCACAA8
%CFCACAA8CFCACAA8CFCACAA8CFCACAA8CFCACFA8CAA8CAA8CFCACAA8CFCA
%CAA8CFCACAA8CFCACAA8CFCACAA8CFCACAA8CFCACAA8CFCACAA8CFA8CAA7
%CFCACAA8CFCACAA8CFCACAA8CFCACAA8CFA8CAA7CACACAA8CFFFCAFFCAFF
%CACAA8FFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCACACAFFCACFCAFFCACF
%CAFFCACFCAFFCACFCAFFCACFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCACFA8CF
%CAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCACFCAFFCACFCAFFCACFCAFFCACF
%CAFFCACFCAFFA8CACAFFCACFCAFFCACFCAFFCACFCAFFCACFFD04CAA8FFCA
%CFCAA8CFA8A8A1A8A1A7A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A8CA
%A8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8A8A1A8A1A8A1A8
%A1A8A1A8A1A7A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1CAA8CFA8CAA8CFA8CA
%A8CFA8CAA8CFA8CAA8CFA8CAA8CAA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CF
%A8CAA7CAA7CAA8CFA8CAFFCAA776A17DA17CA17CA17CA17CA17CA17CA17C
%A17CA17CA17DCACAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCA
%CA7CA17CA17CA17CA17CA17CA17CA17CA17CA17CA17CA17CA17CA17CA17D
%FFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCACACAFFCAFFCAFFCA
%FFCAFFCAFFCAFFCAFFCACFCACACAFFCAFFCAA8CF7D7D76A17CA176A17CA1
%76A17CA176A17CA176A17CA176A1A1CFA8CFCACAA8CFCACAA8CFCACAA8CF
%CACAA8CFCACAA8FFA17D76A17CA176A17CA176A17CA176A17CA176A17CA1
%76A17CA176A17CA1A8CFCACAA8CFCACAA8CFCACAA8CFCACAA8CFCACAA8CA
%A8CAA8CFCACAA8CFCACAA8CFCACAA8CFCACAA8CAA8CAA8CFCACAFFCAA87C
%A17CA17DA17CA17DA17CA17DA17CA17DA17CA17DA17CCACACFCAFFCACFCA
%FFCACFCAFFCACFCAFFCACFCAFFCACFCACA7DA17CA17DA17CA17DA17CA17D
%A17CA17DA17CA17DA17CA17DA17CA1A1CFCAFFCACFCAFFCACFCAFFCACFCA
%FFCACFCAFFCACFA8CACACFCAFFCACFCAFFCACFCAFFCACFCAFFCACAA8CACA
%FFCAFFCAA8CAA8A8A1A17DA1A1A17DA1A1A17CA17DA17DA1A1A17CA17DA7
%A8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8A8A1A17DA1
%A1A17DA1A1A17DA1A1A17DA17DA17DA17DA1A1A17DA17CCACACAA8CFA8CA
%A8CFA8CAA8CFA8CFCAFFA8CAA8CFA8CAA7CFA8CAA8CFA8CAA8CFA8CAA8CF
%A8CAA8CFA8CAA7CAA8CAA8CFFFCAFFA8A7A1CAA1A8A1CAA1A77DFD05A152
%FD06A1CFCACFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCACFCAFFCAFFCAFFA8A7
%A1CAA7A8A1CAA1A8A1CAA1A8A1A8A1A17DA7A1A14B52A1A17DA7A8FFCAFF
%CACFCAFFCAFFCAFFCAFFA152A7FFCAFFCACFA8CACACFCAFFCAFFCAFFCAFF
%CAFFCAFFCAFFCACAA8CACAFFCAFFCACACAA8CAA1A1A1A7A1A1A1A7A1A17C
%A17DA1272076A17CA1A1CAA8CAA8CAA7CAA1CAA8CFCACAA8CFA7A8A1CAA7
%A8A1A7A1CFA8CA76F82776A1A7A1A7A1A1A1A7A1A77DA17DA17DA151F820
%A17DA1A1CAA8CAA7CAA8A8A8CFCACAA8FFCA27F876CACAA1CAA7A8A1CAA1
%A7A8CFCACAA8CFCA7C2DA8CACAA8CFA8CAA7CACACAA8CFFFCAFFA7A7A1A7
%A1A8A1A7A1A7A1A17DA1A14B6FA1A1A17CA8CACACAFFCACFCACACAFFCAFF
%CAFFCACAA8FD04CAFFA7A8CAFFA8A04BF8F8A1A1A7A1A8A1A7A1A8A1A17D
%FD04A17D4BA07DA1A1CAA8FFCACFCAFFA7CACAFFCACFCAFF4B9A4BCFCACA
%A8FFCACFCAFFA1CACAFFCACFCACA4B2D7CFFCACFFD04CAA8FFCACFCAA8CF
%A8A176A17CA176A17CA176A1767D76A17C9A76A1767D7DCAA7CAA7CAA8CA
%A1CAA8CAA8CFA8CAA1CAA8CAA1CACAA8A1CFA8A176C320F852A17CA176A1
%7CA176A17CA176A17CA176C29AA176A1A8CAA8CAA8CAA8A8A7CFA8CFA8CF
%A152997CA8CAA7CAA8CAA8CAA8A1A8CAA8CFA8CFA89A75A8A8CFA8CAA7CA
%A7CAA8CFA8CAFFCAFFA1A7A1A1A1A7A1A1A1A7A1A1A1A758587C7C7CA7A1
%FD04CACFCACFCACACAFFCAFFCAFFCACAA8FD04CAFFA7CACAFFA6C8C89F26
%A1A1A7A1A7A1A7A1A7A1A7A1A7A1A79A9A999A75A1A1CFA8FFCACFCAFFA7
%CACAFFCAFFA8582DA051A8CACACAFFA8CACAFFA1CACAFFCAFFA8C9A0C3CA
%FFCAFFCACFCACACAFFCAFFCAA8CFCAA87CA17CA17DA17DA17DA17DA15858
%51582D587CA1A1CFA8CAA1CACACFA1CACACAA8CFCACAA1CAA8CAA7CACAA8
%A1FFC9C8C0C7C7C77CA17CA17CA17DA17DA17DA17DA8A0996F996F996FA0
%A7CAA8C9A0CAA8CAA8CFA8CFCA7C2D5875512DA8A7A7767DA1CAA8A7A1CA
%A8FFA79A6FFFA175A1FFCACAA8CAA8CAA8CFCACACFCAFFA7A17CA17DA17D
%A1A1A17DA1A17C517DFD04587CCAA8FD04CACFCAA8A8FFCACFCAFFCACAA8
%CFCAC2C2CAA8A8C9C8C7C7C8C7C7A77DA17DA17DA1A1A17DFD04A1A06F9A
%6F9A999A6F9AA0C9C2CACAFFA1CACAFFCAFF52587BA0755851582D767DCA
%CAFFA09A75A1A1A075A0FFCA759AA1FFCACAA8CACAFFCAFFCAA8CAA8CA7C
%7D76A17DA17CA17DA17CA15834515851C299C2BCBCA1CFA8CAA8CAA1A7A1
%CAA8CAA8CFA7A8A1C9C1C299A09AC29FC79FC8A5C7A0A176A17CA17CA17D
%A17CA17DA1759999996F9975996F9999C9A7CAA8A7A1A7A7CFA8582D5751
%762D572D2D58A1A1CAA7A19A9A6F997599A0FFA1997575A1FFA8CAA7CAA8
%CAA8CFFFCAFFA1A17CA17DA17CA17DA17CA1A17D76C3A0A0C2C8C2C3939A
%CACAA1CAA8FFA1CAA8FFCAFFCAFFA8CAA1C8C2C8C2C3BCC8C7C7C2C8C2A1
%7DA17DA17CA17DA17CA17DA17DA06F9A759A9AC39AA0A1C8A0CAA8CAA8FD
%04CAFF7D582D5876A02D587DCAA1A8A7CACACAA19A759A75CAFFCA99A075
%A1CACAA8CACAFFCAFFCACACAA8A77DA17DA17DA17DA17DA17CA17C7C9AC3
%BCC299C37DA1A1A8A1A7A1A8A8CAA1CACACAA8CFCAA7A1A1A1C2A0A8A7CA
%A0C8C2C2BCC37DA17DA17DA17DA17DA17DA17DA17CA06F996F9A9A4B52CA
%A1A7A1CAA1A8A8CAA1CFCAA72D512D769A4B4BCAA1A17DA1A1CAA8CAA1A1
%9AA0A8FFA89A757575CAA8CAA7CACACAA8CFFFCAFFA7FD04A1A7A1A1A1A7
%A1A1A1A7A6C89FC8C2A17DA8A7CAA7CAA8CAA1CAA7A7A8FFCACFCAFFA1A7
%A1A8A1A7A7A127519AC39AC2A1A8A1A17DFD0BA17DC2BB9993BC939ABCC9
%A8CAA7CAA8CAA1CACAFF7D5199BB93BB9ABC99C2A1A7A1A7A8CAA1FFCFFF
%9ACFFFCA6FA19A9ACAFFA8CAA8FFCACFCAA8CFA8A876A176A17CA17CA17C
%A17CA1A0C9C1C8C2C8A0A1A1CAA1A8A1CAA1A8A1CAA1CAA8CFA8CAA1A8A1
%A8A1A8A1A8A17D4B996F9975A1A1A7767D76A17CA176A17CA176A17DA19F
%C7C1C19FA0A1C3A1CAA1A8A1CAA7A8A7CFCAA77BA09FC19FC3A1A1A1A8A1
%A8A1CAA7A8A8CFA8A09FC8A0A0769AC27CA1CAA8CAA8CFA8CAFFCAFFA7A1
%7DA17DA7A1A1A1A7A1A17DC9FD04C8C2C8A1CAA7CAA7CAA7CAA7CAA7CAA8
%FFCAFFA8CAA7CAA1CAA7CAA8CAA19A6F9A999AA1CAA1A17CA1A1A17DA1A1
%A17DFD04A1C8C8CEA6CE7CA8A8CAA7CAA7CAA7CAA1CACAFFC9C7C8C9A0C8
%C2C9A8CFA7CAA7CAA7CAA1CACACAC1A6C2C2BB9A9AC26FA0C3CACAFFCAFF
%CAA8CFCAA176A17CA17CA17CA17CA17C7DA0C8C1C8C2C8C1A076A1767D76
%A17C7D76A176A8CACFCACA7CA17DA17DA7A1A176A06F996F9975A17DA17C
%7D76A17CA176A17CA176A17CA19FC8C8C8A67D7CA176A17CA1767D767DA1
%FFCACA9EC8C8C2C1C8C2A176A17CA1767D767DA1FFC2C89FC8C1BBBCC3A0
%C39AC3A1CAA8CFCACACFCAFFA1A17DA1A1A17DA1A1A17DA17DC9C8C8C2C9
%C2C8C2A176A176A17CA17C7D7CA1A7FFCAFFA8FD05A17DA1A1A1769A759A
%6F9AA1A17DA1A1A17DA1A1A17DA1A1A17DA1A0C7C7C8A6C8A6A77D7D76A1
%7DA176A17CA7CAFFCAC8C7C8C8C9A7C9A17D76A17DA176A176A8CAC8C2C8
%9FC9C8CFCAFFCAFFA8CACAFFCAFFCAA8CAA8CAA1A1A1A7FD07A1A7A0C8C1
%C8C2C8C1C87C7D76A17CA176A17CA176A8CACFA8CAA1A77CA87DA87DA77D
%766F996F9975A7A1A7A1A7A1A1A1A7A1A17DFD04A1A79FC79EA59FC77CA1
%7CA176A17CA1767DA1CFA8FFA6C79EC7A6A176A17CA176A17CA1767DA1C9
%C1C89FC2C2C9A0C2A0C9A8CAA1CAA8CAA8CFFFCAFFA8A7A1CAA1A8A1A7A1
%A17DA8A1C9C2C8C2C9C8C8C2A17DA17DA17CA17DA17CA1A7FFCAFFCAC9FD
%08A1769A999A6F9A76A17DA7A1A8A1CAA1A77DA1A1A7A1A8A1C7C7C8A5C7
%C7A77DA17CA17DA17CA17CA7CAFFCAC8C7C8C7C8A1A17DA17CA17DA17CA1
%7CA8C9C8C2C8C2C8C2C8C2C8C9FFA8CACAFFCAFFCACACAA8CAA1A1A1A7A1
%A77DA17CA17DA7C2C8C1C8A0C8C1C8A07D76A17CA176A17CA176A8CACFA8
%CFA1C97DA7A1A77DA77D766F996F996F99755151A7A1A1A1A7A1A17CFD04
%A1A7C7C79FA5C7C77CA17CA176A17CA176A1A1CFA8CF9FC7A5C7C7A176A1
%7CA176A17CA1767DA1C9C1C8C2C8C1C8C8CFA8CFA8CAA7CACACAA8CFCAA8
%CAA1A7A1A7A1A8A1A7764B7DA7A1C9C2C8A0C9C8C8C1C87DA17CA17DA17C
%A17DA1A1CAA8CAA1C9C27C587CFD04A17C9A6F9A999A6F7C2D58A1A8A1A7
%A1A77DA17DA7A1A8A0C7C7C79FC7C7A17CA17DA17CA17DA176A1A8CAA6C7
%9FC7C7C7A0A17CA17DA17CA17DA176A7C8C8C1C9C8C8C1C9A8CAA7CAA7CA
%A7CAA8CAA7A1A8A1A7A1A7A1A7A1A8A17D26A1A1A7A0C8C1C8A1C9C1C89F
%A176A176A176A176A176A1A1A8A8C9A0C97D7C52A17DA176A1769A6F996F
%9A522D52A7A1A7A1A7FD05A1A7A1A79FC79FA5C1C77C7D76A176A176A17C
%7D7CA8A1C79FC19FC79EC8767D76A176A176A17C7D7CC8C1C8A0C9C1C8C2
%A8A1A7A1A8A1A7A1A8A1A7CAA7CAA7CAA7CAA7C3BCC29A9ABCC299C9C8C8
%C2CAC8C8C1C87DA17CA17DA17CA17DA1A1CAA7CAA1A17DA17DA17DA1A1A1
%7DA19A9A6F9AA7CA517CA7CAA7CAA7CAA8CAA7CAA7CAA7C8C7C79FC7A5A1
%7CA17DA17CA17DA17CA1A8C9FD07C7A17DA17DA17CA17DA17CA17B7C7BA7
%7C7C7B7CA1CAA7CAA7CAA7CAA7CAA7A1A8A1A8A1A8A1A8A1C3A1C3A1C3A1
%C3A0C2C1C9A1C9C2C2A0A17CA176A17CA176A176A1A1A8A1A87CA17CA17C
%A17DA176A17CA16F9999A8A17C52A8A1A8A1A8A1A8A1A8A1A8A1A79FA59F
%9F9FA67CA176A17CA176A17C7D7CA8A1BB9FC79FC7C1C29A9A99A17CA176
%A17CA152582D527C7D2D582DA7A1A8A1A8A1A8A1A8A1A8CAA1CAA7CAA1CA
%A7CAA8CFA8CAA8CAA8A19AA0A7CAA09A93A07CA17DA17CA17DA17CA1A1CA
%A1CAA8A1A1A7A1A1A1A7A1A17CA1A17C75A1A7CAA1A8A7CAA1CAA7CAA1CA
%A7CAA1CAA7C399A075767DA17DA17CA17DA17CA17CA1A8C3B5BCA0CAC2BC
%93BBB5BC7CA17DA17CA17DA0C7C7C8A8A7C8C1C9A1CAA7CAA1CAA7CAA1CA
%A7A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A76F9A6FA1A1A06E996F996FA17C
%A176A17CA176A7A1A8A19A6F7C76A176756FA17C7C51582D2D51A7A1A7A1
%A8A1A8A1A8A1A8A1A8A1A7A1A776756FA0757675A17CA176A17CA176A1A1
%A8A1BB93BB9AA193B5939A7CA176A17CA17BC19FC79EC8A1A19EC79FA8A1
%A8A1A8A1A8A1A8A1A8CAA7CAA7CAA7CAA7CAA7CAA8CAA8CFA19A75A0A1A8
%A1A19AA09AA0A1A8A1CAA1A8A1CAA7CAA7CA9AA0A1CAA1A776A0A1CA5858
%5258517DA1A8A1CAA7CAA7CAA7CAA7CAA7CAA1CAA1A176A09AA076A0A1A8
%A1CAA1A8A1CAA1CAA1CAA0BC99BCA1BC9AC9A1A8A1A8A1A8A1FD06A0A8A0
%A09FA0A1CAA7CAA7CAA7CAA7CAA7A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8
%A1A7A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8
%A1A8A1A7A1A8A1A7A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A7A1A8
%A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A7A1A8A1A7
%A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8CAA7A8A1CAA7A8A1
%CAA7A8A1CAA7A8A1CAA7A8A1CAA7A8A1CAA7A8A1CAA7A8A1CAA7A8A1CAA7
%A8A1CAA7A8A1CAA7A8A1CAA7CAA1CAA7CAA1CAA7A8A1CAA7A8A1CAA7A8A1
%CAA7A8A1CAA7A8A1CAA7A8A1CAA7A8A1CAA7A8A1CAA7A8A1CAA7A8A1CAA7
%A8A1CAA7A8A1CAA7A8A1CAA7A8A1CAA7A8A1CAA7A8A1CAA7A8A1CAA7A8A1
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FF
%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 6.0-c002 79.164460, 2020/05/12-16:04:17        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
    xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
    xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
    xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
    xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
    xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/postscript"
   xmp:CreatorTool="Adobe Illustrator 24.2 (Windows)"
   xmp:CreateDate="2021-12-22T14:19:57+03:00"
   xmp:ModifyDate="2021-12-22T14:19:57+03:00"
   xmp:MetadataDate="2021-12-22T14:19:57+03:00"
   xmpMM:OriginalDocumentID="uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7"
   xmpMM:DocumentID="xmp.did:370bc0ce-b6c7-1f42-9f7b-f72d29b513b0"
   xmpMM:InstanceID="xmp.iid:370bc0ce-b6c7-1f42-9f7b-f72d29b513b0"
   xmpMM:RenditionClass="proof:pdf"
   illustrator:StartupProfile="Basic RGB"
   illustrator:CreatorSubTool="Adobe Illustrator"
   xmpTPg:NPages="1"
   xmpTPg:HasVisibleTransparency="True"
   xmpTPg:HasVisibleOverprint="False"
   pdf:Producer="Adobe PDF library 15.00">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">2112.w037.n003.92B.p1.92</rdf:li>
    </rdf:Alt>
   </dc:title>
   <xmp:Thumbnails>
    <rdf:Alt>
     <rdf:li
      xmpGImg:width="256"
      xmpGImg:height="96"
      xmpGImg:format="JPEG"
      xmpGImg:image="/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAYAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9D5jOYotcxKxUk1HXbFN&#xA;NfXIfE/djaeF31yHxP3Y2vC765D4n7sbXhd9ch8T92Nrwu+uQ+J+7G14XfXIfE/dja8LvrkPifux&#xA;teFZPdwmCQb7qe3tgteFbaXUItYQa1Eajp7DG1MVX65D4n7sNrwu+uQ+J+7G14XfXIfE/dja8Lvr&#xA;kPifuxteF31yHxP3Y2vC765D4n7sbXhd9ch8T92Nrwu+uQ+J+7G14XfXIfE/dja8KFt7mIX92xrR&#xA;vTpt4LgtJGyK+uQ+J+7DaOF31yHxP3Y2vC765D4n7sbXhd9ch8T92Nrwu+uQ+J+7G14XfXIfE/dj&#xA;a8LvrkPifuxteF31yHxP3Y2vC765D4n7sbXhbW6iZgoJqdhtiilbFDsVS2b++f5nA2BG/VoP5cLC&#xA;y76tB/J+vFbLvq0H8n68Vsu+rQfyfrxWyhYY0a4KkVXfbAyJ2RX1aD+T9eFjZd9Wg/k/XitlLtcm&#xA;gtbQqqj1paqnsO5wFlGyt0GeC5tfTdR6sOx917HELKwmf1aD+T9eFjZd9Wg/k/Xitl31aD+T9eK2&#xA;XfVoP5P14rZUbqKNIwVWhrT8DgLIFdBBE0Ssy1J6nFBKp9Wg/k/XhRZd9Wg/k/XitlbLHaxRtI4A&#xA;RASx36DFNlj+majG+pv6ygR3JAUfykbL/TIgsyNmRfVoP5P15Jrsu+rQfyfrxWy76tB/J+vFbLvq&#xA;0H8n68VsoZY0+tcKfDU7fRgZXsifq0H8n68LGy76tB/J+vFbLvq0H8n68Vsu+rQfy/rxWygo/wC+&#xA;X/WH68DMplha3Yqls398/wAzgbAmWFrdirsVdiqCt/8AepvpwMzyRuFg7FVN7a1kblLDHK1KAuoa&#xA;g+nFWktrWN+cUEcT0pyRQpp9GKquKuxV2KuxVD3v90P9b+BwFlFfbf3C/wCffCg81XFDsVWyRxyL&#xA;wkQOh6q24NPEYqpmysCKfVIfojUH8BivxVcVbxV2KuxVBr/vb9J/VgZ9EZhYOxV2KuxVLY/79f8A&#xA;WH68DYeSZYWtZLNDCnOV1jTpychR95xVKJtQsDK5FzFSp/bX+uBsCYfpTTf+WuH/AJGJ/XCwp36U&#xA;03/lrh/5GJ/XFad+lNN/5a4f+Rif1xWnfpTTf+WuH/kYn9cVpRsp4JrljDIsgBNShDD8MDI8kwws&#xA;HYq7FXYq7FVskkcaF5GCIvVmIAH0nFUP+lNN/wCWuH/kYn9cU079Kab/AMtcP/IxP64rShealpxi&#xA;AF1Cfi7SL4H3wFlEL7fU9NEKg3cIP/GRfH54oIVP0ppv/LXD/wAjE/rhRTv0ppv/AC1w/wDIxP64&#xA;rTa6jp7sFS6hZmNFUSKSSew3xWkTih2KuxV2KuxVBr/vb9J/VgZ9EZhYOxV2KuxVLY/79f8AWH68&#xA;DYeSZYWtjnnbT7u70+JrdeYgcvItQDSlK7+GAs4Fg36PvP8AfR+8f1yDa79H3n++j94/riqw2dwD&#xA;QqAfAsv9cKu+qXH8o/4Jf64q42lwOqj/AIJf64qyvyJZ3MVzPNIvGNlCjcGp69sIYT5M0yTU7FXY&#xA;q7FXYqkfnGzuLrRXWAcmjdZGWtKqta/rwFlDm8//AEfef76P3j+uQbnfo+8/30fvH9cVd+j7z/fR&#xA;+8f1xVprG7UVaOg8SR/XFVv1S4/lH/BL/XCrvqlx/KP+CX+uKqttpt5cXEcMSj1HYKp5DYk0rscU&#xA;F61k2h2KuxV2KuxVBr/vb9J/VgZ9EZhYOxV2KuxVLY/79f8AWH68DYeSZYWtBazLHFpdzJI3FAhB&#xA;Pz2H4nAUx5sF/SFn/v0fcf6ZBud+kLP/AH6PuP8ATFUtuJ4mmdlaoJ2OFLGfO8XmO7t7SHRL4WEH&#xA;Nn1K7SnrLFHEXCxhlb7TrQkbjwIriZiItljxHJIRBpPbSV/qdv68nqT+jGJnPGpcIOR+AKvXwFMQ&#xA;bWUaJD0Ty/AkenW0iNIDLHzLKvIbADfY4Q0ncpoBIwIWeQECvxIAPxUYUEU1plxLPZrJKavykQkC&#xA;leEjID9y4QxI3ReKErjlu5VMhlmWtWAjjQrTmVABYE1wWzA3p0rXgt5pFuJ0aJGcepHGAaCtPs4A&#xA;WRjXc1LdGTy41zOQGe35OQNqkeGHowrd80efvzK/MDyhqzXi3Nje6Pd3UkdpYyKvqpHEQSKpwY1V&#xA;hViTQnftjiIlt3NupxyxASsESexRarYyxJIslFdQwBBrQiu+RVf+kLP/AH6PuP8ATAqHvby2kh4o&#xA;4JqDShwpQayxhWHLc0p9+KsM03y/5kXzrc63f6tM1hJLKtpYRS8bU26RBI1eIk1cNISaDqvLuMHi&#xA;i+EMxpiI8ZL1LyjbwSyz3J5l7cKU9MVPXw75JqkWZHmDT1pa/wDGMf8ANGG2HD7vmsgmnGoy2zv6&#xA;kYjDqSACDWnamKCNkbhYvCPPeo+eJfzJv77S9YvfqGhNaLY6PZuy20zen6sy3KoQr85FMXx9K02G&#xA;+QllESBtu24cUZxnK/o6Parqab1VWN3jTgGPBAzklgBswNKfLJMApi1cS8vrU3OvX0lp4fyUwMqN&#xA;dPm1YXF1+kru0mk9VYQjI5UKfjBNDxoMLEjZMsLF5tqnnHzkv5jx6TZWzHR4poIpFEQLPHJx5yty&#xA;HPiCXoyniKVO2VmfqpZ6fNQmK4HpOWKlsf8Afr/rD9eBsPJMsLWhNWVW025VgGX0zsRUbb4CmPN5&#xA;b9al9Snw0rT7Cf0yDer+q3OlFpX+Rf6ZJWzKwkIotK0+wvj8sCsOurq4bULq6Wd4bmFz6XphlIXk&#xA;VIDL9mgOUkuhnOZmZb2E20N9Wg+rkw/Wra5HOQSFeSVYgspJLU4jllP5uANW7TR6XUmjwkwl1Pn1&#xA;el6NqlhOYbS3lj9eCBvUDMUK8iKKKEV6b0G305kxyxlsC5+bSZMe8onhTiFyhYyyxleJ+y7Ma/Ji&#xA;csDRMgjb9CG0a+tFtkgaVRM0kpVD1IaVmX7wajCGuQ3TbCxSNJbaONhK8SuFKFHLh6iUtTiO3yyv&#xA;JIRiSeTfjBMhSXnzHpkUEsVwPqxukeK3YhqO5U0WpJoT2GYen1kZ3tTnZ9HPajaItNUtZtJjs4yH&#xA;McAE4oep+EDceJ3zB7W18oR4YciDv9lfbbXHRyibmOqT+ZPLOkeYdGbT9Yt0u7KcMgRvtRsAPiQ9&#xA;UYVBBGcxj1WbHwzEjtdb/ZTkThGdxISK5lkt5fQj4hIwFA4r228M77FPjgJd4t15FGl4uZSqn4ak&#xA;b/Cv9MsQ21xIKfZ6fyr/AEwqgfM9/LbaNH6VFmuW4GQAAhRUmhHTKM0qDmaLEJT36MNkS6t6AsVU&#xA;kOpRqqSBsQVNKiuYMZA8nc82XeXfPj6czWV9CLiOQCKScEhgQ3WiAFlp9P6sycWc9XXZ9AJbx2ek&#xA;2OoT6hKt1C4ismU0im9SN2rQhqcvh27UyWPMZzNfSHEy4o440d5eVfqRBvbWLWJZJJVCekq8uu9e&#xA;m2Zbg1soectVnsfKV/qFi1ZRCDBKu9PUIXmPkG5YJHZx88jGBIeAQiI20jNMGlmqDGa8gRuCSdjy&#xA;zCkTfJp0Rh4cwZDikNh5hmGn/mle2eh29rNbLeXcQ9JZZHYD0kYMhbjvX9nr2rl4ydGuGrMYi9yz&#xA;Pyhrms6m4vtQuYoYpU9R7YtLHFGXKmOOL1kikZo1VvUarIxYcO+Wu0EgbPTpsHa75sl0jVrueztT&#xA;erIkbNIrKqBYigcVP7RVyV+WV5MvCXM0+jE4cRPegNc/M55tKjGlxPbXUxZZZZOLenxAJCda15dS&#xA;MplqwdhzTj0VS9W4VdSt73SvIWk+ZY5ZP07czqZ712LsYJBKUQh6grQJ2yUocMBPfiYwyceWWP8A&#xA;gHTz2T/yb5ui161ZJFEWoQAGeMfZYHbmle3iO2W4svEPNo1GDwz5JlH/AH6/6w/XlrUeSZYWtA61&#xA;EJtKuoyzIChPJDQ7b9fowFlHm8wX6ozgcZNzSvJf+acg3Koiti4H7zrSvIf804Vd6dtyp+969eQ/&#xA;pjSoi28uMnK4ikjZLwlzEykydePxMNiCQTSmabVawRnVOx0EDjEjQIlz2/T1HwXzWV3YPEgWIQLW&#xA;N14EyAEfCEao4UrvVT9GQ08ceWdbxkN3L1GcQgODYfZ5JlpegWNvenU6vHqIRoUnBFQjU3Apxr9G&#xA;biOMROzqsurnkjUt00PKCGc2srLIy1RF4qOag0Pwha1712yy3FpFmQzakgVY+LtHI1xybl8AA9Pj&#xA;TrX3wos1XRO2YKpZjRQKk+wyTWxfXJbq6uGSGRvq9AF4Gg9+uQlR2bYbID6vOxAMfwlhUbH4a7jf&#xA;2zBxaCEZ8XPuHc5stZMgVse9i+pea7nRvMkunzeXp7K09aWO31WSdHjljQ15LECXUUp9rf2rkO0N&#xA;BDJDhut7b9LqsmaVT+lEW/mMajeRQxyyUkLcHUFUBUEkdetF75iafQYh6APnu7HLKGKBIFr762to&#xA;GVnMkjSVJPIdqe3vm6AAFB50m1FFtWStJBvSnIf805JV/pWvEH951p9odv8AY4qoX2nWN5a+nL6t&#xA;A1UIYbEDr9n3yM4CQptw5jjNhIZPJvma2kSeG3UrCyyvI5ULwVt2HxfrzRDtDH+Pk9DxY6vjiPmn&#xA;Gm6frx81zXl5Yrd28SkR2irCsiSM37pi9atRVYdd82GDMJDaNuDnEZSvxogd3qZ3axhRHMGMMtQ/&#xA;AhCyVFCgYD333zJwYo440BTqs8zKRs2ilu5UiDkLcvFKfTSVmB4sUIYNRvssD17ZfbTuOSIvbaT/&#xA;AAlcWyILiUWDxKi7h3EJUAcqdT44JGoktOQWCHhth5U1olLgWzqYWjldJkKLwElGBLld/hIzU5Nd&#xA;AdxsHr+pyez+yMR4ZyyVIEEx4ZfJOtN8r+Y7XXm1iSyMkBR1+o8bcRoSUMMkbcfUDgA1PLeu1KZk&#xA;4cxMARG7625+bs/Syy8fiRj5cJZtEmqkpPL6kV2CS5ZgXXanDkO345mRJrfYuDkjESIB4h3pizPc&#xA;6bHFexJdtyeJop2I+B2UK5IDV4gfPCaI3YRJibGyQaz+XVhZ6VLqFpNLLMkQ424oys7UX4TQNSpr&#xA;mJnwxjEyJoOZg1UpSEaT3z3c2E/kO002wdpbmza2VIkR+X7tfT8Mjk12DJj4RL9DXp9NkhlMpDY2&#xA;wTytf22m68NWn1Gzt9Pgdo9SuHnSOGFnUepFKxPFHjdgpVjswod8GngYGMfJzM4E8Jl0H63qcLK0&#xA;qMpBUsCCNwQTmwdSeSZ4WtA616/6KuvQCmTgac60p36e2Aso83my6VdqwYFKg16n+mQbl5srxTzJ&#xA;jG9dyaYVaWzumaqtGT12JOKskirDDZh9zHGvIdvtE7ZyeoleW/P/AHxdziHo/HcFl/Aro6x7K6ho&#xA;q70ruN/Y7ZHHPwsokOX6EyjxwIPNjMuua+HIjnQKOzIK/qzrtnSUubXda9P4Z19T3ReNfuxWkVom&#xA;s6vJqtjFcTKwkuEVgqqAVr8q4hSNnplzFW0m3O8TkcVr+yfcZZTj288D6760K+pcSCcVCC3VGX4i&#xA;tCaSexrTIgBt4lSC+1alvIEnT1JfTMjcOK0K1O0QO3LxxAUl555s1G+u761S7lEjRRkggBQOZNen&#xA;+qMxM5dz2fH0k+bXlRZjrURhCl1VyOXQfCR/HK8P1N2tP7ss1urS/uePP0xwrTiT3+dfDMx0ikum&#xA;3irxHCla9ThVo204+EvECCdi2+KrxYXpAX93Sta1PfBKVC1ZZLexxWMitsfTKf3aPuXqK8vnnn+D&#xA;OKEfL+aD/FbnZYcz+nypJ9Wvryx1OfULaSNVunqFMEfL92nwKzf6xO/bOo7H1sclxF2LPIDmdnAy&#xA;6aUZGR5ED7Eli13W6H1Z1r24ov8AEZuVppdd10Mxe4ThvTii19uoxWnpOhO8+hWbyGrywKXbpUsN&#xA;+mGUeKJHe1E0UnmCvbG2chWBcHlEkgoy0/a8Dvnn2HMMfplzHF/CD9/m7mP1cQ8utJXe3dppcsap&#xA;8NzSCYUtoCOIU1QkN1INNumdTotIQY5ARRo/SO5oz6kSBjR69T3pJHr2tkEzTqWJr8KLT8Rm3cKl&#xA;i69rw5GS4TiAacUWtfpGKaZrc3LS6JpscnxNNbxyTVA3JQdvepzTdsZqEYD3uZoMYJlI+5JU0hLy&#xA;3aBriW2ELSOnpsEBHPko3DbKvT5ZqYGyTty/tdliyeGK4RIX1HypefI/lmaKWwfUryS3uCIZoBcx&#xA;8JFvuTSjhw3D+oxYd6nN/jlj2HEb9PUdXGlq58J/d4+H1H6ZdPin2l6INMljC3tzdKwCqk7q6Koa&#xA;g4gKu+2Z0MfD1J97r8+q8QVwQjX80V+lP8tcJJbzWI5rSWJYmDOpUbjuMFsxFjvpyfyH7jkWxDX8&#xA;E7QUWNmPIbAE4qknkXVZtd0Ky1r6q1st9CJRFUuFqaU58V5dPDDIUiMrFswuOoA/32lAN/2BnH/V&#xA;lHnw/od4NoH4uNTawlgQV5JQ+Ao3/G2W6+HDkPvP6/0sdNK4/D9n6GIXicLuZewdqfKudHppcWOJ&#xA;8g6vKKkR5qOXNaK0qURatYyEVCToSPkcIU8npf6bWS2kEcLu6DZFNTQjwoeh/XjOZESQLaowuQBP&#xA;NhmthbU2sqWVyyQ3aAlSSRFKA3qbRn7IQV+eYekJFijVt2vnwAEESJ22S7SpFuYLGdLO5g4yNNKr&#xA;ty9NVYAsf3ajolczQ42PIZxs7MQ8wafPLcR3MS8lVCJAOoCVYt92Y2aJO7utDmAHCe9J1juJGC26&#xA;u8vVVjBLbew3zHjzdlIgDdlPl7U9Zk8xrp00knoxIwe3kUBhxSm+1eu/XMrGTyLxxzmWoIG0d9mb&#xA;enJ/IfuOXOYlVxaXRnciFyCxoQp/phTaaRRSUQFGGwrscqymoE+RUc0Vd/3IHYyRg7V2Mig55xj5&#xA;/A/c7PJy+I+9KvMzfDbr4lj91M6L2cjvM+79Lj6rokWdQ4jTfZPyxV6FoespFolnEIyWSBQDUUqF&#xA;ynV6gYcUp9w+3oxjj4pUgLdmEk0TGrK5kBPUrIS1f+C5D6M88yHiqXf97uEj8yBvrsbnoYwAf9Un&#xA;Ow7Dz8eDh6wNfqcDURqXvSnNy0NP9hvkcVZhBP61jZbUEdtCg/2KDOY7UneY+VB2+jjWP3q0jCo4&#xA;igKcWB3rVaN9+UZo8BFdYj7Q2YzxA+9GWj6TEIpDZgzx8CJBt8UYopHyzoNFp8ZxxnXq2+x1eozZ&#xA;BIxvb9auNUX1FYoaKdhsNq1zY24lIn9Oxf76b7xjbHhSbAzdiqCfy3o7q0zySKzJ6hBnl2PqcSeu&#xA;UnTxPf8AMudHtPMBQ4f9LH9SyDyn5ct4xGjGK3jfiqJLKiKiVL9KAUFMfy0PP5lP8qZu6P8ApYpV&#xA;p3mqO6v7a2VI1tpKxwuJucvGFKKXSnIcgnc5q8egj4glfX7nMzyIxy23692/9rfmTzeNJmjtktxc&#xA;eovqci3Gm5UjofDJ63Ric7vmw0AuHuSX9MWl7cBhIommAYxry2JH2asFqRmbp+GMBEHk4uowTBMi&#xA;NlfifDMhxFewika/tuKkhZFZj2AHUnCFZTeXNlb2k013KYoFU1dV5nfbZaivXEkDmxjEk0GJRPp8&#xA;0QkgllYEkfFEFpTY/tnACCLDOUZRNF0F/pkdw0Qlka64yIIvSovxR/z8utGr0wCYuuqTilw8VbIW&#xA;a80+3kK3swhjeKVW7tSSNkFFG53OMqpqOojjIJPJA+Rxafp6FxcfGqO3plOoKkbsDQHeuY2GJ4nL&#xA;n2rjzQ4RfEWZLoUP+J/01HMvxQmOSGm5agAav+qMyq3t1vgfvONOsk3uxVY0iUI5gHxqKjIyFilY&#xA;jqHmyj+haq9zIHApcPHEgKsN6qE8O7UzlodkAS3I+H7Sfudt4e1kk/jyQ/6cXUkgMpSO5IetuHLE&#xA;UcjuSfsgHN1oNJDBEiJ5+79ADiZ4m/JdxPhme47RVqGgJ+jFU6v76+0zy/bywRgyJ6ay8twopvUD&#xA;32zC7RxDJi4SNnY9lYYZM3DI9Cqab5j0+8iM7gQ3SKw9GtWZR8Xwjv0+jObHZBlEiMt72B+1ztVp&#xA;Z4pgVcD1/Wx7U/Msl/Nxii+BNoEpViT1J+7NhoMX5exD1Slz/scvJ2PCgckqA58m4fXMamVeLnqB&#xA;0zf4zIj1c3nNTHGJkYyTHzVUtribksUbO1OgFchmzwxC5kRDVGJJ2Vh5O1KWlwusXVryUViBYcKC&#xA;hAo4222znpdq4p5eEQEgTz96z0ExZ8SQ939qrqvlm8vHilg1W5X04o4XSMk1Kihc1devU5m9o6rH&#xA;gMQYg2Pu+DDFo5ZT/eSj8090fT5NPsEtZLl7pkLEzSV5HkSablulc2mlnGeOMo8iGAxmGxNlG5el&#xA;2Ko39B6v/wAskn3ZLhLDxI97v0Hq/wDyySfdjwlfEj3r10jWlXitrJTw4jxrjwlHHHvam0bWJoni&#xA;ltZGjkDK68eocUYfSMTEpGSINgpXbfl/FbTieDSSkq/ZYBttqbVOQGEDo3y1kpCjLZWuvJb3TK1z&#xA;pfrMoopdK0H04TivmGENSY8pUpxeQ44pFkj0cJIhqrBKEEdxgGHyZHVyIoyRv+HdR/5Yn+7JcBav&#xA;EHe2PL+pD/jyf/gceAo8Qd6y58tX9zA0E9i8kLijIV2IxMCeiY5QDYKy28qXVrAsEGnvHEtaKAe5&#xA;qdzviMddEyzAmyVMeS3F6b0aY31oihloa9KeNK02rg8Le6T+Y2q9lC9/L2G+n9e70p5ZaBeRLjYd&#xA;BswxOPycecMcjZdY/l7DYzi4tdJaKYAgMOZ2PXqTiMfksIY4mwmQ0DVB0s3H+xyXAW3xI97f6D1f&#xA;/lkk+7HhK+JHvd+g9X/5ZJPux4SviR71p8v6metk/wDwODgK+JHvS5vy9hZizaUxZjUn4+p/2WQ/&#xA;Ljubhqz/ADm4PIEUEiyR6QRIh5K5UswI8CSThGGuQYy1JPMo/wDw5qP/ACxSfcclwFh4g72/8Pal&#xA;/wAsT/8AA48BR4g72pPLuoyxNFJYu0TijIV2IOJxkiiGUM/CQQaIQUfkNY5Vlj0tlkQ1VhyFCPpy&#xA;oaWINgOZPtXNKJiZ2D7lS28mTWvL6vpzxlySxANTU16nJQwCPINObXTy1xyulf8Aw1qX/LJL92T4&#xA;C0eKO9Tm8o3U/H1rB5ONePJa0r4ZCeAS5hlHUcPIqY8lOCCNMNQQQePcb5AaSI/hZfmj/ObufJkt&#xA;yytPpzuyiit8QIHzBGSnpxLmEQ1PDyKIt/LeoW8QihsnSMVIUDx3yUMXCKAYyzCRslU/Qer/APLJ&#xA;J92T4Sx8SPe79B6v/wAskn3Y8JXxI97/AP/Z"/>
    </rdf:Alt>
   </xmp:Thumbnails>
   <xmpMM:DerivedFrom
    stRef:instanceID="xmp.iid:e33c308e-1f64-d446-b667-7329ae758c0d"
    stRef:documentID="xmp.did:e33c308e-1f64-d446-b667-7329ae758c0d"
    stRef:originalDocumentID="uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7"
    stRef:renditionClass="proof:pdf"/>
   <xmpMM:History>
    <rdf:Seq>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:70f8aa99-76da-7d40-aa1a-1c7a0e09fb88"
      stEvt:when="2021-11-02T18:45:28+03:00"
      stEvt:softwareAgent="Adobe Illustrator 24.2 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:e33c308e-1f64-d446-b667-7329ae758c0d"
      stEvt:when="2021-12-22T14:19:54+03:00"
      stEvt:softwareAgent="Adobe Illustrator 24.2 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="converted"
      stEvt:parameters="from application/postscript to application/vnd.adobe.illustrator"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:370bc0ce-b6c7-1f42-9f7b-f72d29b513b0"
      stEvt:when="2021-12-22T14:19:57+03:00"
      stEvt:softwareAgent="Adobe Illustrator 24.2 (Windows)"
      stEvt:changed="/"/>
    </rdf:Seq>
   </xmpMM:History>
   <xmpTPg:MaxPageSize
    stDim:w="1084.791800"
    stDim:h="400.000000"
    stDim:unit="Pixels"/>
   <xmpTPg:PlateNames>
    <rdf:Seq>
     <rdf:li>Cyan</rdf:li>
     <rdf:li>Magenta</rdf:li>
     <rdf:li>Yellow</rdf:li>
     <rdf:li>Black</rdf:li>
    </rdf:Seq>
   </xmpTPg:PlateNames>
   <xmpTPg:SwatchGroups>
    <rdf:Seq>
     <rdf:li
      xmpG:groupName="Default Swatch Group"
      xmpG:groupType="0"/>
    </rdf:Seq>
   </xmpTPg:SwatchGroups>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                 
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1  -1  scale 0 -400 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 400 li
1084.79 400 li
1084.79 0 li
cp
clp
1084.79 400 mo
0 400 li
0 0 li
1084.79 0 li
1084.79 400 li
false sop
/0 
[/DeviceRGB] /CSA add_res
.956863 .878431 .843137 rgb
f
1041.45 361.022 mo
44.711 361.022 li
41.9679 361.022 39.744 358.799 39.744 356.056 cv
39.744 28.9669 li
39.744 26.2235 41.9679 23.9999 44.711 23.9999 cv
1041.45 23.9999 li
1044.19 23.9999 1046.42 26.2235 1046.42 28.9669 cv
1046.42 356.056 li
1046.42 358.799 1044.19 361.022 1041.45 361.022 cv
.917647 .807843 .772549 rgb
f
1012.78 363.699 mo
73.3775 363.699 li
70.7753 363.699 68.6661 361.59 68.6661 358.988 cv
68.6661 46.7113 li
68.6661 44.1094 70.7753 41.9999 73.3775 41.9999 cv
1012.78 41.9999 li
1015.39 41.9999 1017.49 44.1094 1017.49 46.7113 cv
1017.49 358.988 li
1017.49 361.59 1015.39 363.699 1012.78 363.699 cv
.956863 .878431 .843137 rgb
f
225.925 341.813 mo
207.194 341.813 li
207.194 36.0679 li
225.925 36.0679 li
225.925 341.813 li
cp
.917647 .807843 .772549 rgb
f
549.415 342.146 mo
530.684 342.146 li
530.684 36.4004 li
549.415 36.4004 li
549.415 342.146 li
cp
f
872.904 340.736 mo
854.173 340.736 li
854.173 34.9897 li
872.904 34.9897 li
872.904 340.736 li
cp
f
1084.79 400 mo
0 400 li
0 324.485 li
1084.79 324.485 li
1084.79 400 li
.847059 .737255 .698039 rgb
f
661.636 334.419 mo
445.656 334.419 li
440.115 334.419 435.623 329.927 435.623 324.386 cv
435.623 158.406 li
435.623 149.896 442.521 142.999 451.03 142.999 cv
656.262 142.999 li
664.771 142.999 671.669 149.896 671.669 158.406 cv
671.669 324.386 li
671.669 329.927 667.177 334.419 661.636 334.419 cv
cp
.807843 .682353 .639216 rgb
f
671.669 161.287 mo
435.623 161.287 li
432.27 161.287 429.551 158.569 429.551 155.216 cv
429.551 139.092 li
429.551 135.739 432.27 133.021 435.623 133.021 cv
671.669 133.021 li
675.022 133.021 677.74 135.739 677.74 139.092 cv
677.74 155.216 li
677.74 158.569 675.022 161.287 671.669 161.287 cv
cp
.698039 .568627 .52549 rgb
f
480.469 244.79 mo
449.949 244.79 li
449.949 213.659 li
449.949 212.783 450.66 212.072 451.537 212.072 cv
478.882 212.072 li
479.759 212.072 480.469 212.783 480.469 213.659 cv
480.469 244.79 li
cp
.729412 .596078 .564706 rgb
f
514.896 244.79 mo
484.376 244.79 li
484.376 213.659 li
484.376 212.783 485.086 212.072 485.963 212.072 cv
513.309 212.072 li
514.185 212.072 514.896 212.783 514.896 213.659 cv
514.896 244.79 li
cp
.698039 .568627 .52549 rgb
f
549.078 244.79 mo
518.558 244.79 li
518.558 213.659 li
518.558 212.783 519.269 212.072 520.145 212.072 cv
547.491 212.072 li
548.367 212.072 549.078 212.783 549.078 213.659 cv
549.078 244.79 li
cp
.729412 .596078 .564706 rgb
f
583.504 244.79 mo
552.984 244.79 li
552.984 213.659 li
552.984 212.783 553.695 212.072 554.571 212.072 cv
581.917 212.072 li
582.794 212.072 583.504 212.783 583.504 213.659 cv
583.504 244.79 li
cp
f
595.956 199.132 mo
565.437 199.132 li
565.437 168.001 li
565.437 167.125 566.147 166.415 567.023 166.415 cv
594.369 166.415 li
595.246 166.415 595.956 167.125 595.956 168.001 cv
595.956 199.132 li
cp
f
630.139 199.132 mo
599.619 199.132 li
599.619 168.001 li
599.619 167.125 600.329 166.415 601.206 166.415 cv
628.552 166.415 li
629.429 166.415 630.139 167.125 630.139 168.001 cv
630.139 199.132 li
cp
f
664.565 199.132 mo
634.045 199.132 li
634.045 168.001 li
634.045 167.125 634.756 166.415 635.633 166.415 cv
662.979 166.415 li
663.854 166.415 664.565 167.125 664.565 168.001 cv
664.565 199.132 li
cp
f
578.377 334.419 mo
547.857 334.419 li
547.857 303.289 li
547.857 302.412 548.567 301.702 549.444 301.702 cv
576.79 301.702 li
577.666 301.702 578.377 302.412 578.377 303.289 cv
578.377 334.419 li
cp
f
590.829 288.762 mo
560.31 288.762 li
560.31 257.631 li
560.31 256.755 561.02 256.044 561.896 256.044 cv
589.242 256.044 li
590.118 256.044 590.829 256.755 590.829 257.631 cv
590.829 288.762 li
cp
f
556.646 288.762 mo
526.127 288.762 li
526.127 257.631 li
526.127 256.755 526.837 256.044 527.714 256.044 cv
555.06 256.044 li
555.937 256.044 556.646 256.755 556.646 257.631 cv
556.646 288.762 li
cp
f
522.464 288.762 mo
491.945 288.762 li
491.945 257.631 li
491.945 256.755 492.655 256.044 493.532 256.044 cv
520.877 256.044 li
521.754 256.044 522.464 256.755 522.464 257.631 cv
522.464 288.762 li
cp
.698039 .568627 .52549 rgb
f
625.012 288.762 mo
594.491 288.762 li
594.491 257.631 li
594.491 256.755 595.202 256.044 596.078 256.044 cv
623.425 256.044 li
624.301 256.044 625.012 256.755 625.012 257.631 cv
625.012 288.762 li
cp
.729412 .596078 .564706 rgb
f
659.438 288.762 mo
628.918 288.762 li
628.918 257.631 li
628.918 256.755 629.629 256.044 630.505 256.044 cv
657.851 256.044 li
658.728 256.044 659.438 256.755 659.438 257.631 cv
659.438 288.762 li
cp
f
671.669 205.236 mo
435.623 205.236 li
435.623 196.446 li
671.669 196.446 li
671.669 205.236 li
cp
.698039 .568627 .52549 rgb
f
671.669 249.185 mo
435.623 249.185 li
435.623 240.395 li
671.669 240.395 li
671.669 249.185 li
cp
f
671.669 293.133 mo
435.623 293.133 li
435.623 284.344 li
671.669 284.344 li
671.669 293.133 li
cp
f
216.55 157.02 mo
216.55 325.75 li
216.55 330.7 212.54 334.7 207.6 334.7 cv
37.79 334.7 li
32.8398 334.7 28.8398 330.7 28.8398 325.75 cv
28.8398 157.02 li
28.8398 149.43 34.9902 143.28 42.5801 143.28 cv
202.81 143.28 li
210.4 143.28 216.55 149.43 216.55 157.02 cv
cp
.807843 .682353 .639216 rgb
f
216.478 161.57 mo
25.2378 161.57 li
22.2114 161.57 19.7583 159.117 19.7583 156.09 cv
19.7583 138.784 li
19.7583 135.757 22.2114 133.304 25.2378 133.304 cv
216.478 133.304 li
219.504 133.304 221.958 135.757 221.958 138.784 cv
221.958 156.09 li
221.958 159.117 219.504 161.57 216.478 161.57 cv
cp
.698039 .568627 .52549 rgb
f
65.7729 245.072 mo
35.2529 245.072 li
35.2529 213.942 li
35.2529 213.065 35.9639 212.355 36.8403 212.355 cv
64.186 212.355 li
65.0625 212.355 65.7729 213.065 65.7729 213.942 cv
65.7729 245.072 li
cp
f
99.9551 245.072 mo
69.4355 245.072 li
69.4355 213.942 li
69.4355 213.065 70.146 212.355 71.0225 212.355 cv
98.3682 212.355 li
99.2446 212.355 99.9551 213.065 99.9551 213.942 cv
99.9551 245.072 li
cp
.729412 .596078 .564706 rgb
f
134.382 245.072 mo
103.862 245.072 li
103.862 213.942 li
103.862 213.065 104.572 212.355 105.449 212.355 cv
132.795 212.355 li
133.671 212.355 134.382 213.065 134.382 213.942 cv
134.382 245.072 li
cp
f
138.834 199.415 mo
108.314 199.415 li
108.314 168.284 li
108.314 167.408 109.024 166.697 109.901 166.697 cv
137.247 166.697 li
138.124 166.697 138.834 167.408 138.834 168.284 cv
138.834 199.415 li
cp
f
173.016 199.415 mo
142.496 199.415 li
142.496 168.284 li
142.496 167.408 143.207 166.697 144.083 166.697 cv
171.429 166.697 li
172.306 166.697 173.016 167.408 173.016 168.284 cv
173.016 199.415 li
cp
f
207.442 199.415 mo
176.923 199.415 li
176.923 168.284 li
176.923 167.408 177.633 166.697 178.51 166.697 cv
205.855 166.697 li
206.732 166.697 207.442 167.408 207.442 168.284 cv
207.442 199.415 li
cp
f
121.254 334.702 mo
90.7344 334.702 li
90.7344 303.571 li
90.7344 302.695 91.4448 301.984 92.3213 301.984 cv
119.667 301.984 li
120.544 301.984 121.254 302.695 121.254 303.571 cv
121.254 334.702 li
cp
f
133.707 289.044 mo
103.187 289.044 li
103.187 257.914 li
103.187 257.037 103.897 256.327 104.774 256.327 cv
132.12 256.327 li
132.996 256.327 133.707 257.037 133.707 257.914 cv
133.707 289.044 li
cp
f
99.5244 289.044 mo
69.0044 289.044 li
69.0044 257.914 li
69.0044 257.037 69.7148 256.327 70.5913 256.327 cv
97.937 256.327 li
98.8135 256.327 99.5244 257.037 99.5244 257.914 cv
99.5244 289.044 li
cp
f
65.3418 289.044 mo
34.8223 289.044 li
34.8223 257.914 li
34.8223 257.037 35.5327 256.327 36.4092 256.327 cv
63.7549 256.327 li
64.6313 256.327 65.3418 257.037 65.3418 257.914 cv
65.3418 289.044 li
cp
.698039 .568627 .52549 rgb
f
167.889 289.044 mo
137.369 289.044 li
137.369 257.914 li
137.369 257.037 138.08 256.327 138.956 256.327 cv
166.302 256.327 li
167.178 256.327 167.889 257.037 167.889 257.914 cv
167.889 289.044 li
cp
.729412 .596078 .564706 rgb
f
202.315 289.044 mo
171.795 289.044 li
171.795 257.914 li
171.795 257.037 172.506 256.327 173.382 256.327 cv
200.728 256.327 li
201.604 256.327 202.315 257.037 202.315 257.914 cv
202.315 289.044 li
cp
f
214.55 196.73 mo
214.55 205.52 li
26.8398 205.52 li
26.8398 196.73 li
214.55 196.73 li
cp
.698039 .568627 .52549 rgb
f
214.55 240.68 mo
214.55 249.47 li
26.8398 249.47 li
26.8398 240.68 li
214.55 240.68 li
cp
f
214.55 284.63 mo
214.55 293.42 li
26.8398 293.42 li
26.8398 284.63 li
214.55 284.63 li
cp
f
501.558 372.551 mo
501.558 376.403 461.416 379.526 411.897 379.526 cv
362.378 379.526 322.236 376.403 322.236 372.551 cv
322.236 368.698 362.378 365.575 411.897 365.575 cv
461.416 365.575 501.558 368.698 501.558 372.551 cv
cp
.807843 .682353 .639216 rgb
f
757.568 373.061 mo
757.568 376.913 717.426 380.036 667.907 380.036 cv
618.389 380.036 578.246 376.913 578.246 373.061 cv
578.246 369.208 618.389 366.085 667.907 366.085 cv
717.426 366.085 757.568 369.208 757.568 373.061 cv
cp
f
995.115 373.461 mo
995.115 378.717 945.058 382.978 883.309 382.978 cv
821.56 382.978 771.503 378.717 771.503 373.461 cv
771.503 368.205 821.56 363.944 883.309 363.944 cv
945.058 363.944 995.115 368.205 995.115 373.461 cv
cp
f
404.624 268.368 mo
355.597 268.368 li
355.597 248.23 li
355.597 244.302 358.782 241.117 362.711 241.117 cv
397.51 241.117 li
401.438 241.117 404.624 244.302 404.624 248.23 cv
404.624 268.368 li
cp
.737255 .603922 .568627 rgb
f
407.086 235.82 mo
353.134 235.82 li
350.42 235.82 348.22 233.62 348.22 230.906 cv
348.22 184.197 li
348.22 181.483 350.42 179.283 353.134 179.283 cv
407.086 179.283 li
409.8 179.283 412 181.483 412 184.197 cv
412 230.906 li
412 233.62 409.8 235.82 407.086 235.82 cv
cp
f
384.081 245.74 mo
376.139 245.74 li
376.139 225.899 li
384.081 225.899 li
384.081 245.74 li
cp
f
423.187 265.181 mo
419.431 265.181 li
419.431 254.147 li
423.187 254.147 li
423.187 265.181 li
cp
.698039 .568627 .52549 rgb
f
428.915 257.215 mo
417.458 257.215 li
416.228 257.215 415.23 256.217 415.23 254.986 cv
415.23 234.099 li
415.23 232.868 416.228 231.87 417.458 231.87 cv
428.915 231.87 li
430.145 231.87 431.143 232.868 431.143 234.099 cv
431.143 254.986 li
431.143 256.217 430.145 257.215 428.915 257.215 cv
cp
f
378.46 245.74 mo
370.289 245.74 li
370.289 225.899 li
378.46 225.899 li
378.46 245.74 li
cp
.807843 .682353 .639216 rgb
f
426.407 257.215 mo
414.951 257.215 li
413.721 257.215 412.723 256.217 412.723 254.986 cv
412.723 234.099 li
412.723 232.868 413.721 231.87 414.951 231.87 cv
426.407 231.87 li
427.638 231.87 428.635 232.868 428.635 234.099 cv
428.635 254.986 li
428.635 256.217 427.638 257.215 426.407 257.215 cv
cp
.74902 .619608 .564706 rgb
f
425.439 252.311 mo
415.919 252.311 li
415.455 252.311 415.078 251.934 415.078 251.469 cv
415.078 236.609 li
415.078 236.145 415.455 235.768 415.919 235.768 cv
425.439 235.768 li
425.904 235.768 426.281 236.145 426.281 236.609 cv
426.281 251.469 li
426.281 251.934 425.904 252.311 425.439 252.311 cv
cp
.956863 .898039 .882353 rgb
f
422.262 239.448 mo
416.815 239.448 li
416.627 239.448 416.474 239.296 416.474 239.107 cv
416.474 238.919 416.627 238.767 416.815 238.767 cv
422.262 238.767 li
422.451 238.767 422.604 238.919 422.604 239.107 cv
422.604 239.296 422.451 239.448 422.262 239.448 cv
cp
.94902 .317647 .231373 rgb
f
422.262 241.998 mo
416.815 241.998 li
416.627 241.998 416.474 241.846 416.474 241.657 cv
416.474 241.469 416.627 241.316 416.815 241.316 cv
422.262 241.316 li
422.451 241.316 422.604 241.469 422.604 241.657 cv
422.604 241.846 422.451 241.998 422.262 241.998 cv
cp
f
399.596 268.368 mo
349.153 268.368 li
349.153 248.333 li
349.153 244.348 352.384 241.117 356.369 241.117 cv
392.38 241.117 li
396.365 241.117 399.596 244.348 399.596 248.333 cv
399.596 268.368 li
cp
.807843 .682353 .639216 rgb
f
424.375 369.972 mo
351.808 369.972 li
347.897 369.972 344.727 366.802 344.727 362.891 cv
344.727 277.315 li
344.727 273.404 347.897 270.234 351.808 270.234 cv
424.375 270.234 li
428.286 270.234 431.456 273.404 431.456 277.315 cv
431.456 362.891 li
431.456 366.802 428.286 369.972 424.375 369.972 cv
.666667 .517647 .490196 rgb
f
417.315 369.972 mo
344.747 369.972 li
340.837 369.972 337.666 366.802 337.666 362.891 cv
337.666 277.315 li
337.666 273.404 340.837 270.234 344.747 270.234 cv
417.315 270.234 li
421.225 270.234 424.396 273.404 424.396 277.315 cv
424.396 362.891 li
424.396 366.802 421.225 369.972 417.315 369.972 cv
.698039 .568627 .52549 rgb
f
371.089 289.879 mo
347.846 289.879 li
346.124 289.879 344.727 288.482 344.727 286.76 cv
344.727 285.038 346.124 283.642 347.846 283.642 cv
371.089 283.642 li
372.812 283.642 374.208 285.038 374.208 286.76 cv
374.208 288.482 372.812 289.879 371.089 289.879 cv
cp
.6 .466667 .45098 rgb
f
412.958 289.879 mo
398.289 289.879 li
396.566 289.879 395.17 288.482 395.17 286.76 cv
395.17 285.038 396.566 283.642 398.289 283.642 cv
412.958 283.642 li
414.681 283.642 416.078 285.038 416.078 286.76 cv
416.078 288.482 414.681 289.879 412.958 289.879 cv
cp
f
429.478 278.642 mo
338.778 278.642 li
336.691 278.642 335 276.949 335 274.863 cv
335 267.688 li
335 265.602 336.691 263.91 338.778 263.91 cv
429.478 263.91 li
431.564 263.91 433.256 265.602 433.256 267.688 cv
433.256 274.863 li
433.256 276.949 431.564 278.642 429.478 278.642 cv
cp
.866667 .752941 .701961 rgb
f
402.201 235.82 mo
346.548 235.82 li
343.795 235.82 341.564 233.588 341.564 230.836 cv
341.564 184.267 li
341.564 181.514 343.795 179.283 346.548 179.283 cv
402.201 179.283 li
404.954 179.283 407.186 181.514 407.186 184.267 cv
407.186 230.836 li
407.186 233.588 404.954 235.82 402.201 235.82 cv
cp
.807843 .682353 .639216 rgb
f
397.974 231.525 mo
350.775 231.525 li
348.441 231.525 346.548 229.633 346.548 227.298 cv
346.548 187.804 li
346.548 185.47 348.441 183.577 350.775 183.577 cv
397.974 183.577 li
400.308 183.577 402.201 185.47 402.201 187.804 cv
402.201 227.298 li
402.201 229.633 400.308 231.525 397.974 231.525 cv
cp
.956863 .878431 .843137 rgb
f
359.729 195 mo
359.729 197.282 357.879 199.132 355.597 199.132 cv
353.314 199.132 351.465 197.282 351.465 195 cv
351.465 192.718 353.314 190.868 355.597 190.868 cv
357.879 190.868 359.729 192.718 359.729 195 cv
cp
.807843 .682353 .639216 rgb
f
359.729 207.552 mo
359.729 209.833 357.879 211.684 355.597 211.684 cv
353.314 211.684 351.465 209.833 351.465 207.552 cv
351.465 205.27 353.314 203.419 355.597 203.419 cv
357.879 203.419 359.729 205.27 359.729 207.552 cv
cp
f
359.729 220.124 mo
359.729 222.406 357.879 224.256 355.597 224.256 cv
353.314 224.256 351.465 222.406 351.465 220.124 cv
351.465 217.843 353.314 215.992 355.597 215.992 cv
357.879 215.992 359.729 217.843 359.729 220.124 cv
cp
f
390.723 195.341 mo
364.964 195.341 li
364.775 195.341 364.623 195.188 364.623 195 cv
364.623 194.812 364.775 194.659 364.964 194.659 cv
390.723 194.659 li
390.912 194.659 391.064 194.812 391.064 195 cv
391.064 195.188 390.912 195.341 390.723 195.341 cv
cp
.94902 .317647 .231373 rgb
f
390.723 207.893 mo
364.964 207.893 li
364.775 207.893 364.623 207.74 364.623 207.552 cv
364.623 207.363 364.775 207.211 364.964 207.211 cv
390.723 207.211 li
390.912 207.211 391.064 207.363 391.064 207.552 cv
391.064 207.74 390.912 207.893 390.723 207.893 cv
cp
f
390.723 220.465 mo
364.964 220.465 li
364.775 220.465 364.623 220.313 364.623 220.124 cv
364.623 219.936 364.775 219.783 364.964 219.783 cv
390.723 219.783 li
390.912 219.783 391.064 219.936 391.064 220.124 cv
391.064 220.313 390.912 220.465 390.723 220.465 cv
cp
f
385.983 249.375 mo
367.003 249.375 li
365.978 249.375 365.147 248.544 365.147 247.518 cv
365.147 246.492 365.978 245.661 367.003 245.661 cv
385.983 245.661 li
387.009 245.661 387.84 246.492 387.84 247.518 cv
387.84 248.544 387.009 249.375 385.983 249.375 cv
cp
.666667 .517647 .490196 rgb
f
371.747 249.729 mo
371.614 249.729 371.487 249.65 371.432 249.521 cv
371.359 249.347 371.44 249.146 371.614 249.073 cv
380.399 245.36 li
380.574 245.287 380.773 245.369 380.847 245.542 cv
380.92 245.716 380.839 245.916 380.665 245.989 cv
371.879 249.702 li
371.747 249.729 li
cp
1 1 1 rgb
f
308.979 373.018 mo
308.979 376.942 255.598 380.124 189.75 380.124 cv
123.902 380.124 70.522 376.942 70.522 373.018 cv
70.522 369.092 123.902 365.91 189.75 365.91 cv
255.598 365.91 308.979 369.092 308.979 373.018 cv
cp
.807843 .682353 .639216 rgb
f
891.711 268.891 mo
842.685 268.891 li
842.685 248.754 li
842.685 244.825 845.869 241.64 849.798 241.64 cv
884.597 241.64 li
888.526 241.64 891.711 244.825 891.711 248.754 cv
891.711 268.891 li
cp
.737255 .603922 .568627 rgb
f
894.174 236.343 mo
840.222 236.343 li
837.508 236.343 835.308 234.144 835.308 231.43 cv
835.308 184.72 li
835.308 182.006 837.508 179.806 840.222 179.806 cv
894.174 179.806 li
896.888 179.806 899.088 182.006 899.088 184.72 cv
899.088 231.43 li
899.088 234.144 896.888 236.343 894.174 236.343 cv
cp
f
871.169 246.264 mo
863.227 246.264 li
863.227 226.423 li
871.169 226.423 li
871.169 246.264 li
cp
f
910.273 265.704 mo
906.519 265.704 li
906.519 254.671 li
910.273 254.671 li
910.273 265.704 li
cp
.698039 .568627 .52549 rgb
f
916.002 257.738 mo
904.546 257.738 li
903.315 257.738 902.317 256.74 902.317 255.51 cv
902.317 234.622 li
902.317 233.391 903.315 232.394 904.546 232.394 cv
916.002 232.394 li
917.232 232.394 918.23 233.391 918.23 234.622 cv
918.23 255.51 li
918.23 256.74 917.232 257.738 916.002 257.738 cv
cp
f
865.548 246.264 mo
857.377 246.264 li
857.377 226.423 li
865.548 226.423 li
865.548 246.264 li
cp
.807843 .682353 .639216 rgb
f
913.495 257.738 mo
902.039 257.738 li
900.808 257.738 899.811 256.74 899.811 255.51 cv
899.811 234.622 li
899.811 233.391 900.808 232.394 902.039 232.394 cv
913.495 232.394 li
914.726 232.394 915.723 233.391 915.723 234.622 cv
915.723 255.51 li
915.723 256.74 914.726 257.738 913.495 257.738 cv
cp
.74902 .619608 .564706 rgb
f
912.526 252.834 mo
903.007 252.834 li
902.542 252.834 902.165 252.457 902.165 251.992 cv
902.165 237.132 li
902.165 236.667 902.542 236.29 903.007 236.29 cv
912.526 236.29 li
912.991 236.29 913.368 236.667 913.368 237.132 cv
913.368 251.992 li
913.368 252.457 912.991 252.834 912.526 252.834 cv
cp
.956863 .898039 .882353 rgb
f
909.35 239.972 mo
903.903 239.972 li
903.715 239.972 903.563 239.819 903.563 239.631 cv
903.563 239.442 903.715 239.29 903.903 239.29 cv
909.35 239.29 li
909.538 239.29 909.69 239.442 909.69 239.631 cv
909.69 239.819 909.538 239.972 909.35 239.972 cv
cp
.94902 .317647 .231373 rgb
f
909.35 242.521 mo
903.903 242.521 li
903.715 242.521 903.563 242.369 903.563 242.181 cv
903.563 241.992 903.715 241.84 903.903 241.84 cv
909.35 241.84 li
909.538 241.84 909.69 241.992 909.69 242.181 cv
909.69 242.369 909.538 242.521 909.35 242.521 cv
cp
f
886.684 268.891 mo
836.24 268.891 li
836.24 248.856 li
836.24 244.871 839.472 241.64 843.457 241.64 cv
879.468 241.64 li
883.453 241.64 886.684 244.871 886.684 248.856 cv
886.684 268.891 li
cp
.807843 .682353 .639216 rgb
f
911.463 370.495 mo
838.896 370.495 li
834.984 370.495 831.814 367.324 831.814 363.414 cv
831.814 277.839 li
831.814 273.928 834.984 270.758 838.896 270.758 cv
911.463 270.758 li
915.374 270.758 918.544 273.928 918.544 277.839 cv
918.544 363.414 li
918.544 367.324 915.374 370.495 911.463 370.495 cv
cp
.666667 .517647 .490196 rgb
f
904.402 370.495 mo
831.835 370.495 li
827.924 370.495 824.754 367.324 824.754 363.414 cv
824.754 277.839 li
824.754 273.928 827.924 270.758 831.835 270.758 cv
904.402 270.758 li
908.313 270.758 911.483 273.928 911.483 277.839 cv
911.483 363.414 li
911.483 367.324 908.313 370.495 904.402 370.495 cv
cp
.698039 .568627 .52549 rgb
f
858.177 290.402 mo
834.934 290.402 li
833.211 290.402 831.814 289.006 831.814 287.283 cv
831.814 285.561 833.211 284.164 834.934 284.164 cv
858.177 284.164 li
859.899 284.164 861.296 285.561 861.296 287.283 cv
861.296 289.006 859.899 290.402 858.177 290.402 cv
cp
.6 .466667 .45098 rgb
f
900.046 290.402 mo
885.376 290.402 li
883.653 290.402 882.258 289.006 882.258 287.283 cv
882.258 285.561 883.653 284.164 885.376 284.164 cv
900.046 284.164 li
901.769 284.164 903.165 285.561 903.165 287.283 cv
903.165 289.006 901.769 290.402 900.046 290.402 cv
cp
f
916.565 279.164 mo
825.865 279.164 li
823.779 279.164 822.088 277.473 822.088 275.387 cv
822.088 268.211 li
822.088 266.125 823.779 264.433 825.865 264.433 cv
916.565 264.433 li
918.652 264.433 920.344 266.125 920.344 268.211 cv
920.344 275.387 li
920.344 277.473 918.652 279.164 916.565 279.164 cv
cp
.866667 .752941 .701961 rgb
f
889.288 236.343 mo
833.636 236.343 li
830.883 236.343 828.651 234.111 828.651 231.358 cv
828.651 184.791 li
828.651 182.038 830.883 179.806 833.636 179.806 cv
889.288 179.806 li
892.041 179.806 894.272 182.038 894.272 184.791 cv
894.272 231.358 li
894.272 234.111 892.041 236.343 889.288 236.343 cv
cp
.807843 .682353 .639216 rgb
f
885.062 232.049 mo
837.863 232.049 li
835.528 232.049 833.636 230.156 833.636 227.821 cv
833.636 188.328 li
833.636 185.993 835.528 184.101 837.863 184.101 cv
885.062 184.101 li
887.396 184.101 889.288 185.993 889.288 188.328 cv
889.288 227.821 li
889.288 230.156 887.396 232.049 885.062 232.049 cv
cp
.956863 .878431 .843137 rgb
f
846.816 195.523 mo
846.816 197.805 844.966 199.655 842.685 199.655 cv
840.402 199.655 838.552 197.805 838.552 195.523 cv
838.552 193.241 840.402 191.391 842.685 191.391 cv
844.966 191.391 846.816 193.241 846.816 195.523 cv
cp
.807843 .682353 .639216 rgb
f
846.816 208.074 mo
846.816 210.356 844.966 212.207 842.685 212.207 cv
840.402 212.207 838.552 210.356 838.552 208.074 cv
838.552 205.793 840.402 203.942 842.685 203.942 cv
844.966 203.942 846.816 205.793 846.816 208.074 cv
cp
f
846.816 220.647 mo
846.816 222.93 844.966 224.779 842.685 224.779 cv
840.402 224.779 838.552 222.93 838.552 220.647 cv
838.552 218.365 840.402 216.516 842.685 216.516 cv
844.966 216.516 846.816 218.365 846.816 220.647 cv
cp
f
877.811 195.865 mo
852.051 195.865 li
851.862 195.865 851.71 195.712 851.71 195.523 cv
851.71 195.335 851.862 195.182 852.051 195.182 cv
877.811 195.182 li
877.999 195.182 878.151 195.335 878.151 195.523 cv
878.151 195.712 877.999 195.865 877.811 195.865 cv
cp
.94902 .317647 .231373 rgb
f
877.811 208.415 mo
852.051 208.415 li
851.862 208.415 851.71 208.263 851.71 208.074 cv
851.71 207.886 851.862 207.733 852.051 207.733 cv
877.811 207.733 li
877.999 207.733 878.151 207.886 878.151 208.074 cv
878.151 208.263 877.999 208.415 877.811 208.415 cv
cp
f
877.811 220.988 mo
852.051 220.988 li
851.862 220.988 851.71 220.836 851.71 220.647 cv
851.71 220.459 851.862 220.307 852.051 220.307 cv
877.811 220.307 li
877.999 220.307 878.151 220.459 878.151 220.647 cv
878.151 220.836 877.999 220.988 877.811 220.988 cv
cp
f
872.717 251.041 mo
853.737 251.041 li
852.712 251.041 851.88 250.21 851.88 249.185 cv
851.88 248.159 852.712 247.328 853.737 247.328 cv
872.717 247.328 li
873.742 247.328 874.573 248.159 874.573 249.185 cv
874.573 250.21 873.742 251.041 872.717 251.041 cv
cp
.666667 .517647 .490196 rgb
f
859.069 251.383 mo
858.937 251.383 858.81 251.304 858.755 251.174 cv
858.682 251 858.763 250.8 858.937 250.727 cv
867.722 247.014 li
867.891 246.939 868.096 247.021 868.169 247.195 cv
868.242 247.369 868.161 247.569 867.987 247.643 cv
859.202 251.355 li
859.069 251.383 li
cp
1 1 1 rgb
f
723.378 268.891 mo
674.351 268.891 li
674.351 248.754 li
674.351 244.825 677.536 241.64 681.465 241.64 cv
716.264 241.64 li
720.192 241.64 723.378 244.825 723.378 248.754 cv
723.378 268.891 li
cp
.737255 .603922 .568627 rgb
f
725.84 236.343 mo
671.889 236.343 li
669.175 236.343 666.975 234.144 666.975 231.43 cv
666.975 184.72 li
666.975 182.006 669.175 179.806 671.889 179.806 cv
725.84 179.806 li
728.554 179.806 730.754 182.006 730.754 184.72 cv
730.754 231.43 li
730.754 234.144 728.554 236.343 725.84 236.343 cv
cp
f
702.835 246.264 mo
694.894 246.264 li
694.894 226.423 li
702.835 226.423 li
702.835 246.264 li
cp
f
741.94 265.704 mo
738.185 265.704 li
738.185 254.671 li
741.94 254.671 li
741.94 265.704 li
cp
.698039 .568627 .52549 rgb
f
747.669 257.738 mo
736.213 257.738 li
734.981 257.738 733.984 256.74 733.984 255.51 cv
733.984 234.622 li
733.984 233.391 734.981 232.394 736.213 232.394 cv
747.669 232.394 li
748.899 232.394 749.896 233.391 749.896 234.622 cv
749.896 255.51 li
749.896 256.74 748.899 257.738 747.669 257.738 cv
cp
f
697.214 246.264 mo
689.043 246.264 li
689.043 226.423 li
697.214 226.423 li
697.214 246.264 li
cp
.807843 .682353 .639216 rgb
f
745.161 257.738 mo
733.705 257.738 li
732.475 257.738 731.478 256.74 731.478 255.51 cv
731.478 234.622 li
731.478 233.391 732.475 232.394 733.705 232.394 cv
745.161 232.394 li
746.392 232.394 747.39 233.391 747.39 234.622 cv
747.39 255.51 li
747.39 256.74 746.392 257.738 745.161 257.738 cv
cp
.74902 .619608 .564706 rgb
f
744.193 252.834 mo
734.674 252.834 li
734.208 252.834 733.832 252.457 733.832 251.992 cv
733.832 237.132 li
733.832 236.667 734.208 236.29 734.674 236.29 cv
744.193 236.29 li
744.658 236.29 745.035 236.667 745.035 237.132 cv
745.035 251.992 li
745.035 252.457 744.658 252.834 744.193 252.834 cv
cp
.956863 .898039 .882353 rgb
f
741.017 239.972 mo
735.569 239.972 li
735.381 239.972 735.229 239.819 735.229 239.631 cv
735.229 239.442 735.381 239.29 735.569 239.29 cv
741.017 239.29 li
741.205 239.29 741.357 239.442 741.357 239.631 cv
741.357 239.819 741.205 239.972 741.017 239.972 cv
cp
.94902 .317647 .231373 rgb
f
741.017 242.521 mo
735.569 242.521 li
735.381 242.521 735.229 242.369 735.229 242.181 cv
735.229 241.992 735.381 241.84 735.569 241.84 cv
741.017 241.84 li
741.205 241.84 741.357 241.992 741.357 242.181 cv
741.357 242.369 741.205 242.521 741.017 242.521 cv
cp
f
718.351 268.891 mo
667.907 268.891 li
667.907 248.856 li
667.907 244.871 671.138 241.64 675.123 241.64 cv
711.134 241.64 li
715.119 241.64 718.351 244.871 718.351 248.856 cv
718.351 268.891 li
cp
.898039 .784314 .741176 rgb
f
743.13 370.495 mo
670.562 370.495 li
666.651 370.495 663.481 367.324 663.481 363.414 cv
663.481 277.839 li
663.481 273.928 666.651 270.758 670.562 270.758 cv
743.13 270.758 li
747.04 270.758 750.21 273.928 750.21 277.839 cv
750.21 363.414 li
750.21 367.324 747.04 370.495 743.13 370.495 cv
cp
.666667 .517647 .490196 rgb
f
736.069 370.495 mo
663.501 370.495 li
659.591 370.495 656.421 367.324 656.421 363.414 cv
656.421 277.839 li
656.421 273.928 659.591 270.758 663.501 270.758 cv
736.069 270.758 li
739.979 270.758 743.149 273.928 743.149 277.839 cv
743.149 363.414 li
743.149 367.324 739.979 370.495 736.069 370.495 cv
cp
.698039 .568627 .52549 rgb
f
689.844 290.402 mo
666.601 290.402 li
664.878 290.402 663.481 289.006 663.481 287.283 cv
663.481 285.561 664.878 284.164 666.601 284.164 cv
689.844 284.164 li
691.566 284.164 692.963 285.561 692.963 287.283 cv
692.963 289.006 691.566 290.402 689.844 290.402 cv
cp
.6 .466667 .45098 rgb
f
731.713 290.402 mo
717.043 290.402 li
715.32 290.402 713.924 289.006 713.924 287.283 cv
713.924 285.561 715.32 284.164 717.043 284.164 cv
731.713 284.164 li
733.436 284.164 734.832 285.561 734.832 287.283 cv
734.832 289.006 733.436 290.402 731.713 290.402 cv
cp
f
748.232 279.164 mo
657.532 279.164 li
655.445 279.164 653.754 277.473 653.754 275.387 cv
653.754 268.211 li
653.754 266.125 655.445 264.433 657.532 264.433 cv
748.232 264.433 li
750.318 264.433 752.011 266.125 752.011 268.211 cv
752.011 275.387 li
752.011 277.473 750.318 279.164 748.232 279.164 cv
cp
.866667 .752941 .701961 rgb
f
720.955 236.343 mo
665.303 236.343 li
662.55 236.343 660.318 234.111 660.318 231.358 cv
660.318 184.791 li
660.318 182.038 662.55 179.806 665.303 179.806 cv
720.955 179.806 li
723.708 179.806 725.939 182.038 725.939 184.791 cv
725.939 231.358 li
725.939 234.111 723.708 236.343 720.955 236.343 cv
cp
.898039 .784314 .741176 rgb
f
716.728 232.049 mo
669.529 232.049 li
667.195 232.049 665.303 230.156 665.303 227.821 cv
665.303 188.328 li
665.303 185.993 667.195 184.101 669.529 184.101 cv
716.728 184.101 li
719.063 184.101 720.955 185.993 720.955 188.328 cv
720.955 227.821 li
720.955 230.156 719.063 232.049 716.728 232.049 cv
cp
.956863 .878431 .843137 rgb
f
678.482 195.523 mo
678.482 197.805 676.633 199.655 674.351 199.655 cv
672.068 199.655 670.219 197.805 670.219 195.523 cv
670.219 193.241 672.068 191.391 674.351 191.391 cv
676.633 191.391 678.482 193.241 678.482 195.523 cv
cp
.807843 .682353 .639216 rgb
f
678.482 208.074 mo
678.482 210.356 676.633 212.207 674.351 212.207 cv
672.068 212.207 670.219 210.356 670.219 208.074 cv
670.219 205.793 672.068 203.942 674.351 203.942 cv
676.633 203.942 678.482 205.793 678.482 208.074 cv
cp
f
678.482 220.647 mo
678.482 222.93 676.633 224.779 674.351 224.779 cv
672.068 224.779 670.219 222.93 670.219 220.647 cv
670.219 218.365 672.068 216.516 674.351 216.516 cv
676.633 216.516 678.482 218.365 678.482 220.647 cv
cp
f
709.478 195.865 mo
683.718 195.865 li
683.529 195.865 683.377 195.712 683.377 195.523 cv
683.377 195.335 683.529 195.182 683.718 195.182 cv
709.478 195.182 li
709.666 195.182 709.818 195.335 709.818 195.523 cv
709.818 195.712 709.666 195.865 709.478 195.865 cv
cp
.94902 .317647 .231373 rgb
f
709.478 208.415 mo
683.718 208.415 li
683.529 208.415 683.377 208.263 683.377 208.074 cv
683.377 207.886 683.529 207.733 683.718 207.733 cv
709.478 207.733 li
709.666 207.733 709.818 207.886 709.818 208.074 cv
709.818 208.263 709.666 208.415 709.478 208.415 cv
cp
f
709.478 220.988 mo
683.718 220.988 li
683.529 220.988 683.377 220.836 683.377 220.647 cv
683.377 220.459 683.529 220.307 683.718 220.307 cv
709.478 220.307 li
709.666 220.307 709.818 220.459 709.818 220.647 cv
709.818 220.836 709.666 220.988 709.478 220.988 cv
cp
f
704.384 251.041 mo
685.403 251.041 li
684.378 251.041 683.547 250.21 683.547 249.185 cv
683.547 248.159 684.378 247.328 685.403 247.328 cv
704.384 247.328 li
705.409 247.328 706.24 248.159 706.24 249.185 cv
706.24 250.21 705.409 251.041 704.384 251.041 cv
cp
.666667 .517647 .490196 rgb
f
691 251.383 mo
690.867 251.383 690.74 251.304 690.686 251.174 cv
690.612 251 690.693 250.8 690.867 250.727 cv
699.652 247.014 li
699.822 246.939 700.026 247.021 700.1 247.195 cv
700.173 247.369 700.092 247.569 699.918 247.643 cv
691.133 251.355 li
691 251.383 li
cp
1 1 1 rgb
f
342.081 63 mo
337.187 63 li
337.187 0 li
342.081 0 li
342.081 63 li
cp
.807843 .682353 .639216 rgb
f
339.634 35.0776 mo
351.29 55.2666 li
362.946 75.4556 li
339.634 75.4556 li
316.322 75.4556 li
327.978 55.2666 li
339.634 35.0776 li
cp
f
362.946 75.4556 mo
362.946 76.3423 352.509 77.061 339.634 77.061 cv
326.759 77.061 316.322 76.3423 316.322 75.4556 cv
316.322 74.5693 326.759 73.8501 339.634 73.8501 cv
352.509 73.8501 362.946 74.5693 362.946 75.4556 cv
cp
1 1 1 rgb
f
692.854 63 mo
687.959 63 li
687.959 0 li
692.854 0 li
692.854 63 li
cp
.807843 .682353 .639216 rgb
f
690.406 35.0776 mo
702.063 55.2666 li
713.719 75.4556 li
690.406 75.4556 li
667.094 75.4556 li
678.75 55.2666 li
690.406 35.0776 li
cp
f
713.719 75.4556 mo
713.719 76.3423 703.281 77.061 690.406 77.061 cv
677.531 77.061 667.094 76.3423 667.094 75.4556 cv
667.094 74.5693 677.531 73.8501 690.406 73.8501 cv
703.281 73.8501 713.719 74.5693 713.719 75.4556 cv
cp
1 1 1 rgb
f
381.039 336.172 mo
357.981 336.889 li
357.231 336.912 356.604 336.323 356.58 335.572 cv
356.272 325.673 li
356.249 324.923 356.838 324.295 357.589 324.272 cv
380.647 323.556 li
381.398 323.532 382.024 324.121 382.048 324.872 cv
382.355 334.772 li
382.379 335.522 381.789 336.148 381.039 336.172 cv
.313726 .470588 .286275 rgb
f
355.897 331.417 mo
355.897 334.439 353.448 336.888 350.426 336.888 cv
347.405 336.888 344.955 334.439 344.955 331.417 cv
344.955 328.395 347.405 325.945 350.426 325.945 cv
353.448 325.945 355.897 328.395 355.897 331.417 cv
.866667 .262745 .2 rgb
f
347.543 331.417 mo
347.543 334.439 345.094 336.888 342.072 336.888 cv
339.051 336.888 336.601 334.439 336.601 331.417 cv
336.601 328.395 339.051 325.945 342.072 325.945 cv
345.094 325.945 347.543 328.395 347.543 331.417 cv
.94902 .317647 .231373 rgb
f
351.984 322.534 mo
351.984 325.556 349.535 328.005 346.514 328.005 cv
343.492 328.005 341.043 325.556 341.043 322.534 cv
341.043 319.513 343.492 317.062 346.514 317.062 cv
349.535 317.062 351.984 319.513 351.984 322.534 cv
f
337.666 324.485 mo
333.825 324.485 li
334.723 321.736 336.237 319.032 337.666 316.848 cv
337.666 324.485 li
337.666 305.907 mo
336.558 303.563 335.981 301.383 337.496 301.131 cv
337.553 301.121 337.61 301.114 337.666 301.11 cv
337.666 305.907 li
.980392 .760784 .533333 rgb
f
337.666 336.321 mo
335.791 335.521 334.264 334.143 333.468 331.848 cv
332.69 329.607 332.994 327.027 333.825 324.485 cv
337.666 324.485 li
337.666 328.172 li
336.997 329.08 336.601 330.202 336.601 331.417 cv
336.601 332.631 336.997 333.753 337.666 334.661 cv
337.666 336.321 li
.945098 .713725 .490196 rgb
f
343.687 337.322 mo
341.585 337.322 339.465 337.088 337.666 336.321 cv
337.666 334.661 li
338.663 336.012 340.265 336.888 342.072 336.888 cv
343.747 336.888 345.246 336.135 346.249 334.95 cv
347.177 336.046 348.527 336.771 350.049 336.875 cv
348.238 337.045 345.973 337.322 343.687 337.322 cv
351.62 336.757 mo
354.067 336.212 355.897 334.029 355.897 331.417 cv
355.897 328.515 353.638 326.14 350.782 325.957 cv
351.534 325.02 351.984 323.829 351.984 322.534 cv
351.984 319.513 349.535 317.062 346.514 317.062 cv
343.492 317.062 341.043 319.513 341.043 322.534 cv
341.043 323.825 341.49 325.012 342.238 325.948 cv
342.183 325.946 342.128 325.945 342.072 325.945 cv
340.265 325.945 338.663 326.822 337.666 328.172 cv
337.666 324.485 li
337.666 316.848 li
339.539 313.987 341.265 312.019 341.265 312.019 cv
341.265 312.019 339.051 308.835 337.666 305.907 cv
337.666 301.11 li
337.726 301.105 337.784 301.102 337.843 301.102 cv
341.089 301.102 343.68 308.578 343.68 308.578 cv
343.68 308.578 344.735 301.029 346.07 301.029 cv
346.157 301.029 346.246 301.062 346.335 301.131 cv
347.793 302.255 346.335 308.152 346.335 308.152 cv
346.335 308.152 349.448 303.964 351.446 303.964 cv
351.86 303.964 352.227 304.145 352.508 304.581 cv
354.14 307.119 350.332 311.983 350.332 311.983 cv
349.816 312.365 li
351.306 313.703 356.729 318.794 359.34 324.218 cv
357.589 324.272 li
356.838 324.295 356.249 324.923 356.272 325.673 cv
356.58 335.572 li
356.584 335.691 356.603 335.805 356.634 335.913 cv
355.343 336.446 353.777 336.712 351.964 336.746 cv
351.853 336.748 351.738 336.752 351.62 336.757 cv
.898039 .662745 .435294 rgb
f
356.634 335.913 mo
356.603 335.805 356.584 335.691 356.58 335.572 cv
356.272 325.673 li
356.249 324.923 356.838 324.295 357.589 324.272 cv
359.34 324.218 li
360.551 326.734 361.157 329.321 360.486 331.639 cv
359.881 333.729 358.566 335.118 356.634 335.913 cv
.780392 .631373 .360784 rgb
f
350.049 336.875 mo
348.527 336.771 347.177 336.046 346.249 334.95 cv
347.056 333.997 347.543 332.764 347.543 331.417 cv
347.543 330.125 347.096 328.938 346.347 328.002 cv
346.402 328.004 346.458 328.005 346.514 328.005 cv
348.24 328.005 349.779 327.205 350.782 325.957 cv
353.638 326.14 355.897 328.515 355.897 331.417 cv
355.897 334.029 354.067 336.212 351.62 336.757 cv
351.151 336.777 350.623 336.821 350.049 336.875 cv
.94902 .568627 .337255 rgb
f
342.072 336.888 mo
340.265 336.888 338.663 336.012 337.666 334.661 cv
336.997 333.753 336.601 332.631 336.601 331.417 cv
336.601 330.202 336.997 329.08 337.666 328.172 cv
338.663 326.822 340.265 325.945 342.072 325.945 cv
342.128 325.945 342.183 325.946 342.238 325.948 cv
343.208 327.161 344.685 327.953 346.347 328.002 cv
347.096 328.938 347.543 330.125 347.543 331.417 cv
347.543 332.764 347.056 333.997 346.249 334.95 cv
345.246 336.135 343.747 336.888 342.072 336.888 cv
.976471 .584314 .345098 rgb
f
346.514 328.005 mo
346.458 328.005 346.402 328.004 346.347 328.002 cv
344.685 327.953 343.208 327.161 342.238 325.948 cv
341.49 325.012 341.043 323.825 341.043 322.534 cv
341.043 319.513 343.492 317.062 346.514 317.062 cv
349.535 317.062 351.984 319.513 351.984 322.534 cv
351.984 323.829 351.534 325.02 350.782 325.957 cv
349.779 327.205 348.24 328.005 346.514 328.005 cv
f
399.289 239.883 mo
399.289 239.883 413.747 251.957 426.707 246.383 cv
440.246 240.56 437.963 228.977 437.963 228.977 cv
424.544 225.199 li
424.544 225.199 422.054 228.623 419.05 230.271 cv
414.903 232.546 400.074 231.631 400.074 231.631 cv
399.289 239.883 li
cp
.976471 .521569 .458824 rgb
f
442.485 206.021 mo
442.485 206.021 437.281 209.069 433.727 211.562 cv
431.542 213.093 420.679 224.899 420.679 224.899 cv
430.861 241.777 li
435.483 237.951 li
442.485 206.021 li
cp
.968627 .772549 .215686 rgb
f
459.69 181.853 mo
459.69 181.853 469.621 179.188 473.216 185.913 cv
476.812 192.639 473.709 219.93 473.709 219.93 cv
458.462 209.904 li
458.783 196.375 li
459.69 181.853 li
cp
0 0 0 rgb
f
474.293 313.345 mo
489.585 314.464 li
485.334 329.022 li
472.938 331.095 li
474.293 313.345 li
cp
.976471 .521569 .458824 rgb
f
430.476 247.138 mo
430.476 247.138 409.651 314.002 425.257 326.95 cv
440.862 339.897 475.407 334.54 475.407 334.54 cv
477.569 307.801 li
458.682 305.727 li
438.936 249.386 li
430.476 247.138 li
cp
.678431 .301961 .25098 rgb
f
462.571 353.292 mo
460.374 368.467 li
446.152 363.198 li
444.961 350.686 li
462.571 353.292 li
cp
.976471 .521569 .458824 rgb
f
462.146 253.127 mo
462.146 253.127 465.742 264.958 465.124 274.476 cv
464.505 283.992 463.495 305.565 463.696 309.372 cv
463.899 313.179 465.195 355.267 465.195 355.267 cv
465.195 355.267 458.278 357.381 450.777 357.381 cv
443.275 357.381 439.084 356.535 439.084 356.535 cv
439.084 356.535 431.761 309.583 432.463 295.625 cv
433.166 281.666 432.858 250.746 432.858 250.746 cv
462.146 253.127 li
cp
.717647 .333333 .258824 rgb
f
441.542 362.45 mo
441.542 362.45 442.575 357.264 445.257 357.017 cv
447.94 356.77 451.785 362.45 451.785 362.45 cv
451.785 362.45 462.266 361.71 463.007 362.45 cv
463.748 363.191 463.748 379.493 463.007 379.74 cv
462.266 379.987 418.794 379.987 416.818 379.74 cv
414.842 379.493 417.669 371.096 421.566 369.613 cv
425.463 368.132 429.66 368.127 429.66 368.127 cv
441.542 362.45 li
cp
.313726 .470588 .286275 rgb
f
480.609 333.487 mo
480.609 333.487 475.567 332.231 475.45 329.588 cv
475.333 326.943 481.087 323.437 481.087 323.437 cv
481.087 323.437 480.85 313.117 481.611 312.425 cv
482.373 311.732 498.369 312.493 498.577 313.232 cv
498.785 313.971 496.754 356.628 496.42 358.555 cv
496.085 360.482 487.977 357.316 486.704 353.423 cv
485.432 349.53 485.624 345.412 485.624 345.412 cv
480.609 333.487 li
cp
f
428.952 252.343 mo
428.952 252.343 431.534 213.229 441.003 206.917 cv
452.467 199.276 463.563 206.917 463.563 206.917 cv
459.661 253.127 li
459.661 253.127 442.487 258.422 428.952 252.343 cv
cp
.968627 .772549 .215686 rgb
f
457.073 197.391 mo
456.892 204.62 li
456.892 204.62 455.536 206.666 451.298 206.903 cv
448.141 207.081 447.184 205.438 447.184 205.438 cv
448.105 199.13 li
455.785 197.642 li
457.073 197.391 li
cp
.976471 .521569 .458824 rgb
f
455.785 197.642 mo
455.762 197.839 455.681 198.07 455.557 198.334 cv
453.849 201.905 449.407 202.572 447.583 202.69 cv
448.105 199.13 li
455.785 197.642 li
cp
0 0 0 rgb
f
446.907 182.61 mo
446.907 182.61 442.885 191.58 444.254 196.653 cv
445.624 201.728 450.242 200.975 453.01 200.023 cv
455.778 199.071 457.074 197.392 457.074 197.392 cv
457.074 197.392 459.643 198.291 461.389 195.911 cv
463.135 193.531 462.101 190.77 460.635 190.125 cv
459.17 189.48 457.41 190.525 457.41 190.525 cv
458.807 187.921 li
458.807 187.921 453.165 174.563 446.907 182.61 cv
cp
.976471 .521569 .458824 rgb
f
440.009 251.118 mo
440.009 251.118 451.437 249.096 454.539 245.43 cv
457.641 241.764 458.682 235.278 458.682 235.278 cv
475.407 239.508 li
475.407 239.508 476.32 250.221 467.648 255.718 cv
460.498 260.25 441.305 260.829 441.305 260.829 cv
440.009 251.118 li
cp
f
463.563 206.917 mo
463.563 206.917 473.433 211.515 476.112 221.705 cv
478.791 231.895 476.958 240.777 476.958 240.777 cv
455.785 239.914 li
459.661 220.193 li
460.183 217.301 460.995 214.467 462.084 211.736 cv
463.563 206.917 li
cp
.968627 .772549 .215686 rgb
f
452.276 187.445 mo
452.165 187.445 452.057 187.387 451.999 187.284 cv
451.771 186.878 451.48 186.628 451.135 186.541 cv
450.547 186.391 449.955 186.747 449.949 186.751 cv
449.802 186.846 449.605 186.799 449.512 186.651 cv
449.419 186.502 449.464 186.307 449.612 186.214 cv
449.645 186.192 450.432 185.707 451.292 185.925 cv
451.811 186.057 452.235 186.41 452.552 186.972 cv
452.638 187.125 452.583 187.318 452.431 187.404 cv
452.276 187.445 li
cp
0 0 0 rgb
f
445.629 186.592 mo
445.498 186.563 li
445.338 186.491 445.268 186.303 445.341 186.144 cv
445.46 185.881 445.66 185.704 445.918 185.632 cv
446.54 185.461 447.28 185.957 447.363 186.013 cv
447.507 186.112 447.544 186.31 447.445 186.454 cv
447.347 186.599 447.149 186.637 447.004 186.537 cv
446.817 186.409 446.346 186.17 446.088 186.244 cv
446.037 186.258 445.971 186.29 445.918 186.406 cv
445.865 186.523 445.75 186.592 445.629 186.592 cv
cp
f
451.98 189.352 mo
451.875 189.352 451.772 189.3 451.711 189.205 cv
451.595 189.021 451.457 188.919 451.288 188.893 cv
450.909 188.835 450.432 189.15 450.281 189.277 cv
450.146 189.389 449.946 189.373 449.834 189.239 cv
449.721 189.105 449.738 188.906 449.871 188.792 cv
449.949 188.727 450.648 188.154 451.382 188.265 cv
451.733 188.319 452.033 188.526 452.248 188.865 cv
452.341 189.013 452.297 189.209 452.149 189.303 cv
451.98 189.352 li
cp
f
446.833 189.119 mo
446.717 189.119 446.605 189.054 446.55 188.943 cv
446.507 188.861 446.123 188.152 445.375 188.469 cv
445.213 188.534 445.028 188.461 444.959 188.3 cv
444.892 188.139 444.967 187.953 445.128 187.884 cv
446.178 187.443 446.889 188.198 447.118 188.661 cv
447.195 188.817 447.131 189.008 446.974 189.085 cv
446.833 189.119 li
cp
f
447.183 193.517 mo
447.021 193.517 446.882 193.393 446.868 193.229 cv
446.702 191.396 447.72 189.276 447.763 189.187 cv
447.839 189.028 448.029 188.961 448.187 189.04 cv
448.344 189.116 448.41 189.306 448.334 189.464 cv
448.324 189.484 447.35 191.516 447.5 193.171 cv
447.515 193.346 447.387 193.5 447.212 193.516 cv
447.183 193.517 li
cp
f
449.388 196.128 mo
449.243 196.128 449.112 196.029 449.079 195.882 cv
449.04 195.711 449.146 195.541 449.317 195.502 cv
449.333 195.498 450.934 195.117 451.389 193.977 cv
451.454 193.814 451.64 193.737 451.801 193.799 cv
451.964 193.864 452.043 194.049 451.979 194.212 cv
451.399 195.665 449.537 196.103 449.458 196.121 cv
449.388 196.128 li
cp
f
457.685 194.412 mo
457.593 194.412 457.501 194.372 457.438 194.294 cv
457.328 194.159 457.348 193.959 457.484 193.848 cv
460.397 191.476 li
460.531 191.366 460.731 191.384 460.843 191.522 cv
460.954 191.658 460.934 191.857 460.797 191.968 cv
457.885 194.34 li
457.685 194.412 li
cp
f
460.597 194.412 mo
460.457 194.379 li
458.643 193.484 li
458.485 193.407 458.421 193.217 458.498 193.06 cv
458.575 192.902 458.765 192.837 458.923 192.915 cv
460.737 193.81 li
460.895 193.887 460.959 194.077 460.882 194.234 cv
460.827 194.347 460.714 194.412 460.597 194.412 cv
cp
f
457.41 190.525 mo
457.41 190.525 454.249 190.182 452.275 187.563 cv
450.301 184.944 449.388 182.275 449.388 182.275 cv
449.388 182.275 448.048 182.487 447.184 183.544 cv
446.547 184.322 445.798 185.454 445.798 185.454 cv
445.798 185.454 445.757 181.806 447.607 180.032 cv
449.458 178.257 451.028 178.892 451.028 178.892 cv
451.028 178.892 455.076 176.636 459.141 180.302 cv
463.206 183.967 461.227 190.525 461.227 190.525 cv
461.227 190.525 459.159 189.682 457.41 190.525 cv
cp
f
451.027 207.224 mo
447.078 207.224 446.26 205.177 446.226 205.088 cv
446.164 204.924 446.247 204.74 446.411 204.679 cv
446.571 204.617 446.755 204.698 446.819 204.86 cv
446.848 204.934 447.578 206.658 451.291 206.586 cv
455.078 206.497 456.621 204.454 456.636 204.434 cv
456.739 204.293 456.938 204.262 457.079 204.364 cv
457.22 204.467 457.251 204.664 457.149 204.806 cv
457.081 204.9 455.427 207.123 451.305 207.221 cv
451.211 207.223 451.118 207.224 451.027 207.224 cv
cp
1 1 1 rgb
f
457.624 268.439 mo
452.591 268.439 450.276 263.736 450.25 263.68 cv
450.174 263.521 450.241 263.333 450.399 263.257 cv
450.557 263.179 450.747 263.248 450.822 263.406 cv
450.942 263.658 453.86 269.559 460.495 267.296 cv
460.661 267.242 460.841 267.329 460.897 267.494 cv
460.954 267.66 460.865 267.841 460.699 267.897 cv
459.58 268.278 458.555 268.439 457.624 268.439 cv
cp
1 .698039 .333333 rgb
f
455.784 240.231 mo
455.627 240.231 455.491 240.114 455.47 239.954 cv
455.46 239.875 454.458 231.973 454.997 226.058 cv
455.013 225.883 455.17 225.768 455.342 225.77 cv
455.516 225.786 455.645 225.94 455.629 226.115 cv
455.096 231.96 456.089 239.795 456.099 239.874 cv
456.122 240.047 455.999 240.206 455.825 240.229 cv
455.784 240.231 li
cp
1 1 1 rgb
f
452.042 226.096 mo
451.969 226.224 li
451.384 227.438 453.1 230.009 454.441 231.68 cv
453.521 228.649 452.496 226.229 452.042 226.096 cv
cp
455.153 233.317 mo
454.92 233.215 li
454.448 232.703 450.336 228.15 451.398 225.948 cv
451.607 225.513 451.89 225.438 452.09 225.461 cv
453.312 225.572 454.853 230.712 455.459 232.916 cv
455.498 233.057 455.435 233.206 455.307 233.277 cv
455.153 233.317 li
cp
f
430.351 236.844 mo
430.172 236.842 430.032 236.698 430.033 236.523 cv
430.04 235.886 430.254 220.852 435.326 214.745 cv
435.438 214.61 435.639 214.593 435.773 214.704 cv
435.908 214.816 435.926 215.017 435.814 215.151 cv
430.887 221.084 430.669 236.376 430.668 236.529 cv
430.666 236.704 430.524 236.844 430.351 236.844 cv
cp
f
390.01 245.883 mo
390.01 245.883 400.562 242.645 402.181 238.7 cv
403.799 234.755 396.091 230.659 396.091 230.659 cv
388.542 233.903 li
390.01 245.883 li
cp
.976471 .521569 .458824 rgb
f
397.941 242.473 mo
385.39 253.945 li
384.858 254.431 384.034 254.394 383.549 253.863 cv
366.635 235.357 li
366.149 234.826 366.187 234.003 366.717 233.518 cv
379.27 222.044 li
379.8 221.559 380.625 221.596 381.11 222.127 cv
398.024 240.632 li
398.51 241.163 398.473 241.987 397.941 242.473 cv
cp
.968627 .631373 .321569 rgb
f
399.966 240.622 mo
387.414 252.095 li
386.883 252.581 386.059 252.544 385.574 252.013 cv
368.659 233.507 li
368.174 232.977 368.211 232.152 368.742 231.667 cv
381.294 220.194 li
381.825 219.709 382.649 219.745 383.134 220.276 cv
400.049 238.782 li
400.534 239.313 400.497 240.137 399.966 240.622 cv
cp
.976471 .678431 .384314 rgb
f
399.278 229.475 mo
399.278 229.475 395.199 226.625 392.473 225.739 cv
389.746 224.853 385.474 228.284 385.856 229.932 cv
386.239 231.58 391.502 229.795 391.502 229.795 cv
391.502 229.795 395.417 237.052 400.749 235.814 cv
406.081 234.577 399.278 229.475 399.278 229.475 cv
cp
.976471 .521569 .458824 rgb
f
399.445 236.276 mo
395.237 236.276 392.359 231.69 392.325 231.636 cv
392.233 231.486 392.28 231.292 392.429 231.199 cv
392.581 231.109 392.774 231.154 392.865 231.304 cv
392.902 231.363 396.632 237.297 401.614 235.184 cv
401.775 235.113 401.961 235.189 402.03 235.352 cv
402.099 235.513 402.023 235.699 401.862 235.768 cv
401.019 236.125 400.21 236.276 399.445 236.276 cv
cp
0 0 0 rgb
f
447.167 365.693 mo
447.062 365.693 446.959 365.641 446.898 365.546 cv
446.805 365.397 446.849 365.202 446.997 365.108 cv
451.615 362.183 li
451.764 362.087 451.959 362.134 452.053 362.28 cv
452.146 362.429 452.103 362.624 451.955 362.718 cv
447.336 365.644 li
447.167 365.693 li
cp
.937255 .701961 .113725 rgb
f
483.491 327.811 mo
483.383 327.811 483.277 327.755 483.218 327.655 cv
480.814 323.599 li
480.725 323.447 480.774 323.253 480.925 323.164 cv
481.078 323.075 481.272 323.125 481.36 323.274 cv
483.764 327.331 li
483.853 327.482 483.803 327.677 483.652 327.766 cv
483.491 327.811 li
cp
f
375.102 233.357 mo
374.867 233.254 li
374.749 233.124 374.758 232.924 374.888 232.806 cv
382.645 225.732 li
382.775 225.613 382.976 225.624 383.093 225.753 cv
383.211 225.883 383.202 226.083 383.073 226.201 cv
375.315 233.274 li
375.102 233.357 li
cp
.94902 .317647 .231373 rgb
f
401.953 284.423 mo
401.778 284.423 401.636 284.28 401.636 284.105 cv
401.636 276.833 li
401.636 275.803 413.777 263.094 418.997 257.678 cv
419.119 257.551 419.319 257.547 419.445 257.669 cv
419.571 257.791 419.575 257.991 419.454 258.117 cv
412.717 265.107 402.581 275.871 402.265 276.878 cv
402.271 284.105 li
402.271 284.28 402.128 284.423 401.953 284.423 cv
cp
1 1 1 rgb
f
437.087 263.609 mo
413.743 263.609 li
413.059 263.609 412.504 263.055 412.504 262.37 cv
412.504 257.737 li
412.504 257.053 413.059 256.498 413.743 256.498 cv
437.087 256.498 li
437.772 256.498 438.326 257.053 438.326 257.737 cv
438.326 262.37 li
438.326 263.055 437.772 263.609 437.087 263.609 cv
cp
0 0 0 rgb
f
314.057 292.673 mo
313.651 292.71 313.288 292.936 313.059 293.292 cv
312.811 293.68 312.757 294.153 312.912 294.592 cv
327.49 335.919 li
327.686 336.476 328.19 336.845 328.75 336.845 cv
401.154 335.7 li
401.853 335.689 402.421 335.124 402.476 334.385 cv
406.042 285.91 li
406.075 285.474 405.919 285.053 405.616 284.754 cv
405.334 284.479 404.972 284.35 404.584 284.379 cv
314.057 292.673 li
cp
328.749 337.479 mo
327.921 337.479 327.177 336.94 326.892 336.13 cv
312.313 294.803 li
312.093 294.179 312.17 293.503 312.525 292.95 cv
312.86 292.428 313.397 292.096 313.999 292.041 cv
404.527 283.747 li
405.087 283.7 405.649 283.897 406.061 284.302 cv
406.497 284.73 406.721 285.334 406.675 285.957 cv
403.108 334.432 li
403.029 335.5 402.193 336.318 401.164 336.335 cv
328.781 337.479 li
328.749 337.479 li
cp
1 1 1 rgb
f
345.453 337.259 mo
345.32 337.259 345.196 337.175 345.152 337.041 cv
329.905 291.159 li
329.85 290.993 329.94 290.813 330.106 290.759 cv
330.272 290.699 330.452 290.792 330.507 290.96 cv
345.754 336.842 li
345.81 337.008 345.719 337.188 345.553 337.242 cv
345.453 337.259 li
cp
f
358.914 336.662 mo
358.767 336.662 358.635 336.56 358.604 336.41 cv
348.741 289.478 li
348.705 289.306 348.814 289.138 348.986 289.102 cv
349.156 289.065 349.325 289.175 349.362 289.347 cv
359.225 336.279 li
359.261 336.451 359.151 336.619 358.979 336.655 cv
358.914 336.662 li
cp
f
371.456 336.662 mo
371.289 336.662 371.149 336.531 371.139 336.362 cv
368.383 287.712 li
368.373 287.537 368.507 287.388 368.682 287.378 cv
368.85 287.351 369.006 287.502 369.017 287.677 cv
371.773 336.327 li
371.783 336.502 371.649 336.651 371.474 336.661 cv
371.456 336.662 li
cp
f
385.012 336.499 mo
384.821 336.49 384.686 336.341 384.694 336.166 cv
387.173 286.036 li
387.182 285.861 387.332 285.706 387.506 285.735 cv
387.681 285.743 387.816 285.893 387.807 286.067 cv
385.328 336.197 li
385.32 336.367 385.18 336.499 385.012 336.499 cv
cp
f
316.403 305.89 mo
316.235 305.89 316.095 305.758 316.086 305.588 cv
316.078 305.413 316.212 305.265 316.388 305.256 cv
405.11 300.814 li
405.287 300.784 405.434 300.94 405.442 301.115 cv
405.451 301.29 405.316 301.438 405.141 301.447 cv
316.419 305.889 li
316.403 305.89 li
cp
f
322.114 321.012 mo
321.943 321.012 321.802 320.876 321.797 320.704 cv
321.791 320.529 321.929 320.383 322.104 320.377 cv
403.529 317.839 li
403.737 317.84 403.851 317.972 403.856 318.146 cv
403.862 318.321 403.724 318.468 403.549 318.474 cv
322.124 321.012 li
322.114 321.012 li
cp
f
326.238 358.552 mo
326.065 358.552 325.923 358.413 325.92 358.239 cv
325.918 358.064 326.058 357.92 326.233 357.917 cv
398.324 356.824 li
399.417 356.808 400.452 356.322 401.163 355.491 cv
401.874 354.66 402.194 353.563 402.041 352.48 cv
399.736 336.177 li
399.711 336.004 399.832 335.843 400.005 335.818 cv
400.185 335.795 400.339 335.915 400.364 336.089 cv
402.669 352.392 li
402.848 353.654 402.475 354.934 401.646 355.903 cv
400.816 356.873 399.609 357.439 398.334 357.459 cv
326.243 358.552 li
326.238 358.552 li
cp
f
338.821 364.262 mo
338.673 364.262 338.54 364.157 338.51 364.006 cv
337.347 358.084 li
337.313 357.912 337.426 357.745 337.598 357.711 cv
337.769 357.683 337.937 357.789 337.97 357.961 cv
339.133 363.883 li
339.167 364.055 339.055 364.222 338.883 364.256 cv
338.821 364.262 li
cp
f
388.734 363.628 mo
388.586 363.628 388.453 363.523 388.423 363.372 cv
387.26 357.45 li
387.226 357.278 387.338 357.111 387.51 357.077 cv
387.68 357.047 387.849 357.155 387.883 357.327 cv
389.046 363.249 li
389.08 363.421 388.968 363.588 388.796 363.622 cv
388.734 363.628 li
cp
f
348.551 371.664 mo
348.551 376.337 344.763 380.124 340.091 380.124 cv
335.418 380.124 331.631 376.337 331.631 371.664 cv
331.631 366.992 335.418 363.204 340.091 363.204 cv
344.763 363.204 348.551 366.992 348.551 371.664 cv
cp
.647059 .34902 .258824 rgb
f
397.617 371.664 mo
397.617 376.337 393.83 380.124 389.158 380.124 cv
384.485 380.124 380.698 376.337 380.698 371.664 cv
380.698 366.992 384.485 363.204 389.158 363.204 cv
393.83 363.204 397.617 366.992 397.617 371.664 cv
cp
f
343.581 371.664 mo
343.581 373.592 342.018 375.154 340.091 375.154 cv
338.164 375.154 336.601 373.592 336.601 371.664 cv
336.601 369.737 338.164 368.175 340.091 368.175 cv
342.018 368.175 343.581 369.737 343.581 371.664 cv
cp
.776471 .454902 .360784 rgb
f
392.647 371.664 mo
392.647 373.592 391.085 375.154 389.158 375.154 cv
387.23 375.154 385.668 373.592 385.668 371.664 cv
385.668 369.737 387.23 368.175 389.158 368.175 cv
391.085 368.175 392.647 369.737 392.647 371.664 cv
cp
f
436.641 262.215 mo
436.557 262.203 li
433.945 261.492 li
433.776 261.446 433.677 261.272 433.723 261.104 cv
433.769 260.935 433.943 260.835 434.112 260.881 cv
436.323 261.482 li
436.323 260.054 li
436.323 259.879 436.465 259.736 436.641 259.736 cv
436.816 259.736 436.958 259.879 436.958 260.054 cv
436.958 261.897 li
436.958 261.996 436.912 262.09 436.833 262.149 cv
436.641 262.215 li
cp
0 0 0 rgb
f
443.815 251.118 mo
443.815 251.118 434.024 250.057 430.366 252.285 cv
426.708 254.514 425.896 262.462 426.388 263.174 cv
426.88 263.886 428.119 263.627 428.119 263.627 cv
428.119 263.627 428.167 265.097 428.914 265.584 cv
429.661 266.07 430.861 265.219 430.861 265.219 cv
430.861 265.219 432.716 266.578 434.098 266.065 cv
435.48 265.553 436.483 264.503 436.188 263.405 cv
435.892 262.308 435.134 262.104 435.134 262.104 cv
435.892 262.308 li
435.892 262.308 437.185 263.812 440.568 263.531 cv
443.953 263.251 447.193 258.262 447.193 258.262 cv
443.815 251.118 li
cp
.976471 .521569 .458824 rgb
f
428.119 263.944 mo
428.062 263.939 li
427.889 263.907 427.775 263.742 427.807 263.57 cv
429.043 256.795 li
429.074 256.622 429.236 256.514 429.412 256.539 cv
429.584 256.571 429.699 256.736 429.667 256.908 cv
428.431 263.684 li
428.403 263.837 428.27 263.944 428.119 263.944 cv
cp
0 0 0 rgb
f
430.861 265.536 mo
430.807 265.531 li
430.634 265.502 430.519 265.338 430.548 265.165 cv
431.801 257.877 li
431.831 257.704 432 257.591 432.167 257.618 cv
432.34 257.647 432.456 257.812 432.426 257.984 cv
431.173 265.272 li
431.147 265.427 431.013 265.536 430.861 265.536 cv
cp
f
435.134 262.421 mo
435 262.392 li
434.842 262.317 434.773 262.129 434.847 261.97 cv
435.694 260.147 li
435.769 259.988 435.955 259.921 436.116 259.993 cv
436.274 260.067 436.343 260.256 436.27 260.415 cv
435.422 262.237 li
435.368 262.353 435.253 262.421 435.134 262.421 cv
cp
f
682.003 245.159 mo
682.003 245.159 672.643 239.309 672.097 235.08 cv
671.551 230.851 680.055 228.882 680.055 228.882 cv
686.511 233.964 li
682.003 245.159 li
cp
.976471 .521569 .458824 rgb
f
677.923 244.888 mo
684.32 248.291 li
685.235 248.777 686.37 248.431 686.857 247.517 cv
697.695 227.145 li
699.022 224.65 698.076 221.553 695.582 220.227 cv
694.904 219.865 li
692.41 218.539 689.313 219.484 687.986 221.979 cv
677.147 242.352 li
676.661 243.266 677.008 244.401 677.923 244.888 cv
cp
.976471 .678431 .384314 rgb
f
692.046 220.953 mo
696.278 223.205 li
699.228 217.66 li
694.995 215.409 li
692.046 220.953 li
cp
f
693.966 217.258 mo
698.27 219.547 li
699.006 219.939 699.921 219.66 700.313 218.924 cv
700.704 218.187 700.425 217.272 699.688 216.881 cv
695.385 214.591 li
694.648 214.199 693.733 214.479 693.342 215.215 cv
692.95 215.951 693.229 216.865 693.966 217.258 cv
cp
.94902 .317647 .231373 rgb
f
690.109 236.617 mo
689.96 236.58 li
689.806 236.498 689.747 236.306 689.829 236.15 cv
695.789 224.947 li
695.873 224.793 696.064 224.734 696.219 224.816 cv
696.373 224.898 696.432 225.091 696.35 225.246 cv
690.39 236.449 li
690.332 236.556 690.223 236.617 690.109 236.617 cv
cp
1 1 1 rgb
f
677.28 226.916 mo
677.28 226.916 681.957 225.214 684.819 225.062 cv
687.683 224.909 690.925 229.326 690.13 230.819 cv
689.336 232.313 684.711 229.231 684.711 229.231 cv
684.711 229.231 679.056 235.232 674.224 232.661 cv
669.392 230.091 677.28 226.916 677.28 226.916 cv
cp
.976471 .521569 .458824 rgb
f
677.156 233.781 mo
675.905 233.781 674.536 233.401 673.16 232.329 cv
673.022 232.222 672.997 232.022 673.105 231.884 cv
673.214 231.746 673.412 231.723 673.551 231.829 cv
677.821 235.156 682.057 231.114 682.098 231.073 cv
682.222 230.951 682.424 230.954 682.547 231.079 cv
682.669 231.205 682.666 231.405 682.541 231.528 cv
682.508 231.56 680.181 233.781 677.156 233.781 cv
cp
0 0 0 rgb
f
673.727 239.345 mo
673.727 239.345 652.653 246.586 636.465 231.984 cv
620.277 217.383 634.682 202.945 634.682 202.945 cv
634.682 202.945 647.734 211.12 654.777 215.074 cv
662.317 219.307 674.798 225.489 674.798 225.489 cv
673.727 239.345 li
cp
.717647 .333333 .258824 rgb
f
628.514 355.077 mo
629.029 364.471 li
614.265 365.756 li
613.795 356.358 li
628.514 355.077 li
cp
1 .584314 .513726 rgb
f
650.048 350.302 mo
648.555 359.578 li
633.893 357.344 li
635.432 348.073 li
650.048 350.302 li
cp
f
652.33 361.788 mo
652.33 361.788 655.813 351.647 652.33 352.287 cv
648.849 352.927 645.45 356.363 645.45 356.363 cv
645.45 356.363 634.094 352.484 632.853 352.259 cv
631.611 352.032 629.044 365.065 629.044 365.065 cv
644.074 377.819 li
644.074 377.819 670.599 379.409 672.019 377.819 cv
673.439 376.229 668.339 368.353 663.574 367.696 cv
658.81 367.04 658.81 367.04 658.81 367.04 cv
652.33 361.788 li
cp
.619608 .34902 .262745 rgb
f
646.326 250.869 mo
646.326 250.869 659.019 279.161 661.822 291.643 cv
663.863 300.729 659.054 351.343 657.168 351.576 cv
655.283 351.81 634.682 351.576 634.682 351.576 cv
633.568 356.48 li
609.374 356.48 li
609.374 356.48 608.746 328.955 609.374 308.199 cv
610.003 287.444 612.195 252.437 612.195 252.437 cv
626.413 246.922 li
646.326 250.869 li
cp
.968627 .772549 .215686 rgb
f
635.432 348.391 mo
635.382 348.387 li
635.209 348.359 635.091 348.196 635.118 348.023 cv
641.2 309.623 640.049 270.278 640.036 269.885 cv
640.032 269.746 640.119 269.62 640.25 269.575 cv
648.178 266.846 li
648.344 266.79 648.524 266.878 648.581 267.042 cv
648.639 267.208 648.55 267.389 648.385 267.445 cv
640.677 270.099 li
640.764 273.427 641.592 311.208 635.745 348.123 cv
635.721 348.279 635.585 348.391 635.432 348.391 cv
cp
.313726 .470588 .286275 rgb
f
633.092 362.154 mo
633.092 362.154 632.112 356.965 629.566 356.718 cv
627.021 356.471 623.372 362.154 623.372 362.154 cv
623.372 362.154 613.426 361.413 612.723 362.154 cv
612.02 362.896 612.02 379.207 612.723 379.454 cv
613.426 379.701 654.679 379.701 656.555 379.454 cv
658.43 379.207 655.747 370.804 652.049 369.321 cv
648.351 367.839 644.368 367.834 644.368 367.834 cv
633.092 362.154 li
cp
.709804 .415686 .301961 rgb
f
644.368 368.151 mo
639.984 368.064 li
639.809 368.061 639.67 367.916 639.673 367.741 cv
639.677 367.567 639.817 367.43 639.99 367.43 cv
644.374 367.517 li
644.55 367.521 644.688 367.665 644.686 367.84 cv
644.682 368.014 644.541 368.151 644.368 368.151 cv
cp
1 1 1 rgb
f
658.81 367.357 mo
653.864 366.649 li
653.69 366.624 653.57 366.463 653.595 366.29 cv
653.62 366.117 653.789 366.003 653.954 366.021 cv
658.854 366.726 li
659.028 366.751 659.148 366.912 659.124 367.085 cv
659.101 367.243 658.965 367.357 658.81 367.357 cv
cp
f
647.552 254.263 mo
647.552 254.263 646.678 224.092 640.498 209.292 cv
634.982 196.081 612.825 201.076 610.922 205.999 cv
609.019 210.923 610.922 256.365 610.922 256.365 cv
610.922 256.365 635.432 259.883 647.552 254.263 cv
cp
.717647 .333333 .258824 rgb
f
655.304 291.817 mo
663.064 291.817 li
663.959 291.817 664.684 291.093 664.684 290.199 cv
664.684 273.837 li
664.684 271.399 662.707 269.423 660.269 269.423 cv
658.1 269.423 li
655.662 269.423 653.686 271.399 653.686 273.837 cv
653.686 290.199 li
653.686 291.093 654.41 291.817 655.304 291.817 cv
cp
.372549 .517647 .341176 rgb
f
656.787 271.726 mo
661.581 271.726 li
661.581 265.445 li
656.787 265.445 li
656.787 271.726 li
cp
f
656.747 267.562 mo
661.622 267.562 li
662.456 267.562 663.132 266.885 663.132 266.051 cv
663.132 265.217 662.456 264.541 661.622 264.541 cv
656.747 264.541 li
655.912 264.541 655.236 265.217 655.236 266.051 cv
655.236 266.885 655.912 267.562 656.747 267.562 cv
cp
1 .619608 .243137 rgb
f
662.286 286.501 mo
662.111 286.501 661.969 286.358 661.969 286.184 cv
661.969 273.494 li
661.969 273.319 662.111 273.177 662.286 273.177 cv
662.461 273.177 662.604 273.319 662.604 273.494 cv
662.604 286.184 li
662.604 286.358 662.461 286.501 662.286 286.501 cv
cp
f
630.825 196.414 mo
630.825 196.619 li
630.688 200.488 li
630.592 203.522 li
630.592 203.522 630.839 204.226 627.536 204.021 cv
623.109 203.728 621.671 201.705 621.671 201.705 cv
621.438 194.596 li
622.78 194.86 li
630.825 196.414 li
cp
1 .584314 .513726 rgb
f
630.718 197.332 mo
630.593 200.831 li
628.619 200.592 625.024 199.717 623.554 196.458 cv
623.441 196.192 623.365 195.954 623.341 195.755 cv
630.705 197.279 li
630.718 197.332 li
cp
0 0 0 rgb
f
631.897 180.585 mo
631.897 180.585 635.729 189.664 634.402 194.79 cv
633.075 199.915 628.649 199.141 625.998 198.171 cv
623.347 197.201 622.108 195.499 622.108 195.499 cv
622.108 195.499 619.644 196.399 617.976 193.989 cv
616.308 191.578 617.307 188.789 618.714 188.142 cv
620.12 187.495 621.805 188.557 621.805 188.557 cv
620.474 185.919 li
620.474 185.919 625.92 172.432 631.897 180.585 cv
cp
1 .584314 .513726 rgb
f
631.573 192.185 mo
631.484 192.172 li
631.315 192.123 631.22 191.947 631.269 191.778 cv
631.759 190.106 630.573 188.304 630.562 188.286 cv
630.464 188.14 630.503 187.943 630.649 187.846 cv
630.795 187.748 630.992 187.788 631.089 187.933 cv
631.145 188.017 632.45 190.004 631.878 191.957 cv
631.837 192.095 631.711 192.185 631.573 192.185 cv
cp
0 0 0 rgb
f
621.438 192.854 mo
621.201 192.749 li
618.855 190.127 li
618.738 189.997 618.75 189.796 618.88 189.68 cv
619.01 189.563 619.211 189.573 619.328 189.705 cv
621.674 192.326 li
621.791 192.456 621.779 192.657 621.649 192.773 cv
621.438 192.854 li
cp
f
618.954 192.152 mo
618.801 192.152 618.666 192.041 618.641 191.885 cv
618.613 191.712 618.731 191.549 618.904 191.521 cv
620.527 191.262 li
620.695 191.238 620.862 191.353 620.891 191.526 cv
620.918 191.699 620.8 191.861 620.627 191.889 cv
619.004 192.148 li
618.954 192.152 li
cp
f
632.437 188.384 mo
632.28 188.384 632.145 188.27 632.122 188.111 cv
631.886 186.418 li
631.861 186.245 631.982 186.084 632.156 186.061 cv
632.327 186.029 632.49 186.157 632.515 186.331 cv
632.751 188.023 li
632.775 188.197 632.654 188.357 632.48 188.381 cv
632.437 188.384 li
cp
f
627.659 188.789 mo
627.501 188.789 627.363 188.67 627.344 188.509 cv
627.139 186.813 li
627.118 186.639 627.242 186.48 627.416 186.459 cv
627.586 186.438 627.748 186.562 627.77 186.736 cv
627.975 188.433 li
627.995 188.607 627.871 188.765 627.697 188.786 cv
627.659 188.789 li
cp
f
622.108 187.157 mo
622.108 189.916 li
619.766 187.512 li
622.108 187.157 li
cp
f
632.988 184.525 mo
631.237 184.377 li
631.063 184.363 630.934 184.209 630.948 184.035 cv
630.964 183.86 631.105 183.731 631.292 183.746 cv
633.016 183.892 li
633.189 183.907 633.319 184.06 633.305 184.235 cv
633.29 184.4 633.151 184.525 632.988 184.525 cv
cp
f
626.413 185.051 mo
626.262 185.051 626.128 184.943 626.101 184.789 cv
626.07 184.617 626.185 184.452 626.357 184.421 cv
628.062 184.117 li
628.231 184.084 628.399 184.201 628.43 184.374 cv
628.46 184.546 628.346 184.711 628.173 184.742 cv
626.469 185.046 li
626.413 185.051 li
cp
f
627.822 193.278 mo
627.92 193.642 628.145 194.175 628.445 194.379 cv
628.561 194.458 628.667 194.475 628.797 194.438 cv
629.214 194.313 629.543 194.083 629.762 193.893 cv
629.006 193.606 628.218 193.35 627.822 193.278 cv
cp
628.676 195.091 mo
628.472 195.091 628.272 195.028 628.089 194.904 cv
627.449 194.47 627.168 193.408 627.138 193.07 cv
627.128 192.96 627.206 192.786 627.294 192.72 cv
627.416 192.629 627.74 192.389 630.439 193.477 cv
630.531 193.514 630.601 193.591 630.627 193.686 cv
630.653 193.781 630.634 193.882 630.575 193.961 cv
630.551 193.993 629.978 194.747 628.979 195.045 cv
628.877 195.076 628.775 195.091 628.676 195.091 cv
cp
f
659.98 250.831 mo
636.886 250.831 li
636.886 258.231 li
659.98 258.231 li
659.98 250.831 li
cp
633.079 260.135 mo
633.079 248.928 li
633.079 247.877 633.931 247.024 634.982 247.024 cv
661.884 247.024 li
662.936 247.024 663.787 247.877 663.787 248.928 cv
663.787 260.135 li
663.787 261.186 662.936 262.039 661.884 262.039 cv
634.982 262.039 li
633.931 262.039 633.079 261.186 633.079 260.135 cv
cp
f
623.571 291.5 mo
672.327 291.5 li
677.588 261.369 li
618.311 261.369 li
623.571 291.5 li
cp
672.594 292.135 mo
623.305 292.135 li
623.15 292.135 623.019 292.023 622.992 291.872 cv
617.621 261.106 li
617.604 261.014 617.631 260.919 617.69 260.848 cv
617.751 260.776 617.84 260.734 617.934 260.734 cv
677.965 260.734 li
678.059 260.734 678.147 260.776 678.208 260.848 cv
678.268 260.919 678.294 261.014 678.277 261.106 cv
672.906 291.872 li
672.88 292.023 672.748 292.135 672.594 292.135 cv
cp
1 1 1 rgb
f
675.279 276.752 mo
620.619 276.752 li
620.444 276.752 620.302 276.609 620.302 276.435 cv
620.302 276.26 620.444 276.117 620.619 276.117 cv
675.279 276.117 li
675.454 276.117 675.597 276.26 675.597 276.435 cv
675.597 276.609 675.454 276.752 675.279 276.752 cv
cp
f
647.552 292.135 mo
647.377 292.135 647.234 291.992 647.234 291.817 cv
647.234 260.396 li
647.234 260.222 647.377 260.079 647.552 260.079 cv
647.727 260.079 647.869 260.222 647.869 260.396 cv
647.869 291.817 li
647.869 291.992 647.727 292.135 647.552 292.135 cv
cp
f
659.913 292.135 mo
659.699 292.109 659.576 291.951 659.599 291.777 cv
663.541 261.012 li
663.563 260.839 663.713 260.708 663.896 260.737 cv
664.069 260.76 664.192 260.918 664.17 261.092 cv
660.228 291.857 li
660.207 292.018 660.07 292.135 659.913 292.135 cv
cp
f
634.982 292.135 mo
634.818 292.135 634.679 292.008 634.666 291.842 cv
632.279 261.076 li
632.266 260.901 632.396 260.749 632.571 260.735 cv
632.748 260.719 632.899 260.854 632.912 261.027 cv
635.299 291.793 li
635.313 291.968 635.182 292.12 635.007 292.134 cv
634.982 292.135 li
cp
f
615.66 263.049 mo
679.444 263.049 li
681.288 263.049 682.782 261.555 682.782 259.71 cv
682.782 257.866 681.288 256.371 679.444 256.371 cv
615.66 256.371 li
613.816 256.371 612.321 257.866 612.321 259.71 cv
612.321 261.555 613.816 263.049 615.66 263.049 cv
cp
.94902 .317647 .231373 rgb
f
648.867 237.753 mo
648.867 237.753 655.26 239.617 656.686 245.822 cv
658.112 252.028 656.303 253.642 655.326 254.088 cv
654.35 254.535 653.9 254.518 653.9 254.518 cv
653.9 254.518 653.067 255.685 651.803 255.913 cv
650.539 256.142 649.789 255.376 649.789 255.376 cv
649.789 255.376 647.765 256.521 646.865 256.486 cv
645.967 256.452 644.62 255.18 644.494 254.761 cv
644.367 254.341 643.208 250.495 643.208 250.495 cv
643.208 250.495 642.137 250.988 641.033 250.16 cv
638.365 248.157 638.833 238.59 638.833 238.59 cv
638.833 238.59 645.605 237.269 648.867 237.753 cv
cp
1 .584314 .513726 rgb
f
653.9 254.835 mo
653.695 254.816 653.567 254.661 653.585 254.487 cv
653.589 254.445 653.973 250.31 653.078 247.341 cv
653.027 247.173 653.123 246.996 653.29 246.945 cv
653.465 246.897 653.636 246.991 653.686 247.157 cv
654.617 250.248 654.233 254.374 654.216 254.548 cv
654.2 254.712 654.063 254.835 653.9 254.835 cv
cp
0 0 0 rgb
f
649.789 255.693 mo
649.587 255.677 649.458 255.522 649.473 255.349 cv
649.477 255.308 649.819 251.255 649.137 248.512 cv
649.094 248.342 649.197 248.17 649.368 248.128 cv
649.538 248.084 649.71 248.189 649.752 248.359 cv
650.461 251.206 650.12 255.233 650.105 255.403 cv
650.091 255.568 649.952 255.693 649.789 255.693 cv
cp
f
621.598 189.145 mo
621.598 189.145 622.527 189.754 623.203 188.697 cv
623.879 187.64 622.4 184.517 622.4 184.517 cv
622.4 184.517 625.189 185.149 626.913 184.227 cv
628.637 183.305 629.483 180.767 629.483 180.767 cv
629.483 180.767 630.752 183.41 634.559 182.247 cv
638.366 181.084 639.092 175.902 635.027 174.845 cv
630.964 173.788 628.743 175.585 628.743 175.585 cv
628.743 175.585 628.228 171.825 623.203 173.682 cv
618.625 175.374 617.851 181.109 617.851 181.109 cv
617.851 181.109 615.102 181.237 614.572 184.227 cv
614.044 187.217 617.543 189.381 617.543 189.381 cv
617.543 189.381 619.528 188.216 621.598 189.145 cv
cp
f
641.491 250.831 mo
641.491 250.831 602.112 260.59 597.175 239.208 cv
591.676 215.397 612.704 204.058 612.704 204.058 cv
639.367 231.049 li
641.491 250.831 li
cp
.717647 .333333 .258824 rgb
f
627.029 234.583 mo
626.967 234.577 li
626.859 234.555 616.125 232.432 610.534 233.056 cv
610.361 233.068 610.203 232.949 610.184 232.775 cv
610.164 232.602 610.29 232.444 610.464 232.425 cv
616.157 231.794 626.647 233.866 627.092 233.954 cv
627.264 233.989 627.375 234.156 627.341 234.328 cv
627.311 234.479 627.178 234.583 627.029 234.583 cv
cp
1 .698039 .333333 rgb
f
612.629 228.825 mo
612.504 228.825 612.383 228.838 612.267 228.864 cv
612.093 228.905 612.05 228.949 612.05 228.949 cv
612.131 229.414 614.784 230.873 617.596 232.145 cv
616.256 230.71 614.146 228.825 612.629 228.825 cv
cp
618.764 233.32 mo
618.64 233.295 li
615.904 232.137 611.331 230.02 611.433 228.856 cv
611.45 228.646 611.585 228.371 612.124 228.247 cv
614.822 227.622 618.842 232.593 619.012 232.805 cv
619.103 232.918 619.104 233.079 619.017 233.194 cv
618.955 233.275 618.86 233.32 618.764 233.32 cv
cp
f
629.214 204.595 mo
626.771 204.595 623.407 204.137 621.434 201.916 cv
621.317 201.785 621.329 201.584 621.46 201.468 cv
621.59 201.351 621.791 201.362 621.908 201.494 cv
624.964 204.935 632.003 203.758 632.072 203.745 cv
632.247 203.716 632.41 203.831 632.439 204.003 cv
632.47 204.176 632.354 204.34 632.182 204.37 cv
632.061 204.392 630.842 204.595 629.214 204.595 cv
cp
f
646.022 234.923 mo
645.866 234.923 645.73 234.808 645.708 234.648 cv
644.602 226.602 li
644.578 226.429 644.699 226.269 644.873 226.244 cv
645.057 226.222 645.206 226.343 645.23 226.516 cv
646.337 234.563 li
646.36 234.735 646.239 234.896 646.065 234.92 cv
646.022 234.923 li
cp
f
654.881 216.705 mo
653.545 218.438 652.066 220.724 652.285 221.576 cv
652.314 221.693 652.377 221.763 652.493 221.808 cv
652.623 221.855 652.739 221.845 652.869 221.77 cv
653.76 221.258 654.494 218.563 654.881 216.705 cv
cp
652.643 222.472 mo
652.517 222.472 652.39 222.447 652.265 222.399 cv
651.957 222.28 651.751 222.05 651.67 221.733 cv
651.24 220.055 654.775 215.802 655.181 215.322 cv
655.271 215.212 655.427 215.179 655.555 215.238 cv
655.685 215.297 655.759 215.436 655.736 215.576 cv
655.643 216.17 654.772 221.407 653.187 222.319 cv
653.011 222.421 652.827 222.472 652.643 222.472 cv
cp
f
630.718 349.143 mo
609.095 349.143 li
608.92 349.143 608.777 349 608.777 348.825 cv
608.777 348.65 608.92 348.508 609.095 348.508 cv
630.718 348.508 li
630.893 348.508 631.035 348.65 631.035 348.825 cv
631.035 349 630.893 349.143 630.718 349.143 cv
cp
.313726 .470588 .286275 rgb
f
658.461 344.956 mo
635.956 344.956 li
635.781 344.956 635.639 344.813 635.639 344.639 cv
635.639 344.464 635.781 344.321 635.956 344.321 cv
658.461 344.321 li
658.636 344.321 658.778 344.464 658.778 344.639 cv
658.778 344.813 658.636 344.956 658.461 344.956 cv
cp
f
271.978 268.851 mo
222.951 268.851 li
222.951 248.713 li
222.951 244.784 226.136 241.599 230.065 241.599 cv
264.864 241.599 li
268.792 241.599 271.978 244.784 271.978 248.713 cv
271.978 268.851 li
cp
.737255 .603922 .568627 rgb
f
274.44 236.303 mo
220.489 236.303 li
217.774 236.303 215.575 234.103 215.575 231.389 cv
215.575 184.679 li
215.575 181.965 217.774 179.765 220.489 179.765 cv
274.44 179.765 li
277.154 179.765 279.354 181.965 279.354 184.679 cv
279.354 231.389 li
279.354 234.103 277.154 236.303 274.44 236.303 cv
cp
f
251.435 246.223 mo
243.494 246.223 li
243.494 226.382 li
251.435 226.382 li
251.435 246.223 li
cp
f
290.541 265.663 mo
286.785 265.663 li
286.785 254.63 li
290.541 254.63 li
290.541 265.663 li
cp
.698039 .568627 .52549 rgb
f
296.269 257.697 mo
284.813 257.697 li
283.582 257.697 282.584 256.699 282.584 255.469 cv
282.584 234.581 li
282.584 233.351 283.582 232.353 284.813 232.353 cv
296.269 232.353 li
297.499 232.353 298.497 233.351 298.497 234.581 cv
298.497 255.469 li
298.497 256.699 297.499 257.697 296.269 257.697 cv
cp
f
245.814 246.223 mo
237.643 246.223 li
237.643 226.382 li
245.814 226.382 li
245.814 246.223 li
cp
.807843 .682353 .639216 rgb
f
293.761 257.697 mo
282.305 257.697 li
281.075 257.697 280.077 256.699 280.077 255.469 cv
280.077 234.581 li
280.077 233.351 281.075 232.353 282.305 232.353 cv
293.761 232.353 li
294.992 232.353 295.989 233.351 295.989 234.581 cv
295.989 255.469 li
295.989 256.699 294.992 257.697 293.761 257.697 cv
cp
.74902 .619608 .564706 rgb
f
292.793 252.793 mo
283.273 252.793 li
282.809 252.793 282.432 252.416 282.432 251.951 cv
282.432 237.092 li
282.432 236.626 282.809 236.249 283.273 236.249 cv
292.793 236.249 li
293.258 236.249 293.635 236.626 293.635 237.092 cv
293.635 251.951 li
293.635 252.416 293.258 252.793 292.793 252.793 cv
cp
.956863 .898039 .882353 rgb
f
289.616 239.931 mo
284.17 239.931 li
283.981 239.931 283.829 239.778 283.829 239.59 cv
283.829 239.401 283.981 239.249 284.17 239.249 cv
289.616 239.249 li
289.805 239.249 289.958 239.401 289.958 239.59 cv
289.958 239.778 289.805 239.931 289.616 239.931 cv
cp
.94902 .317647 .231373 rgb
f
289.616 242.48 mo
284.17 242.48 li
283.981 242.48 283.829 242.328 283.829 242.14 cv
283.829 241.951 283.981 241.799 284.17 241.799 cv
289.616 241.799 li
289.805 241.799 289.958 241.951 289.958 242.14 cv
289.958 242.328 289.805 242.48 289.616 242.48 cv
cp
f
266.95 268.851 mo
216.507 268.851 li
216.507 248.815 li
216.507 244.83 219.738 241.599 223.724 241.599 cv
259.734 241.599 li
263.719 241.599 266.95 244.83 266.95 248.815 cv
266.95 268.851 li
cp
.898039 .784314 .741176 rgb
f
291.73 370.454 mo
219.162 370.454 li
215.251 370.454 212.082 367.284 212.082 363.373 cv
212.082 277.798 li
212.082 273.887 215.251 270.717 219.162 270.717 cv
291.73 270.717 li
295.64 270.717 298.811 273.887 298.811 277.798 cv
298.811 363.373 li
298.811 367.284 295.64 370.454 291.73 370.454 cv
cp
.666667 .517647 .490196 rgb
f
284.669 370.454 mo
212.102 370.454 li
208.191 370.454 205.021 367.284 205.021 363.373 cv
205.021 277.798 li
205.021 273.887 208.191 270.717 212.102 270.717 cv
284.669 270.717 li
288.58 270.717 291.75 273.887 291.75 277.798 cv
291.75 363.373 li
291.75 367.284 288.58 370.454 284.669 370.454 cv
cp
.698039 .568627 .52549 rgb
f
238.443 290.361 mo
215.2 290.361 li
213.478 290.361 212.082 288.965 212.082 287.242 cv
212.082 285.52 213.478 284.124 215.2 284.124 cv
238.443 284.124 li
240.166 284.124 241.563 285.52 241.563 287.242 cv
241.563 288.965 240.166 290.361 238.443 290.361 cv
cp
.6 .466667 .45098 rgb
f
280.313 290.361 mo
265.643 290.361 li
263.92 290.361 262.524 288.965 262.524 287.242 cv
262.524 285.52 263.92 284.124 265.643 284.124 cv
280.313 284.124 li
282.035 284.124 283.432 285.52 283.432 287.242 cv
283.432 288.965 282.035 290.361 280.313 290.361 cv
cp
f
296.832 279.124 mo
206.132 279.124 li
204.045 279.124 202.354 277.432 202.354 275.346 cv
202.354 268.17 li
202.354 266.084 204.045 264.393 206.132 264.393 cv
296.832 264.393 li
298.918 264.393 300.61 266.084 300.61 268.17 cv
300.61 275.346 li
300.61 277.432 298.918 279.124 296.832 279.124 cv
cp
.866667 .752941 .701961 rgb
f
269.555 236.303 mo
213.902 236.303 li
211.149 236.303 208.918 234.07 208.918 231.317 cv
208.918 184.75 li
208.918 181.997 211.149 179.765 213.902 179.765 cv
269.555 179.765 li
272.308 179.765 274.54 181.997 274.54 184.75 cv
274.54 231.317 li
274.54 234.07 272.308 236.303 269.555 236.303 cv
cp
.898039 .784314 .741176 rgb
f
265.328 232.008 mo
218.13 232.008 li
215.795 232.008 213.902 230.115 213.902 227.78 cv
213.902 188.287 li
213.902 185.952 215.795 184.06 218.13 184.06 cv
265.328 184.06 li
267.663 184.06 269.555 185.952 269.555 188.287 cv
269.555 227.78 li
269.555 230.115 267.663 232.008 265.328 232.008 cv
cp
.956863 .878431 .843137 rgb
f
227.083 195.482 mo
227.083 197.764 225.233 199.614 222.951 199.614 cv
220.669 199.614 218.819 197.764 218.819 195.482 cv
218.819 193.2 220.669 191.351 222.951 191.351 cv
225.233 191.351 227.083 193.2 227.083 195.482 cv
cp
.807843 .682353 .639216 rgb
f
227.083 208.033 mo
227.083 210.315 225.233 212.166 222.951 212.166 cv
220.669 212.166 218.819 210.315 218.819 208.033 cv
218.819 205.752 220.669 203.901 222.951 203.901 cv
225.233 203.901 227.083 205.752 227.083 208.033 cv
cp
f
227.083 220.606 mo
227.083 222.889 225.233 224.738 222.951 224.738 cv
220.669 224.738 218.819 222.889 218.819 220.606 cv
218.819 218.324 220.669 216.475 222.951 216.475 cv
225.233 216.475 227.083 218.324 227.083 220.606 cv
cp
f
258.077 195.824 mo
232.318 195.824 li
232.129 195.824 231.977 195.671 231.977 195.482 cv
231.977 195.294 232.129 195.141 232.318 195.141 cv
258.077 195.141 li
258.266 195.141 258.418 195.294 258.418 195.482 cv
258.418 195.671 258.266 195.824 258.077 195.824 cv
cp
.94902 .317647 .231373 rgb
f
258.077 208.374 mo
232.318 208.374 li
232.129 208.374 231.977 208.222 231.977 208.033 cv
231.977 207.845 232.129 207.692 232.318 207.692 cv
258.077 207.692 li
258.266 207.692 258.418 207.845 258.418 208.033 cv
258.418 208.222 258.266 208.374 258.077 208.374 cv
cp
f
258.077 220.947 mo
232.318 220.947 li
232.129 220.947 231.977 220.795 231.977 220.606 cv
231.977 220.418 232.129 220.266 232.318 220.266 cv
258.077 220.266 li
258.266 220.266 258.418 220.418 258.418 220.606 cv
258.418 220.795 258.266 220.947 258.077 220.947 cv
cp
f
253.337 249.857 mo
234.358 249.857 li
233.332 249.857 232.501 249.026 232.501 248 cv
232.501 246.975 233.332 246.144 234.358 246.144 cv
253.337 246.144 li
254.363 246.144 255.194 246.975 255.194 248 cv
255.194 249.026 254.363 249.857 253.337 249.857 cv
cp
.666667 .517647 .490196 rgb
f
239.101 250.212 mo
238.968 250.212 238.842 250.133 238.787 250.003 cv
238.713 249.829 238.794 249.629 238.968 249.556 cv
247.753 245.843 li
247.928 245.771 248.127 245.852 248.201 246.024 cv
248.274 246.198 248.193 246.398 248.019 246.472 cv
239.234 250.185 li
239.101 250.212 li
cp
1 1 1 rgb
f
184.86 350.821 mo
184.86 360.115 li
202.354 359.459 li
202.354 350.821 li
184.86 350.821 li
cp
.976471 .521569 .458824 rgb
f
141.842 349.774 mo
141.842 359.068 li
158.036 358.412 li
158.036 349.774 li
141.842 349.774 li
cp
f
162.056 374.43 mo
162.056 376.07 161.504 377.946 160.376 378.419 cv
159.248 378.891 150.116 379.875 142.125 379.18 cv
134.477 378.511 132.889 377.946 132.325 377.251 cv
132.049 376.896 132.587 375.257 133.204 373.669 cv
133.309 373.42 li
133.624 372.619 133.952 371.845 134.188 371.294 cv
134.424 370.77 134.712 370.271 135.054 369.785 cv
135.88 368.644 137.521 366.282 137.94 365.062 cv
138.491 363.435 139.331 359.919 139.895 358.266 cv
140.459 356.639 141.837 356.298 141.837 356.298 cv
141.837 356.298 157.568 355.222 158.697 356.166 cv
159.812 357.098 160.376 364.839 160.376 366.007 cv
160.376 367.174 li
160.376 368.264 161.124 370.415 161.609 372.199 cv
161.741 372.646 161.846 373.065 161.924 373.446 cv
162.003 373.826 162.056 374.154 162.056 374.43 cv
cp
.717647 .333333 .258824 rgb
f
231.817 377.775 mo
230.768 378.209 186.119 379.429 185.083 377.775 cv
184.768 377.277 184.544 375.585 184.4 373.459 cv
184.033 368.447 184.033 360.994 184.033 360.994 cv
184.033 360.994 183.705 358.449 183.77 357.269 cv
183.823 356.101 205.301 356.547 205.301 356.547 cv
219.116 365.668 li
219.116 365.668 223.092 366.872 227.278 367.555 cv
229.495 367.909 230.925 370.625 231.634 373.184 cv
232.264 375.453 232.316 377.565 231.817 377.775 cv
cp
f
178.918 248.756 mo
178.918 248.756 194.422 267.57 202.295 299.06 cv
210.167 330.549 209.643 353.729 209.643 353.729 cv
179.88 353.729 li
179.88 353.729 179.099 334.485 175.827 318.74 cv
172.555 302.996 167.786 291.407 167.786 291.407 cv
164.58 353.729 li
134.875 353.729 li
134.875 353.729 140.326 263.276 145.613 249.77 cv
149.915 238.781 178.918 248.756 178.918 248.756 cv
cp
1 .698039 .333333 rgb
f
143.46 363.307 mo
143.304 363.307 143.168 363.191 143.146 363.032 cv
143.123 362.858 143.245 362.698 143.418 362.675 cv
148.919 361.926 154.227 362.668 154.28 362.675 cv
154.453 362.7 154.574 362.861 154.549 363.034 cv
154.524 363.208 154.362 363.324 154.19 363.304 cv
154.138 363.296 148.915 362.564 143.504 363.304 cv
143.46 363.307 li
cp
1 1 1 rgb
f
143.46 367.228 mo
143.304 367.228 143.168 367.112 143.146 366.953 cv
143.123 366.779 143.245 366.619 143.418 366.596 cv
148.919 365.848 154.227 366.589 154.28 366.596 cv
154.453 366.621 154.574 366.782 154.549 366.955 cv
154.524 367.129 154.362 367.249 154.19 367.225 cv
154.138 367.217 148.915 366.485 143.504 367.225 cv
143.46 367.228 li
cp
f
167.786 291.725 mo
167.606 291.723 167.466 291.579 167.468 291.403 cv
167.727 269.852 li
167.729 269.723 167.808 269.607 167.928 269.561 cv
175.694 266.511 li
175.857 266.443 176.041 266.526 176.105 266.689 cv
176.169 266.853 176.089 267.037 175.926 267.101 cv
168.359 270.072 li
168.103 291.411 li
168.101 291.585 167.959 291.725 167.786 291.725 cv
cp
f
207.677 361.893 mo
207.503 361.893 207.362 361.754 207.359 361.58 cv
207.357 361.404 207.497 361.261 207.672 361.258 cv
212.34 361.188 li
212.543 361.168 212.659 361.325 212.662 361.501 cv
212.665 361.677 212.524 361.82 212.35 361.823 cv
207.682 361.893 li
207.677 361.893 li
cp
f
210.92 364.455 mo
210.747 364.455 210.606 364.316 210.603 364.143 cv
210.601 363.967 210.741 363.823 210.916 363.82 cv
215.583 363.751 li
215.761 363.751 215.902 363.89 215.905 364.063 cv
215.908 364.239 215.768 364.383 215.593 364.386 cv
210.925 364.455 li
210.92 364.455 li
cp
f
220.351 232.609 mo
220.351 232.609 219.82 226.395 217.653 226.911 cv
215.487 227.428 215.115 233.35 215.115 233.35 cv
220.351 232.609 li
cp
.976471 .521569 .458824 rgb
f
224.351 235.782 mo
224.351 235.782 203.808 229.229 194.515 220.978 cv
185.223 212.726 190.281 239.392 190.281 239.392 cv
190.281 239.392 200.987 245.369 216.938 245.934 cv
232.89 246.497 224.351 235.782 224.351 235.782 cv
cp
f
102.323 345.192 mo
107.399 345.192 li
107.399 322.249 li
102.323 322.249 li
102.323 345.192 li
cp
0 0 0 rgb
f
177.747 206.685 mo
177.747 206.685 190.281 217.593 199.741 222.129 cv
195.103 242.253 li
195.103 242.253 180.326 242.29 177.568 235.358 cv
174.81 228.427 177.747 206.685 177.747 206.685 cv
cp
.372549 .517647 .341176 rgb
f
166.997 202.925 mo
166.997 202.925 176.705 203.909 180.35 209.275 cv
183.996 214.642 179.178 248.287 178.918 248.756 cv
178.658 249.225 175.867 254.936 164.08 254.638 cv
152.293 254.34 142.815 255.661 144.102 248.137 cv
144.241 247.326 143.648 211.062 146.513 207.843 cv
149.377 204.624 159.893 201.94 166.997 202.925 cv
cp
f
160.935 197.12 mo
161.096 204.351 li
161.096 204.351 162.446 206.399 166.683 206.649 cv
169.84 206.836 170.931 206.099 170.931 206.099 cv
170.411 202.446 li
169.898 198.885 li
162.223 197.375 li
160.935 197.12 li
cp
.976471 .521569 .458824 rgb
f
162.223 197.375 mo
162.246 197.572 162.326 197.803 162.449 198.068 cv
164.146 201.644 168.587 202.324 170.411 202.446 cv
169.898 198.885 li
162.223 197.375 li
cp
0 0 0 rgb
f
171.144 182.369 mo
171.144 182.369 175.14 191.35 173.756 196.42 cv
172.372 201.489 167.756 200.724 164.991 199.764 cv
162.226 198.805 160.934 197.122 160.934 197.122 cv
160.934 197.122 158.363 198.012 156.624 195.628 cv
154.884 193.243 155.927 190.484 157.394 189.844 cv
158.861 189.204 160.618 190.254 160.618 190.254 cv
159.229 187.646 li
159.229 187.646 164.909 174.304 171.144 182.369 cv
cp
.976471 .521569 .458824 rgb
f
170.805 193.847 mo
170.711 193.833 li
170.544 193.781 170.45 193.603 170.502 193.436 cv
171.009 191.796 169.778 190.012 169.766 189.994 cv
169.666 189.851 169.7 189.653 169.843 189.553 cv
169.985 189.452 170.185 189.486 170.285 189.629 cv
170.343 189.712 171.708 191.683 171.108 193.623 cv
171.066 193.759 170.941 193.847 170.805 193.847 cv
cp
0 0 0 rgb
f
160.235 194.509 mo
160.004 194.41 li
157.557 191.817 li
157.437 191.689 157.443 191.489 157.57 191.368 cv
157.698 191.248 157.898 191.253 158.019 191.381 cv
160.466 193.974 li
160.586 194.102 160.58 194.302 160.453 194.423 cv
160.235 194.509 li
cp
f
157.645 193.814 mo
157.49 193.814 157.355 193.702 157.332 193.544 cv
157.305 193.372 157.424 193.209 157.598 193.184 cv
159.29 192.927 li
159.459 192.902 159.625 193.02 159.651 193.193 cv
159.677 193.366 159.558 193.528 159.385 193.554 cv
157.692 193.811 li
157.645 193.814 li
cp
f
166.534 194.964 mo
166.731 195.281 167.037 195.646 167.482 195.869 cv
167.957 196.107 168.451 195.922 168.791 195.714 cv
166.534 194.964 li
cp
167.958 196.617 mo
167.713 196.617 167.457 196.566 167.198 196.436 cv
166.03 195.852 165.645 194.573 165.628 194.519 cv
165.596 194.405 165.628 194.283 165.713 194.201 cv
165.798 194.119 165.922 194.092 166.033 194.128 cv
169.555 195.299 li
169.658 195.333 169.737 195.419 169.763 195.525 cv
169.789 195.632 169.758 195.744 169.682 195.822 cv
169.642 195.862 168.89 196.617 167.958 196.617 cv
cp
f
166.723 190.487 mo
166.566 190.487 166.429 190.37 166.409 190.209 cv
166.195 188.531 li
166.173 188.357 166.296 188.199 166.47 188.177 cv
166.637 188.15 166.802 188.277 166.824 188.451 cv
167.038 190.129 li
167.061 190.303 166.938 190.462 166.764 190.484 cv
166.723 190.487 li
cp
f
182.16 232.517 mo
181.996 232.517 181.856 232.39 181.844 232.224 cv
180.94 220.497 li
180.927 220.322 181.058 220.17 181.232 220.156 cv
181.408 220.133 181.56 220.273 181.573 220.448 cv
182.477 232.175 li
182.49 232.35 182.359 232.502 182.185 232.516 cv
182.16 232.517 li
cp
1 1 1 rgb
f
171.706 190.087 mo
171.551 190.087 171.416 189.973 171.392 189.816 cv
171.146 188.142 li
171.121 187.969 171.24 187.807 171.414 187.782 cv
171.59 187.755 171.748 187.876 171.774 188.049 cv
172.02 189.723 li
172.045 189.896 171.926 190.058 171.752 190.083 cv
171.706 190.087 li
cp
0 0 0 rgb
f
165.16 187.27 mo
165.015 187.234 li
164.859 187.154 164.798 186.963 164.878 186.807 cv
165.498 185.601 167.025 185.914 167.089 185.929 cv
167.26 185.966 167.369 186.134 167.332 186.305 cv
167.295 186.476 167.125 186.586 166.957 186.549 cv
166.912 186.54 165.839 186.325 165.442 187.097 cv
165.386 187.207 165.275 187.27 165.16 187.27 cv
cp
f
170.025 186.233 mo
169.846 186.177 li
169.702 186.079 169.665 185.881 169.764 185.736 cv
170.019 185.363 170.348 185.149 170.741 185.101 cv
171.54 185.003 172.277 185.65 172.309 185.678 cv
172.44 185.794 172.452 185.994 172.336 186.125 cv
172.222 186.256 172.021 186.269 171.889 186.154 cv
171.734 186.018 171.244 185.686 170.817 185.73 cv
170.61 185.757 170.437 185.876 170.287 186.095 cv
170.226 186.185 170.126 186.233 170.025 186.233 cv
cp
f
167.551 206.989 mo
165.664 206.989 163.247 206.493 160.896 204.598 cv
160.76 204.487 160.739 204.288 160.849 204.151 cv
160.959 204.013 161.159 203.995 161.295 204.104 cv
165.898 207.815 170.759 205.827 170.807 205.807 cv
170.97 205.736 171.155 205.814 171.223 205.975 cv
171.292 206.136 171.216 206.322 171.055 206.391 cv
171.028 206.402 169.604 206.989 167.551 206.989 cv
cp
1 1 1 rgb
f
160.618 190.254 mo
160.618 190.254 160 186.566 163.032 185.408 cv
166.063 184.249 174.136 182.627 174.047 179.103 cv
173.959 175.578 168.39 178.116 168.39 178.116 cv
168.39 178.116 169.258 174.52 165.933 174.943 cv
162.609 175.366 161.48 178.327 161.48 178.327 cv
161.48 178.327 158.802 178.198 157.039 179.778 cv
155.277 181.358 156.052 184.742 156.052 184.742 cv
156.052 184.742 153.796 186.021 154.149 188.096 cv
154.501 190.171 155.917 191.671 155.917 191.671 cv
155.917 191.671 157.217 188.716 160.618 190.254 cv
cp
0 0 0 rgb
f
175.845 251.343 mo
194.777 251.343 li
195.774 251.343 196.583 250.534 196.583 249.537 cv
196.583 232.936 li
196.583 231.938 195.774 231.129 194.777 231.129 cv
175.845 231.129 li
174.847 231.129 174.039 231.938 174.039 232.936 cv
174.039 249.537 li
174.039 250.534 174.847 251.343 175.845 251.343 cv
cp
.909804 .509804 .109804 rgb
f
179.003 251.343 mo
197.935 251.343 li
198.932 251.343 199.741 250.534 199.741 249.537 cv
199.741 232.936 li
199.741 231.938 198.932 231.129 197.935 231.129 cv
179.003 231.129 li
178.005 231.129 177.197 231.938 177.197 232.936 cv
177.197 249.537 li
177.197 250.534 178.005 251.343 179.003 251.343 cv
cp
.976471 .678431 .384314 rgb
f
210.795 236.416 mo
210.795 240.248 213.901 243.354 217.733 243.354 cv
221.565 243.354 224.671 240.248 224.671 236.416 cv
224.671 232.585 221.565 229.479 217.733 229.479 cv
213.901 229.479 210.795 232.585 210.795 236.416 cv
cp
.94902 .317647 .231373 rgb
f
80.4834 376.982 mo
129.239 376.982 li
134.5 346.852 li
75.2231 346.852 li
80.4834 376.982 li
cp
129.505 377.617 mo
80.2168 377.617 li
80.0625 377.617 79.9307 377.506 79.9043 377.354 cv
74.5332 346.589 li
74.5171 346.496 74.5425 346.401 74.603 346.33 cv
74.6631 346.259 74.752 346.217 74.8457 346.217 cv
134.877 346.217 li
134.971 346.217 135.06 346.259 135.12 346.33 cv
135.18 346.401 135.206 346.496 135.189 346.589 cv
129.818 377.354 li
129.792 377.506 129.66 377.617 129.505 377.617 cv
cp
1 1 1 rgb
f
132.191 362.234 mo
77.5313 362.234 li
77.356 362.234 77.2139 362.092 77.2139 361.917 cv
77.2139 361.742 77.356 361.6 77.5313 361.6 cv
132.191 361.6 li
132.367 361.6 132.509 361.742 132.509 361.917 cv
132.509 362.092 132.367 362.234 132.191 362.234 cv
cp
f
104.464 377.617 mo
104.289 377.617 104.146 377.475 104.146 377.3 cv
104.146 345.879 li
104.146 345.704 104.289 345.562 104.464 345.562 cv
104.639 345.562 104.781 345.704 104.781 345.879 cv
104.781 377.3 li
104.781 377.475 104.639 377.617 104.464 377.617 cv
cp
f
116.825 377.617 mo
116.61 377.592 116.488 377.434 116.51 377.26 cv
120.453 346.494 li
120.476 346.32 120.636 346.195 120.808 346.22 cv
120.981 346.242 121.104 346.4 121.082 346.574 cv
117.139 377.34 li
117.119 377.5 116.982 377.617 116.825 377.617 cv
cp
f
91.894 377.617 mo
91.73 377.617 91.5913 377.49 91.5781 377.324 cv
89.1914 346.559 li
89.1777 346.384 89.3086 346.231 89.4834 346.218 cv
89.6606 346.201 89.8105 346.336 89.8242 346.51 cv
92.2109 377.275 li
92.2246 377.45 92.0938 377.603 91.9189 377.616 cv
91.894 377.617 li
cp
f
72.5723 348.531 mo
136.356 348.531 li
138.2 348.531 139.695 347.036 139.695 345.192 cv
139.695 343.349 138.2 341.854 136.356 341.854 cv
72.5723 341.854 li
70.7285 341.854 69.2334 343.349 69.2334 345.192 cv
69.2334 347.036 70.7285 348.531 72.5723 348.531 cv
cp
.94902 .317647 .231373 rgb
f
178.3 245.379 mo
178.3 245.379 185.079 241.148 185.925 242.253 cv
186.771 243.357 183.161 248.081 183.161 248.081 cv
186.201 251.343 li
195.494 251.343 li
194.515 252.373 li
194.515 252.373 196.844 252.312 196.559 253.792 cv
196.274 255.272 189.294 258.444 183.373 259.291 cv
177.451 260.137 169.059 251.939 169.059 251.939 cv
178.3 245.379 li
cp
.976471 .521569 .458824 rgb
f
194.515 252.69 mo
187.18 252.69 li
187.004 252.69 186.862 252.548 186.862 252.373 cv
186.862 252.198 187.004 252.056 187.18 252.056 cv
194.515 252.056 li
194.69 252.056 194.833 252.198 194.833 252.373 cv
194.833 252.548 194.69 252.69 194.515 252.69 cv
cp
0 0 0 rgb
f
151.22 225.103 mo
151.22 225.103 164.712 242.2 175.759 244.563 cv
186.805 246.926 173.741 254.638 173.741 254.638 cv
173.741 254.638 144.491 254.458 141.002 236.416 cv
138.827 225.168 151.22 225.103 151.22 225.103 cv
cp
.976471 .521569 .458824 rgb
f
160.235 202.886 mo
160.235 202.886 141.143 202.882 138.127 220.755 cv
135.944 233.696 143.985 245.955 143.985 245.955 cv
162.121 231.112 li
160.235 202.886 li
cp
.372549 .517647 .341176 rgb
f
194.515 234.708 mo
182.202 234.708 li
182.027 234.708 181.885 234.565 181.885 234.391 cv
181.885 234.216 182.027 234.073 182.202 234.073 cv
194.515 234.073 li
194.69 234.073 194.833 234.216 194.833 234.391 cv
194.833 234.565 194.69 234.708 194.515 234.708 cv
cp
.94902 .317647 .231373 rgb
f
194.515 238.547 mo
182.202 238.547 li
182.027 238.547 181.885 238.404 181.885 238.229 cv
181.885 238.055 182.027 237.912 182.202 237.912 cv
194.515 237.912 li
194.69 237.912 194.833 238.055 194.833 238.229 cv
194.833 238.404 194.69 238.547 194.515 238.547 cv
cp
f
224.316 240.245 mo
224.316 240.245 230.199 239.182 228.2 236.573 cv
226.201 233.965 215.394 233.354 214.458 236.629 cv
213.522 239.903 224.316 240.245 224.316 240.245 cv
cp
.976471 .521569 .458824 rgb
f
223.991 245.18 mo
223.991 245.18 229.874 244.117 227.875 241.509 cv
225.875 238.9 215.069 238.29 214.133 241.564 cv
213.197 244.839 223.991 245.18 223.991 245.18 cv
cp
f
220.793 249.487 mo
222.105 249.832 223.489 249.886 224.793 249.51 cv
225.947 249.178 226.932 248.524 226.257 247.236 cv
224.907 244.66 215.576 242.499 214.266 245.213 cv
213.293 247.228 218.199 248.807 220.793 249.487 cv
cp
f
225.821 240.173 mo
218.732 239.708 li
218.558 239.696 218.425 239.546 218.437 239.371 cv
218.449 239.195 218.604 239.051 218.774 239.075 cv
225.841 239.539 li
226.016 239.551 226.148 239.701 226.137 239.876 cv
226.126 240.044 225.986 240.173 225.821 240.173 cv
cp
0 0 0 rgb
f
223.297 245.463 mo
223.239 245.458 li
216.881 244.292 li
216.709 244.26 216.595 244.095 216.626 243.922 cv
216.658 243.75 216.825 243.638 216.996 243.667 cv
223.354 244.833 li
223.526 244.865 223.64 245.03 223.608 245.203 cv
223.581 245.355 223.447 245.463 223.297 245.463 cv
cp
f
218.754 229.874 mo
218.542 229.852 218.418 229.693 218.438 229.52 cv
218.852 226.024 223.242 225.844 223.286 225.842 cv
223.465 225.83 223.607 225.974 223.613 226.148 cv
223.619 226.324 223.482 226.471 223.307 226.477 cv
223.148 226.481 219.417 226.642 219.068 229.594 cv
219.049 229.755 218.913 229.874 218.754 229.874 cv
cp
.313726 .470588 .286275 rgb
f
187.179 354.046 mo
187.015 354.046 186.876 353.919 186.863 353.752 cv
186.82 353.181 182.383 296.413 167.805 279.558 cv
167.69 279.425 167.705 279.225 167.837 279.109 cv
167.97 278.996 168.17 279.01 168.284 279.142 cv
183 296.155 187.453 353.131 187.496 353.705 cv
187.509 353.879 187.378 354.031 187.204 354.045 cv
187.179 354.046 li
cp
1 1 1 rgb
f
146.652 263.412 mo
146.44 263.412 146.225 263.402 146.004 263.38 cv
145.83 263.362 145.703 263.207 145.72 263.033 cv
145.738 262.858 145.898 262.734 146.068 262.749 cv
150.065 263.131 152.725 259.216 152.751 259.176 cv
152.848 259.031 153.044 258.991 153.191 259.087 cv
153.337 259.185 153.377 259.381 153.28 259.527 cv
153.169 259.693 150.648 263.412 146.652 263.412 cv
cp
f
140.115 354.046 mo
139.915 354.031 139.784 353.879 139.798 353.704 cv
146.837 263.07 li
146.851 262.896 147.008 262.759 147.178 262.778 cv
147.353 262.792 147.483 262.944 147.47 263.119 cv
140.431 353.753 li
140.417 353.919 140.279 354.046 140.115 354.046 cv
cp
f
155.85 222.19 mo
155.759 222.197 li
155.579 222.222 155.525 222.295 155.496 222.362 cv
155.215 223.021 156.324 225.109 157.433 226.787 cv
157.337 225.256 157.037 223.03 156.272 222.363 cv
156.138 222.247 156.002 222.19 155.85 222.19 cv
cp
157.788 228.175 mo
157.688 228.175 157.592 228.128 157.531 228.044 cv
156.99 227.299 154.317 223.509 154.913 222.113 cv
155.004 221.899 155.209 221.632 155.673 221.568 cv
156.044 221.519 156.394 221.628 156.689 221.886 cv
158.06 223.081 158.105 227.372 158.105 227.857 cv
158.105 227.994 158.017 228.116 157.886 228.159 cv
157.788 228.175 li
cp
f
793.112 178.654 mo
793.112 178.654 789.648 178.09 789.578 187.255 cv
789.507 196.42 789.578 197.407 789.578 197.407 cv
798.083 197.407 li
796.469 181.157 li
793.112 178.654 li
cp
0 0 0 rgb
f
806.724 175.972 mo
806.724 175.972 810.066 180.261 811.608 186.34 cv
812.841 191.203 813.677 196.319 813.677 196.319 cv
804.334 197.407 li
804.058 181.079 li
806.724 175.972 li
cp
f
789.139 354.459 mo
783.486 363.439 li
769.961 354.926 li
775.614 345.945 li
789.139 354.459 li
cp
.976471 .521569 .458824 rgb
f
819.986 347.056 mo
827.782 360.657 li
813.916 368.604 li
806.12 355.002 li
819.986 347.056 li
cp
f
817.13 251.635 mo
817.13 251.635 821.993 267.912 817.92 288.305 cv
813.847 308.696 796.167 360.126 794.323 359.504 cv
792.48 358.882 769.756 347.311 768.162 345.375 cv
766.568 343.44 788.866 291.325 788.866 291.325 cv
799.516 251.979 li
817.13 251.635 li
cp
.968627 .772549 .215686 rgb
f
781.115 249.108 mo
781.115 249.108 775.074 258.5 779.476 286.799 cv
783.385 311.934 805.664 361.456 805.664 361.456 cv
805.664 361.456 830.935 347.269 831.564 346.61 cv
832.194 345.952 808.603 274.079 808.603 274.079 cv
817.13 249.108 li
781.115 249.108 li
cp
f
815.582 295.782 mo
815.457 295.782 815.338 295.707 815.288 295.584 cv
814.261 293.046 805.248 270.744 805.237 269.246 cv
805.236 269.107 805.326 268.984 805.458 268.942 cv
814.03 266.193 li
814.198 266.139 814.375 266.231 814.429 266.398 cv
814.482 266.565 814.391 266.744 814.224 266.797 cv
805.908 269.464 li
806.41 271.626 812.038 285.867 815.876 295.346 cv
815.941 295.508 815.863 295.693 815.701 295.759 cv
815.582 295.782 li
cp
.678431 .301961 .25098 rgb
f
798.763 347.202 mo
798.637 347.202 798.519 347.127 798.469 347.003 cv
797.944 345.7 785.612 314.999 784.271 307.13 cv
784.242 306.957 784.358 306.793 784.53 306.764 cv
784.709 306.734 784.867 306.851 784.896 307.022 cv
786.227 314.825 798.929 346.448 799.057 346.767 cv
799.122 346.929 799.044 347.113 798.881 347.179 cv
798.763 347.202 li
cp
f
810.803 367.13 mo
810.803 367.13 811.109 363.235 815.089 361.622 cv
818.024 360.432 821.966 361.622 821.966 361.622 cv
821.966 361.622 822.183 355.355 824.398 353.663 cv
826.615 351.972 830.215 355.063 830.215 355.063 cv
830.215 355.063 853.837 349.321 856.092 354.692 cv
858.347 360.064 848.837 364.953 848.837 364.953 cv
848.837 364.953 819.471 382.077 818.397 381.866 cv
817.323 381.654 810.803 367.13 810.803 367.13 cv
cp
.94902 .317647 .231373 rgb
f
832.964 361.939 mo
832.87 361.925 li
832.703 361.873 832.609 361.696 832.661 361.528 cv
832.681 361.463 834.754 354.943 840.849 353.356 cv
841.022 353.308 841.191 353.414 841.235 353.583 cv
841.28 353.753 841.179 353.926 841.009 353.97 cv
835.262 355.468 833.286 361.653 833.267 361.716 cv
833.225 361.852 833.1 361.939 832.964 361.939 cv
cp
1 .698039 .333333 rgb
f
780.883 359.551 mo
780.883 359.551 780.566 355.927 777.99 352.506 cv
775.413 349.086 772.141 349.612 772.141 349.612 cv
766.929 358.425 li
766.434 359.261 766.415 360.295 766.881 361.147 cv
769.251 365.491 776.467 378.64 777.053 378.836 cv
777.756 379.069 806.586 380.714 807.749 379.774 cv
808.911 378.836 806.032 370.168 800.562 368.528 cv
795.091 366.889 795.091 366.889 795.091 366.889 cv
791.405 363.054 li
791.405 363.054 791.108 357.473 787.36 356.559 cv
783.612 355.645 780.883 359.551 780.883 359.551 cv
cp
.94902 .317647 .231373 rgb
f
791.405 368.922 mo
791.304 368.922 791.204 368.873 791.143 368.782 cv
791.044 368.637 791.082 368.439 791.228 368.342 cv
791.935 367.863 794.31 366.317 795.182 366.585 cv
795.35 366.635 795.445 366.812 795.395 366.979 cv
795.345 367.147 795.168 367.247 795 367.192 cv
794.607 367.082 792.919 367.965 791.583 368.867 cv
791.405 368.922 li
cp
1 .698039 .333333 rgb
f
803.345 204.52 mo
801.458 204.52 799.04 204.023 796.689 202.127 cv
796.553 202.017 796.532 201.817 796.642 201.681 cv
796.751 201.543 796.952 201.524 797.088 201.633 cv
801.69 205.345 806.55 203.357 806.6 203.337 cv
806.757 203.269 806.946 203.343 807.016 203.505 cv
807.084 203.666 807.009 203.853 806.848 203.921 cv
806.82 203.933 805.396 204.52 803.345 204.52 cv
cp
.968627 .772549 .215686 rgb
f
793.494 245.103 mo
789.906 245.103 784.672 244.909 779.423 244.028 cv
779.25 244 779.134 243.836 779.163 243.663 cv
779.191 243.492 779.348 243.375 779.528 243.403 cv
788.769 244.952 797.969 244.356 798.062 244.351 cv
798.259 244.327 798.389 244.472 798.399 244.646 cv
798.411 244.82 798.279 244.972 798.104 244.983 cv
798.064 244.986 796.273 245.103 793.494 245.103 cv
cp
f
845.618 228.152 mo
849.266 227.403 li
849.266 227.403 850.25 229.093 852.942 228.762 cv
854.694 228.545 856.813 226.882 856.813 226.882 cv
856.813 226.882 855.464 229.5 857.063 230.105 cv
858.662 230.712 865.679 225.42 864.962 223.486 cv
864.573 222.437 862.924 221.818 862.924 221.818 cv
862.924 221.818 864.987 219.158 863.328 217.962 cv
861.669 216.767 860.36 217.496 860.36 217.496 cv
860.36 217.496 862.415 215.493 859.234 214.205 cv
856.053 212.917 844.359 218.493 844.359 218.493 cv
845.618 228.152 li
cp
.976471 .521569 .458824 rgb
f
805.335 199.881 mo
805.335 199.881 810.831 201.032 817.42 209.163 cv
822.94 215.975 826.734 223.696 827.912 224.367 cv
829.09 225.038 842.153 217.093 843.451 217.391 cv
844.749 217.688 853.456 232.392 853.456 232.392 cv
853.456 232.392 833.086 247.267 823.959 245.482 cv
814.833 243.698 808.129 233.301 808.129 233.301 cv
805.335 199.881 li
cp
.313726 .470588 .286275 rgb
f
803.638 200.486 mo
803.638 200.486 811.291 201.646 815.106 210.505 cv
818.922 219.364 818.013 232.181 818.013 232.181 cv
818.013 232.181 819.183 250.426 816.974 251.331 cv
814.765 252.236 804.902 253.688 796.813 252.135 cv
788.956 250.625 783.922 247.527 783.922 247.527 cv
783.922 247.527 782.671 210.779 785.726 204.236 cv
788.779 197.694 803.638 200.486 803.638 200.486 cv
cp
.709804 .415686 .301961 rgb
f
805.817 200.579 mo
805.817 200.579 808.136 201.191 810.423 202.822 cv
812.71 204.454 814.593 207.023 814.593 207.023 cv
818.729 220.037 li
818.729 220.037 822.957 263.402 822.712 263.959 cv
822.466 264.515 818.773 262.849 818.062 262.925 cv
817.35 263 809.764 203.124 805.817 200.579 cv
cp
.313726 .470588 .286275 rgb
f
827.375 225.578 mo
826.558 227.724 825.827 230.375 826.341 230.934 cv
826.432 231.031 826.604 231.038 826.857 230.955 cv
828.091 230.55 827.752 227.468 827.375 225.578 cv
cp
826.556 231.646 mo
826.221 231.646 826.006 231.506 825.874 231.363 cv
824.794 230.189 826.761 225.353 827.166 224.395 cv
827.219 224.27 827.345 224.188 827.48 224.202 cv
827.615 224.212 827.729 224.306 827.765 224.438 cv
827.937 225.086 829.378 230.794 827.055 231.559 cv
826.864 231.621 826.699 231.646 826.556 231.646 cv
cp
1 .698039 .333333 rgb
f
796.728 198.708 mo
796.728 198.708 797.604 199.967 797.191 200.438 cv
796.284 201.475 797.993 266.494 797.548 266.93 cv
797.102 267.365 789.169 268.285 783.751 266.643 cv
778.332 264.999 776.291 262.811 776.002 262.172 cv
775.712 261.533 781.155 211.031 781.581 208.987 cv
782.006 206.943 786.456 198.202 796.728 198.708 cv
cp
.313726 .470588 .286275 rgb
f
831.974 250.613 mo
808.88 250.613 li
808.88 258.015 li
831.974 258.015 li
831.974 250.613 li
cp
805.073 259.918 mo
805.073 248.71 li
805.073 247.659 805.925 246.807 806.977 246.807 cv
833.878 246.807 li
834.929 246.807 835.781 247.659 835.781 248.71 cv
835.781 259.918 li
835.781 260.969 834.929 261.821 833.878 261.821 cv
806.977 261.821 li
805.925 261.821 805.073 260.969 805.073 259.918 cv
cp
0 0 0 rgb
f
809.078 239.754 mo
809.078 239.754 818.822 239.17 822.313 241.69 cv
825.805 244.21 826.16 252.541 825.634 253.257 cv
825.106 253.973 823.896 253.637 823.896 253.637 cv
823.896 253.637 823.766 255.167 822.999 255.635 cv
822.233 256.103 821.095 255.149 821.095 255.149 cv
821.095 255.149 819.744 256.614 818.406 256.006 cv
817.068 255.397 816.756 253.73 816.974 252.968 cv
817.119 252.459 817.044 251.673 817.044 251.673 cv
816.283 251.846 li
816.283 251.846 814.92 253.345 811.589 252.871 cv
808.258 252.396 805.335 247.021 805.335 247.021 cv
809.078 239.754 li
cp
.976471 .521569 .458824 rgb
f
810.831 235.22 mo
808.323 251.581 li
808.323 251.581 785.002 253.507 775.338 238.523 cv
765.675 223.541 780.906 202.47 788.779 201.332 cv
793.59 200.637 793.711 227.449 793.711 227.449 cv
810.831 235.22 li
cp
.313726 .470588 .286275 rgb
f
798.455 229.92 mo
798.348 229.901 li
790.244 226.987 li
790.079 226.928 789.994 226.746 790.053 226.581 cv
790.112 226.417 790.298 226.331 790.459 226.39 cv
798.563 229.304 li
798.728 229.363 798.813 229.545 798.754 229.71 cv
798.707 229.839 798.585 229.92 798.455 229.92 cv
cp
1 .698039 .333333 rgb
f
792.046 222.717 mo
791.849 222.808 li
791.751 222.903 791.71 223.022 791.72 223.183 cv
791.787 224.271 793.912 226.271 795.432 227.539 cv
794.428 225.422 792.977 222.897 792.113 222.724 cv
792.046 222.717 li
cp
796.261 228.924 mo
796.069 228.859 li
795.572 228.483 791.205 225.133 791.086 223.222 cv
791.065 222.878 791.176 222.577 791.407 222.353 cv
791.641 222.126 791.926 222.037 792.239 222.103 cv
793.938 222.444 796.29 227.865 796.553 228.482 cv
796.609 228.614 796.569 228.768 796.456 228.856 cv
796.261 228.924 li
cp
f
796.728 193.38 mo
796.889 200.611 li
796.889 200.611 798.238 202.66 802.476 202.91 cv
805.633 203.097 806.724 202.359 806.724 202.359 cv
806.203 198.708 li
805.69 195.146 li
798.016 193.636 li
796.728 193.38 li
cp
.976471 .521569 .458824 rgb
f
798.016 193.636 mo
798.038 193.833 798.118 194.064 798.241 194.329 cv
799.939 197.904 804.38 198.585 806.203 198.708 cv
805.69 195.146 li
798.016 193.636 li
cp
0 0 0 rgb
f
806.937 178.629 mo
806.937 178.629 810.933 187.611 809.549 192.681 cv
808.165 197.75 803.549 196.985 800.783 196.025 cv
798.019 195.065 796.727 193.382 796.727 193.382 cv
796.727 193.382 794.156 194.273 792.416 191.889 cv
790.677 189.504 791.72 186.745 793.187 186.104 cv
794.653 185.464 796.41 186.515 796.41 186.515 cv
795.021 183.906 li
795.021 183.906 800.702 170.564 806.937 178.629 cv
cp
.976471 .521569 .458824 rgb
f
806.598 190.108 mo
806.504 190.094 li
806.337 190.042 806.243 189.864 806.295 189.697 cv
806.802 188.057 805.57 186.273 805.558 186.255 cv
805.457 186.112 805.492 185.914 805.635 185.813 cv
805.777 185.712 805.975 185.747 806.077 185.89 cv
806.135 185.973 807.501 187.944 806.9 189.884 cv
806.858 190.021 806.733 190.108 806.598 190.108 cv
cp
0 0 0 rgb
f
796.027 190.77 mo
795.797 190.67 li
793.35 188.078 li
793.229 187.95 793.235 187.75 793.362 187.629 cv
793.49 187.508 793.689 187.515 793.811 187.642 cv
796.258 190.235 li
796.378 190.362 796.372 190.563 796.245 190.683 cv
796.027 190.77 li
cp
f
793.438 190.075 mo
793.283 190.075 793.147 189.962 793.124 189.805 cv
793.098 189.632 793.217 189.47 793.39 189.444 cv
795.082 189.188 li
795.262 189.161 795.417 189.281 795.443 189.454 cv
795.47 189.627 795.351 189.789 795.178 189.815 cv
793.485 190.071 li
793.438 190.075 li
cp
f
858.272 233.055 mo
851.021 228.654 li
850.57 228.381 850.426 227.793 850.7 227.342 cv
859.571 212.722 li
859.845 212.271 860.433 212.127 860.884 212.4 cv
868.135 216.801 li
868.586 217.074 868.73 217.662 868.456 218.113 cv
859.586 232.733 li
859.312 233.185 858.724 233.328 858.272 233.055 cv
cp
.717647 .333333 .258824 rgb
f
857.191 232.398 mo
849.939 227.998 li
849.488 227.725 849.345 227.137 849.618 226.686 cv
858.489 212.065 li
858.764 211.614 859.351 211.471 859.803 211.744 cv
867.054 216.145 li
867.505 216.418 867.648 217.006 867.375 217.457 cv
858.504 232.077 li
858.23 232.528 857.643 232.672 857.191 232.398 cv
cp
0 0 0 rgb
f
857.17 230.452 mo
851.676 227.118 li
851.317 226.9 851.203 226.434 851.421 226.075 cv
858.78 213.946 li
858.998 213.588 859.465 213.474 859.823 213.691 cv
865.317 217.024 li
865.676 217.242 865.79 217.709 865.572 218.068 cv
858.213 230.196 li
857.995 230.555 857.528 230.669 857.17 230.452 cv
cp
1 .972549 .960784 rgb
f
860.776 223.455 mo
860.013 224.714 858.372 225.115 857.113 224.352 cv
855.854 223.587 855.453 221.947 856.217 220.688 cv
856.98 219.429 858.621 219.027 859.88 219.792 cv
861.14 220.556 861.54 222.195 860.776 223.455 cv
cp
.313726 .470588 .286275 rgb
f
857.978 223.244 mo
857.857 223.244 857.745 223.176 857.691 223.063 cv
856.904 221.416 li
856.829 221.258 856.896 221.068 857.054 220.993 cv
857.21 220.916 857.4 220.984 857.477 221.143 cv
858.156 222.565 li
860.551 222.071 li
860.728 222.032 860.89 222.147 860.926 222.317 cv
860.961 222.489 860.851 222.657 860.68 222.692 cv
858.042 223.237 li
857.978 223.244 li
cp
1 .698039 .333333 rgb
f
802.327 191.225 mo
802.523 191.542 802.829 191.907 803.274 192.129 cv
803.748 192.367 804.241 192.181 804.581 191.974 cv
802.327 191.225 li
cp
803.75 192.878 mo
803.506 192.878 803.25 192.827 802.991 192.697 cv
801.823 192.113 801.437 190.834 801.421 190.78 cv
801.388 190.667 801.42 190.544 801.505 190.462 cv
801.59 190.38 801.714 190.352 801.825 190.389 cv
805.347 191.56 li
805.451 191.594 805.529 191.68 805.556 191.786 cv
805.581 191.893 805.551 192.004 805.474 192.083 cv
805.435 192.123 804.683 192.878 803.75 192.878 cv
cp
0 0 0 rgb
f
800.952 183.531 mo
800.807 183.496 li
800.651 183.416 800.59 183.224 800.67 183.068 cv
801.29 181.862 802.816 182.176 802.883 182.189 cv
803.054 182.227 803.161 182.395 803.125 182.565 cv
803.089 182.736 802.928 182.847 802.749 182.81 cv
802.704 182.8 801.632 182.585 801.234 183.358 cv
801.178 183.468 801.067 183.531 800.952 183.531 cv
cp
f
805.817 182.494 mo
805.638 182.438 li
805.493 182.339 805.457 182.142 805.556 181.997 cv
805.811 181.624 806.14 181.41 806.534 181.361 cv
807.327 181.264 808.07 181.911 808.101 181.938 cv
808.231 182.055 808.244 182.254 808.128 182.386 cv
808.013 182.517 807.813 182.53 807.681 182.415 cv
807.526 182.279 807.023 181.939 806.61 181.991 cv
806.402 182.018 806.229 182.137 806.079 182.355 cv
806.018 182.445 805.918 182.494 805.817 182.494 cv
cp
f
802.68 203.357 mo
800.677 203.357 798.347 202.822 796.646 200.816 cv
796.533 200.682 796.55 200.482 796.684 200.369 cv
796.817 200.256 797.019 200.272 797.131 200.406 cv
800.472 204.351 806.55 202.086 806.61 202.063 cv
806.772 202.001 806.958 202.083 807.02 202.246 cv
807.082 202.41 807.001 202.593 806.837 202.655 cv
806.802 202.669 804.951 203.357 802.68 203.357 cv
cp
1 .698039 .333333 rgb
f
802.517 186.748 mo
802.359 186.748 802.223 186.631 802.202 186.471 cv
801.987 184.792 li
802.034 184.582 li
802.548 183.771 li
802.641 183.623 802.839 183.581 802.985 183.673 cv
803.133 183.767 803.177 183.963 803.083 184.111 cv
802.631 184.825 li
802.831 186.391 li
802.854 186.564 802.73 186.723 802.557 186.745 cv
802.517 186.748 li
cp
0 0 0 rgb
f
803.536 291.6 mo
839.625 291.6 li
839.625 274.778 li
839.625 273.183 838.331 271.889 836.735 271.889 cv
806.427 271.889 li
804.83 271.889 803.536 273.183 803.536 274.778 cv
803.536 291.6 li
cp
.909804 .509804 .109804 rgb
f
811.775 291.6 mo
837.122 291.6 li
837.122 282.758 li
837.122 281.775 836.326 280.979 835.344 280.979 cv
813.553 280.979 li
812.571 280.979 811.775 281.775 811.775 282.758 cv
811.775 291.6 li
cp
1 .631373 .262745 rgb
f
807.499 186.348 mo
807.344 186.348 807.208 186.234 807.186 186.077 cv
806.938 184.403 li
807 184.164 li
807.639 183.326 li
807.745 183.186 807.943 183.161 808.083 183.266 cv
808.223 183.373 808.249 183.571 808.143 183.711 cv
807.585 184.442 li
807.813 185.984 li
807.839 186.157 807.719 186.318 807.545 186.344 cv
807.499 186.348 li
cp
0 0 0 rgb
f
808.753 180.699 mo
808.753 180.699 805.846 180.558 804.117 180.699 cv
802.389 180.84 802.389 180.84 802.389 180.84 cv
801.494 178.654 li
801.494 181.192 li
801.494 181.192 799.718 181.896 799.198 182.46 cv
798.679 183.025 797.945 184.435 797.945 184.435 cv
797.003 183.213 li
797.565 188.454 li
797.565 188.454 796.681 186.041 794.978 186.073 cv
793.275 186.104 792.733 186.431 792.733 186.431 cv
792.733 186.431 791.285 181.404 791.531 179.994 cv
791.777 178.583 793.112 178.654 793.112 178.654 cv
793.112 178.654 794.517 173.86 801.422 173.86 cv
808.326 173.86 808.753 180.699 808.753 180.699 cv
cp
f
795.565 291.282 mo
844.32 291.282 li
849.581 261.152 li
790.305 261.152 li
795.565 291.282 li
cp
844.587 291.917 mo
795.299 291.917 li
795.145 291.917 795.013 291.806 794.986 291.654 cv
789.615 260.89 li
789.599 260.797 789.625 260.702 789.685 260.631 cv
789.745 260.56 789.834 260.518 789.928 260.518 cv
849.959 260.518 li
850.053 260.518 850.142 260.56 850.202 260.631 cv
850.262 260.702 850.288 260.797 850.271 260.89 cv
844.899 291.654 li
844.873 291.806 844.741 291.917 844.587 291.917 cv
cp
1 1 1 rgb
f
847.273 276.534 mo
792.613 276.534 li
792.438 276.534 792.296 276.392 792.296 276.217 cv
792.296 276.042 792.438 275.899 792.613 275.899 cv
847.273 275.899 li
847.448 275.899 847.591 276.042 847.591 276.217 cv
847.591 276.392 847.448 276.534 847.273 276.534 cv
cp
f
819.546 291.917 mo
819.371 291.917 819.229 291.774 819.229 291.6 cv
819.229 260.18 li
819.229 260.005 819.371 259.862 819.546 259.862 cv
819.721 259.862 819.863 260.005 819.863 260.18 cv
819.863 291.6 li
819.863 291.774 819.721 291.917 819.546 291.917 cv
cp
f
831.906 291.917 mo
831.692 291.892 831.569 291.733 831.592 291.56 cv
835.535 260.795 li
835.558 260.622 835.706 260.492 835.89 260.521 cv
836.063 260.543 836.187 260.701 836.164 260.875 cv
832.221 291.64 li
832.2 291.8 832.063 291.917 831.906 291.917 cv
cp
f
806.977 291.917 mo
806.813 291.917 806.673 291.79 806.66 291.624 cv
804.273 260.859 li
804.26 260.685 804.391 260.532 804.565 260.519 cv
804.741 260.504 804.894 260.637 804.906 260.811 cv
807.293 291.575 li
807.307 291.75 807.176 291.902 807.001 291.916 cv
806.977 291.917 li
cp
f
787.654 262.832 mo
851.438 262.832 li
853.282 262.832 854.776 261.337 854.776 259.493 cv
854.776 257.648 853.282 256.154 851.438 256.154 cv
787.654 256.154 li
785.811 256.154 784.315 257.648 784.315 259.493 cv
784.315 261.337 785.811 262.832 787.654 262.832 cv
cp
.94902 .317647 .231373 rgb
f
823.896 253.954 mo
823.715 253.95 823.575 253.805 823.579 253.63 cv
823.58 253.583 823.667 248.964 822.451 246.972 cv
822.359 246.822 822.407 246.627 822.557 246.536 cv
822.707 246.444 822.901 246.49 822.992 246.642 cv
824.305 248.792 824.218 253.446 824.214 253.644 cv
824.21 253.816 824.068 253.954 823.896 253.954 cv
cp
0 0 0 rgb
f
821.095 255.467 mo
820.887 255.446 820.761 255.29 820.779 255.115 cv
820.784 255.07 821.239 250.589 819.326 248.747 cv
819.199 248.626 819.196 248.425 819.317 248.299 cv
819.439 248.171 819.64 248.168 819.766 248.29 cv
821.904 250.348 821.432 254.987 821.41 255.184 cv
821.393 255.346 821.255 255.467 821.095 255.467 cv
cp
f
853.087 218.957 mo
853.087 218.957 858.241 218.055 858.027 219.974 cv
857.813 221.893 853.336 222.479 853.336 222.479 cv
853.336 222.479 850.26 224.914 847.598 222.301 cv
853.087 218.957 li
cp
.976471 .521569 .458824 rgb
f
850.372 223.822 mo
849.424 223.822 848.371 223.504 847.375 222.527 cv
847.25 222.404 847.248 222.203 847.371 222.078 cv
847.493 221.954 847.692 221.951 847.82 222.074 cv
850.255 224.468 853.022 222.322 853.139 222.229 cv
853.295 222.164 li
854.472 222.01 857.56 221.309 857.712 219.938 cv
857.732 219.754 857.686 219.618 857.56 219.499 cv
856.904 218.885 854.502 219.031 853.142 219.27 cv
852.96 219.296 852.805 219.184 852.774 219.012 cv
852.744 218.839 852.859 218.675 853.032 218.645 cv
853.424 218.576 856.895 218.004 857.993 219.037 cv
858.265 219.292 858.385 219.628 858.343 220.009 cv
858.118 222.024 854.215 222.675 853.459 222.782 cv
853.147 223.004 851.895 223.821 850.372 223.822 cv
cp
0 0 0 rgb
f
990.18 278.395 mo
1013.27 278.395 li
1013.27 270.994 li
990.18 270.994 li
990.18 278.395 li
cp
1015.18 282.201 mo
988.275 282.201 li
987.225 282.201 986.372 281.349 986.372 280.298 cv
986.372 269.091 li
986.372 268.039 987.225 267.187 988.275 267.187 cv
1015.18 267.187 li
1016.23 267.187 1017.08 268.039 1017.08 269.091 cv
1017.08 280.298 li
1017.08 281.349 1016.23 282.201 1015.18 282.201 cv
cp
f
998.873 312.001 mo
993.317 312.001 li
992.811 312.001 992.4 311.591 992.4 311.084 cv
992.4 298.412 li
992.4 296.731 993.763 295.368 995.443 295.368 cv
996.747 295.368 li
998.428 295.368 999.791 296.731 999.791 298.412 cv
999.791 311.084 li
999.791 311.591 999.38 312.001 998.873 312.001 cv
cp
.976471 .678431 .384314 rgb
f
997.521 295.894 mo
994.615 295.894 li
994.615 292.988 li
997.521 292.988 li
997.521 295.894 li
cp
f
997.682 293.944 mo
994.453 293.944 li
993.925 293.944 993.497 293.517 993.497 292.988 cv
993.497 292.46 993.925 292.031 994.453 292.031 cv
997.682 292.031 li
998.21 292.031 998.639 292.46 998.639 292.988 cv
998.639 293.517 998.21 293.944 997.682 293.944 cv
cp
.94902 .317647 .231373 rgb
f
993.849 309.764 mo
993.674 309.764 993.531 309.621 993.531 309.446 cv
993.531 299.53 li
993.531 299.355 993.674 299.213 993.849 299.213 cv
994.023 299.213 994.166 299.355 994.166 299.53 cv
994.166 309.446 li
994.166 309.621 994.023 309.764 993.849 309.764 cv
cp
.678431 .301961 .25098 rgb
f
1007.13 311.896 mo
1012.69 311.896 li
1013.2 311.896 1013.61 311.484 1013.61 310.979 cv
1013.61 298.306 li
1013.61 296.625 1012.24 295.263 1010.56 295.263 cv
1009.26 295.263 li
1007.58 295.263 1006.21 296.625 1006.21 298.306 cv
1006.21 310.979 li
1006.21 311.484 1006.63 311.896 1007.13 311.896 cv
cp
.976471 .678431 .384314 rgb
f
1008.49 295.788 mo
1011.39 295.788 li
1011.39 292.882 li
1008.49 292.882 li
1008.49 295.788 li
cp
f
1008.32 293.839 mo
1011.55 293.839 li
1012.08 293.839 1012.51 293.41 1012.51 292.882 cv
1012.51 292.354 1012.08 291.926 1011.55 291.926 cv
1008.32 291.926 li
1007.8 291.926 1007.37 292.354 1007.37 292.882 cv
1007.37 293.41 1007.8 293.839 1008.32 293.839 cv
cp
.94902 .317647 .231373 rgb
f
1012.16 309.658 mo
1011.98 309.658 1011.84 309.516 1011.84 309.341 cv
1011.84 299.425 li
1011.84 299.25 1011.98 299.107 1012.16 299.107 cv
1012.33 299.107 1012.47 299.25 1012.47 299.425 cv
1012.47 309.341 li
1012.47 309.516 1012.33 309.658 1012.16 309.658 cv
cp
.678431 .301961 .25098 rgb
f
943.934 351.834 mo
943.934 360.822 li
927.014 360.188 li
927.014 351.834 li
943.934 351.834 li
cp
.976471 .521569 .458824 rgb
f
983.001 350.821 mo
983.001 359.81 li
967.339 359.175 li
967.339 350.821 li
983.001 350.821 li
cp
f
950.108 252.599 mo
950.108 252.599 936.773 271.079 929.537 302.04 cv
922.937 330.279 921.515 353.636 921.515 353.636 cv
950.063 353.636 li
950.063 353.636 953.239 330.61 954.085 321.5 cv
954.932 312.39 957.746 300.195 957.746 300.195 cv
957.746 300.195 961.664 352.746 962.598 353.636 cv
963.532 354.525 990.861 353.832 990.568 352.625 cv
990.275 351.418 985.652 274.719 984.912 268.973 cv
982.637 251.309 950.108 252.599 950.108 252.599 cv
cp
1 .698039 .333333 rgb
f
913.414 220.131 mo
913.414 220.131 907.53 212.798 905.184 213.742 cv
902.837 214.686 907.945 220.609 907.945 220.609 cv
900.663 221.272 li
900.663 221.272 892.73 222.75 891.641 224.038 cv
890.551 225.326 893.945 226.468 893.945 226.468 cv
893.945 226.468 888.245 227.414 890.13 229.494 cv
892.016 231.575 896.099 231.301 896.099 231.301 cv
896.099 231.301 890.397 231.962 892.886 234.263 cv
894.232 235.506 908.085 236.734 915.17 232.974 cv
922.255 229.212 916.69 222.541 916.69 222.541 cv
913.414 220.131 li
cp
.976471 .521569 .458824 rgb
f
960.893 207.171 mo
960.893 207.171 949.221 208.018 942.453 213.938 cv
935.686 219.86 930.906 226.788 929.426 227.76 cv
927.945 228.731 914.959 220.832 914.959 220.832 cv
914.959 220.832 908.402 238.888 908.614 239.733 cv
908.825 240.58 923.207 250.816 933.798 251.909 cv
942.877 252.846 952.604 242.49 952.604 242.49 cv
960.893 207.171 li
cp
.709804 .415686 .301961 rgb
f
976.29 263.629 mo
976.29 263.629 951.474 264.567 948.905 260.599 cv
944.759 254.188 951.474 236.271 951.474 236.271 cv
960.893 207.171 li
970.37 208.368 li
976.187 235.495 li
976.29 263.629 li
cp
1 1 1 rgb
f
1005.96 259.547 mo
1005.96 259.547 1009.71 262.288 1009.29 267.679 cv
1008.86 273.069 1006.68 273.937 1005.62 274.061 cv
1004.56 274.185 1004.14 274.061 1004.14 274.061 cv
1004.14 274.061 1003.01 274.804 1001.74 274.681 cv
1000.47 274.557 999.979 273.751 999.979 273.751 cv
999.979 273.751 997.724 274.185 996.878 273.937 cv
996.032 273.688 995.115 272.326 995.115 271.954 cv
995.115 271.582 995.299 267.187 995.299 267.187 cv
991.695 267.187 li
990.708 266.382 992.789 259.128 992.789 259.128 cv
992.789 259.128 1004.29 257.729 1005.96 259.547 cv
cp
.976471 .521569 .458824 rgb
f
963.451 374.667 mo
963.451 376.253 963.984 378.068 965.075 378.524 cv
966.167 378.981 974.999 379.934 982.727 379.261 cv
990.125 378.613 991.66 378.068 992.206 377.396 cv
992.473 377.053 991.952 375.467 991.355 373.932 cv
991.254 373.69 li
990.949 372.916 990.633 372.167 990.404 371.635 cv
990.176 371.127 989.896 370.645 989.566 370.175 cv
988.767 369.071 987.181 366.787 986.774 365.606 cv
986.242 364.033 985.43 360.633 984.884 359.033 cv
984.339 357.46 983.006 357.13 983.006 357.13 cv
983.006 357.13 967.791 356.09 966.699 357.003 cv
965.621 357.904 965.075 365.391 965.075 366.521 cv
965.075 367.649 li
965.075 368.703 964.353 370.784 963.883 372.51 cv
963.756 372.941 963.654 373.348 963.578 373.716 cv
963.502 374.084 963.451 374.4 963.451 374.667 cv
cp
.968627 .772549 .215686 rgb
f
970.402 204.704 mo
970.355 210.151 li
970.355 210.151 968.276 211.868 965.647 211.869 cv
962.098 211.87 960.893 209.124 960.893 209.124 cv
961.026 202.739 li
970.402 204.704 li
cp
.976471 .521569 .458824 rgb
f
970.402 204.563 mo
970.402 204.563 968.256 208.969 964.237 208.299 cv
960.998 207.759 961.029 203.188 961.029 203.188 cv
970.402 204.563 li
cp
0 0 0 rgb
f
959.663 188.867 mo
959.663 188.867 957.619 198.58 960.709 203.298 cv
963.799 208.016 967.939 206.716 969.809 205.327 cv
972.33 203.455 972.885 200.808 972.885 200.808 cv
972.885 200.808 976.296 201.547 977.483 198.775 cv
978.731 195.864 976.641 193.463 974.931 193.294 cv
973.222 193.126 973.017 193.435 973.017 193.435 cv
973.572 190.312 li
973.572 190.312 963.36 178.571 959.663 188.867 cv
cp
.976471 .521569 .458824 rgb
f
961.235 193.461 mo
961.235 193.461 956.085 191.16 955.614 195.17 cv
955.067 199.815 960.629 199.952 960.629 199.952 cv
961.235 193.461 li
cp
f
973.848 193.757 mo
973.848 193.757 972.027 194.481 968.256 191.626 cv
964.483 188.771 965.647 185.491 965.647 185.491 cv
965.647 185.491 960.371 188.672 959.132 192.74 cv
957.893 196.808 957.61 183.103 963.532 183.47 cv
969.454 183.836 978.257 187.846 973.848 193.757 cv
cp
0 0 0 rgb
f
977.38 195.13 mo
977.38 195.13 978.689 193.333 978.83 192.261 cv
978.971 191.188 979.626 181.464 972.392 178.76 cv
965.224 176.082 959.584 183.462 959 185.951 cv
958.609 187.616 958.587 189.897 958.587 189.897 cv
958.587 189.897 960.465 185.986 967.305 188.063 cv
973.456 189.93 973.848 193.757 973.848 193.757 cv
973.848 193.757 976.187 193.988 977.38 195.13 cv
cp
.313726 .470588 .286275 rgb
f
958.587 197.619 mo
958.477 197.619 958.368 197.56 958.311 197.457 cv
956.629 194.46 li
956.543 194.308 956.598 194.114 956.75 194.028 cv
956.901 193.943 957.097 193.998 957.182 194.15 cv
958.863 197.146 li
958.949 197.299 958.895 197.492 958.742 197.578 cv
958.587 197.619 li
cp
0 0 0 rgb
f
973.508 197.971 mo
973.417 197.971 973.326 197.932 973.264 197.856 cv
973.151 197.721 973.171 197.521 973.306 197.41 cv
975.984 195.189 li
976.117 195.076 976.318 195.094 976.431 195.23 cv
976.543 195.366 976.523 195.565 976.389 195.677 cv
973.71 197.898 li
973.508 197.971 li
cp
f
975.939 198.429 mo
975.744 198.362 li
974.205 197.164 li
974.067 197.056 974.042 196.857 974.15 196.719 cv
974.258 196.58 974.456 196.556 974.596 196.663 cv
976.135 197.861 li
976.272 197.969 976.298 198.168 976.189 198.307 cv
976.127 198.387 976.034 198.429 975.939 198.429 cv
cp
f
958.068 196.695 mo
956.588 196.695 li
956.413 196.695 956.271 196.553 956.271 196.378 cv
956.271 196.203 956.413 196.061 956.588 196.061 cv
958.068 196.061 li
958.243 196.061 958.386 196.203 958.386 196.378 cv
958.386 196.553 958.243 196.695 958.068 196.695 cv
cp
f
968.748 195.447 mo
968.54 195.427 968.414 195.271 968.433 195.097 cv
968.609 193.426 li
968.628 193.252 968.788 193.122 968.958 193.144 cv
969.133 193.162 969.259 193.318 969.24 193.492 cv
969.063 195.163 li
969.046 195.326 968.908 195.447 968.748 195.447 cv
cp
f
962.352 194.792 mo
962.144 194.771 962.018 194.615 962.036 194.441 cv
962.213 192.771 li
962.231 192.597 962.387 192.462 962.562 192.489 cv
962.736 192.507 962.862 192.664 962.844 192.837 cv
962.667 194.508 li
962.649 194.671 962.512 194.792 962.352 194.792 cv
cp
f
964.59 199.311 mo
964.435 199.311 964.3 199.197 964.276 199.04 cv
963.879 196.369 964.824 194.262 964.865 194.173 cv
964.937 194.014 965.123 193.942 965.285 194.017 cv
965.444 194.089 965.515 194.277 965.442 194.437 cv
965.433 194.457 964.535 196.469 964.903 198.946 cv
964.93 199.12 964.81 199.281 964.637 199.307 cv
964.59 199.311 li
cp
f
964.823 201.148 mo
965.08 201.299 965.396 201.434 965.729 201.458 cv
966.076 201.47 966.409 201.256 966.646 201.015 cv
964.823 201.148 li
cp
965.787 202.095 mo
965.683 202.091 li
964.622 202.013 963.775 201.15 963.74 201.114 cv
963.654 201.025 963.628 200.896 963.671 200.78 cv
963.715 200.665 963.821 200.586 963.944 200.577 cv
967.304 200.33 li
967.417 200.32 967.531 200.376 967.595 200.476 cv
967.657 200.574 967.661 200.699 967.604 200.801 cv
967.573 200.855 966.868 202.095 965.787 202.095 cv
cp
f
961.699 191.239 mo
961.605 191.239 961.513 191.197 961.45 191.118 cv
961.342 190.98 961.365 190.781 961.503 190.672 cv
962.26 190.074 963.466 190.141 963.517 190.146 cv
963.691 190.157 963.824 190.308 963.813 190.482 cv
963.804 190.657 963.654 190.781 963.478 190.78 cv
963.468 190.778 962.462 190.724 961.896 191.17 cv
961.699 191.239 li
cp
f
969.33 191.963 mo
969.134 191.895 li
968.568 191.449 967.56 191.502 967.552 191.504 cv
967.382 191.521 967.228 191.382 967.216 191.207 cv
967.205 191.032 967.338 190.882 967.513 190.871 cv
967.56 190.865 968.771 190.799 969.526 191.396 cv
969.664 191.505 969.688 191.705 969.579 191.842 cv
969.517 191.921 969.424 191.963 969.33 191.963 cv
cp
f
1010.77 259.27 mo
1010.77 259.27 1008.23 239.106 994.975 225.007 cv
981.721 210.907 970.37 208.368 970.37 208.368 cv
970.37 208.368 972.908 266.178 973.508 266.883 cv
974.106 267.588 983.001 268.293 986.515 266.319 cv
987.889 265.547 987.36 251.232 987.36 251.232 cv
987.36 251.232 989.828 260.397 990.568 260.68 cv
991.309 260.961 1010.77 259.27 1010.77 259.27 cv
cp
.709804 .415686 .301961 rgb
f
946.33 226.459 mo
946.33 226.459 941.536 264.204 942.101 265.05 cv
942.664 265.896 948.868 265.05 948.868 265.05 cv
948.868 265.05 950.278 252.438 953.662 234.492 cv
957.046 216.548 960.893 207.171 960.893 207.171 cv
946.33 226.459 li
cp
f
899.787 377.903 mo
900.802 378.322 943.985 379.502 944.987 377.903 cv
945.292 377.421 945.508 375.784 945.647 373.729 cv
946.003 368.881 945.077 358.809 945.014 357.667 cv
944.963 356.537 925.433 357.371 925.433 357.371 cv
911.931 368.018 li
911.931 368.018 908.226 367.358 904.178 368.018 cv
902.033 368.36 900.649 370.987 899.965 373.462 cv
899.355 375.657 899.305 377.7 899.787 377.903 cv
cp
.968627 .772549 .215686 rgb
f
899.787 377.903 mo
900.802 378.322 943.985 379.502 944.987 377.903 cv
945.292 377.421 945.508 375.784 945.647 373.729 cv
937.438 374.312 917.235 375.416 899.965 373.462 cv
899.355 375.657 899.305 377.7 899.787 377.903 cv
cp
.709804 .415686 .301961 rgb
f
963.451 374.667 mo
963.451 376.253 963.984 378.068 965.075 378.524 cv
966.167 378.981 974.999 379.934 982.727 379.261 cv
990.125 378.613 991.66 378.068 992.206 377.396 cv
992.473 377.053 991.952 375.467 991.355 373.932 cv
984.49 374.451 972.093 374.921 963.883 372.51 cv
963.756 372.941 963.654 373.348 963.578 373.716 cv
963.502 374.084 963.451 374.4 963.451 374.667 cv
cp
f
943.536 249.762 mo
943.325 249.738 943.2 249.581 943.221 249.407 cv
944.334 240.011 li
944.355 239.838 944.502 239.719 944.687 239.732 cv
944.86 239.754 944.985 239.911 944.965 240.085 cv
943.852 249.481 li
943.832 249.643 943.695 249.762 943.536 249.762 cv
cp
.937255 .701961 .113725 rgb
f
929.435 228.86 mo
928.846 231.013 928.081 234.613 928.866 235.569 cv
928.995 235.726 929.157 235.783 929.391 235.758 cv
929.654 235.729 929.846 235.607 929.994 235.376 cv
930.742 234.203 930.013 230.865 929.435 228.86 cv
cp
929.294 236.397 mo
928.922 236.397 928.606 236.252 928.376 235.972 cv
927.064 234.375 928.908 228.347 929.123 227.665 cv
929.164 227.533 929.285 227.444 929.423 227.442 cv
929.594 227.438 929.683 227.528 929.727 227.658 cv
929.937 228.282 931.749 233.805 930.529 235.717 cv
930.276 236.112 929.917 236.339 929.46 236.389 cv
929.294 236.397 li
cp
f
987.36 251.55 mo
987.244 251.55 987.132 251.485 987.076 251.374 cv
980.857 238.916 li
980.779 238.76 980.843 238.568 981 238.49 cv
981.154 238.413 981.348 238.476 981.426 238.633 cv
987.645 251.091 li
987.723 251.247 987.659 251.438 987.502 251.517 cv
987.36 251.55 li
cp
f
984.385 240.356 mo
984.292 240.362 li
984.095 240.388 983.969 240.472 983.882 240.635 cv
983.376 241.583 984.385 244.309 985.141 246.016 cv
985.369 244.185 985.54 241.321 984.781 240.53 cv
984.668 240.413 984.541 240.356 984.385 240.356 cv
cp
985.302 247.426 mo
985.183 247.426 985.072 247.358 985.018 247.25 cv
984.752 246.717 982.441 241.989 983.321 240.337 cv
983.505 239.993 983.812 239.785 984.21 239.733 cv
984.608 239.682 984.965 239.805 985.239 240.091 cv
986.556 241.465 985.715 246.583 985.614 247.162 cv
985.591 247.298 985.483 247.402 985.348 247.422 cv
985.302 247.426 li
cp
f
957.746 300.513 mo
957.582 300.513 957.443 300.387 957.43 300.221 cv
957.421 300.106 956.53 288.784 956.271 283.762 cv
956.055 279.562 956.012 277.188 956.004 276.508 cv
946.941 272.474 li
946.781 272.402 946.709 272.215 946.78 272.055 cv
946.852 271.895 947.038 271.822 947.199 271.894 cv
956.448 276.011 li
956.563 276.062 956.636 276.175 956.637 276.3 cv
956.637 276.323 956.646 278.722 956.904 283.729 cv
957.163 288.742 958.054 300.057 958.063 300.17 cv
958.076 300.345 957.945 300.498 957.771 300.512 cv
957.746 300.513 li
cp
.313726 .470588 .286275 rgb
f
982.613 364.99 mo
982.531 364.979 li
982.471 364.964 976.538 363.387 973.562 363.897 cv
970.479 364.426 li
970.331 364.447 970.199 364.377 970.139 364.248 cv
970.078 364.118 970.111 363.965 970.22 363.872 cv
970.447 363.679 975.811 359.153 979.034 360.53 cv
979.195 360.6 979.27 360.786 979.201 360.947 cv
979.132 361.108 978.946 361.18 978.784 361.114 cv
976.681 360.211 973.288 362.367 971.621 363.587 cv
973.454 363.272 li
976.573 362.738 982.447 364.301 982.695 364.366 cv
982.864 364.412 982.965 364.586 982.92 364.755 cv
982.882 364.896 982.754 364.99 982.613 364.99 cv
cp
.94902 .317647 .231373 rgb
f
915.169 365.782 mo
915.008 365.782 914.87 365.66 914.854 365.497 cv
914.835 365.323 914.962 365.167 915.137 365.149 cv
922.231 364.419 li
919.938 361.719 li
919.824 361.586 919.841 361.386 919.975 361.271 cv
920.107 361.16 920.308 361.175 920.422 361.309 cv
923.105 364.468 li
923.182 364.558 923.201 364.682 923.157 364.791 cv
923.113 364.9 923.013 364.977 922.896 364.988 cv
915.201 365.78 li
915.169 365.782 li
cp
f
899.462 231.181 mo
899.336 231.154 li
899.175 231.085 899.102 230.898 899.171 230.737 cv
902.034 224.109 li
902.104 223.948 902.289 223.875 902.451 223.944 cv
902.612 224.014 902.686 224.2 902.616 224.361 cv
899.753 230.989 li
899.701 231.109 899.585 231.181 899.462 231.181 cv
cp
0 0 0 rgb
f
911.715 228.139 mo
910.901 228.139 909.646 227.957 908.681 227 cv
907.417 225.746 907.064 223.576 907.634 220.551 cv
907.666 220.378 907.832 220.263 908.004 220.298 cv
908.176 220.33 908.289 220.496 908.257 220.668 cv
907.729 223.474 908.022 225.452 909.128 226.549 cv
910.411 227.823 912.4 227.453 912.42 227.448 cv
912.603 227.413 912.759 227.527 912.793 227.698 cv
912.826 227.87 912.715 228.037 912.543 228.071 cv
912.508 228.078 912.185 228.139 911.715 228.139 cv
cp
f
995.115 269.809 mo
994.933 269.805 994.794 269.659 994.798 269.484 cv
994.901 264.875 li
994.905 264.7 995.015 264.576 995.226 264.564 cv
995.401 264.568 995.54 264.714 995.536 264.889 cv
995.433 269.498 li
995.429 269.671 995.287 269.809 995.115 269.809 cv
cp
f
1009.27 312.001 mo
980.195 312.001 li
980.195 304.906 li
980.195 303.552 981.293 302.454 982.646 302.454 cv
1006.82 302.454 li
1008.18 302.454 1009.27 303.552 1009.27 304.906 cv
1009.27 312.001 li
cp
.937255 .545098 .188235 rgb
f
976.951 311.684 mo
1025.71 311.684 li
1030.97 281.554 li
971.69 281.554 li
976.951 311.684 li
cp
1025.97 312.318 mo
976.685 312.318 li
976.53 312.318 976.398 312.207 976.372 312.056 cv
971.001 281.291 li
970.984 281.198 971.011 281.104 971.07 281.032 cv
971.131 280.961 971.22 280.919 971.313 280.919 cv
1031.34 280.919 li
1031.44 280.919 1031.53 280.961 1031.59 281.032 cv
1031.65 281.104 1031.67 281.198 1031.66 281.291 cv
1026.29 312.056 li
1026.26 312.207 1026.13 312.318 1025.97 312.318 cv
cp
1 1 1 rgb
f
1028.66 296.936 mo
973.999 296.936 li
973.824 296.936 973.682 296.793 973.682 296.618 cv
973.682 296.443 973.824 296.301 973.999 296.301 cv
1028.66 296.301 li
1028.83 296.301 1028.98 296.443 1028.98 296.618 cv
1028.98 296.793 1028.83 296.936 1028.66 296.936 cv
cp
f
1001.73 312.318 mo
1001.55 312.318 1001.41 312.176 1001.41 312.001 cv
1001.41 280.581 li
1001.41 280.406 1001.55 280.264 1001.73 280.264 cv
1001.9 280.264 1002.04 280.406 1002.04 280.581 cv
1002.04 312.001 li
1002.04 312.176 1001.9 312.318 1001.73 312.318 cv
cp
f
989.366 312.318 mo
989.209 312.318 989.072 312.201 989.052 312.041 cv
985.108 281.276 li
985.086 281.103 985.209 280.944 985.383 280.922 cv
985.563 280.896 985.715 281.023 985.737 281.196 cv
989.681 311.961 li
989.703 312.135 989.58 312.293 989.406 312.315 cv
989.366 312.318 li
cp
f
1014.3 312.318 mo
1014.1 312.304 1013.97 312.151 1013.98 311.977 cv
1016.37 281.212 li
1016.38 281.038 1016.54 280.902 1016.71 280.92 cv
1016.88 280.934 1017.01 281.086 1017 281.261 cv
1014.61 312.025 li
1014.6 312.191 1014.46 312.318 1014.3 312.318 cv
cp
f
950.37 354.708 mo
922.237 353.715 li
921.295 353.682 920.557 352.89 920.59 351.947 cv
920.859 344.327 li
920.893 343.384 921.685 342.646 922.627 342.68 cv
950.76 343.673 li
951.703 343.706 952.44 344.498 952.407 345.44 cv
952.138 353.061 li
952.104 354.004 951.313 354.741 950.37 354.708 cv
cp
.313726 .470588 .286275 rgb
f
990.595 354.215 mo
962.445 354.215 li
961.501 354.215 960.736 353.45 960.736 352.506 cv
960.736 344.882 li
960.736 343.938 961.501 343.173 962.445 343.173 cv
990.595 343.173 li
991.538 343.173 992.304 343.938 992.304 344.882 cv
992.304 352.506 li
992.304 353.45 991.538 354.215 990.595 354.215 cv
cp
f
981.896 276.356 mo
981.83 276.35 li
975.447 274.999 975.604 268.385 975.606 268.318 cv
975.613 268.143 975.762 268.008 975.935 268.012 cv
976.109 268.019 976.247 268.165 976.241 268.34 cv
976.232 268.591 976.106 274.49 981.961 275.729 cv
982.133 275.765 982.242 275.934 982.206 276.104 cv
982.174 276.254 982.043 276.356 981.896 276.356 cv
cp
f
1033.62 283.232 mo
969.835 283.232 li
967.99 283.232 966.496 281.738 966.496 279.895 cv
966.496 278.05 967.99 276.556 969.835 276.556 cv
1033.62 276.556 li
1035.46 276.556 1036.96 278.05 1036.96 279.895 cv
1036.96 281.738 1035.46 283.232 1033.62 283.232 cv
cp
.94902 .317647 .231373 rgb
f
965.85 212.119 mo
965.483 212.119 965.121 212.086 964.762 212.019 cv
962.123 211.523 960.688 209.39 960.628 209.299 cv
960.531 209.152 960.571 208.956 960.718 208.859 cv
960.862 208.765 961.059 208.802 961.157 208.949 cv
961.17 208.969 962.514 210.954 964.887 211.396 cv
966.549 211.711 968.327 211.199 970.171 209.893 cv
970.313 209.793 970.513 209.826 970.613 209.968 cv
970.715 210.111 970.681 210.309 970.538 210.41 cv
968.933 211.547 967.36 212.119 965.85 212.119 cv
cp
.937255 .701961 .113725 rgb
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 24.2.0
%%For: ( ) ()
%%Title: (2112.w037.n003.95B.p1.95-temp_01.eps)
%%CreationDate: 12/22/2021 2:19 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6q-F`LpHSZSqt#'Fn"Bp<7#%,R%Z5E17*?bs\DtpG:miqZd?jk&^%U>DaXij_.4AIA&_`ggP*=tfGtq+tPD+^,X^*NDX4Q%Y
%IiBgs[AM&d8s(\g-3*H6()C5BO54E?,ar8tMT+$*CW1J9XgX6.[A)Dlk%\5)dG.:SIQ>s.^2jb@32uYTkLG$YZCY"-KkE/fqSc4_
%F*DAYMUP08P"^_t"b$/_':sdan@_WTWtrBlaZY7=h9oU5^2MG<bR=:+`,2o48LRS)NfJ=i4>Y&<r[`O]G-B*6<l8X:CXp`]Qo)-^
%YX2.@]#274bTJ#&=b\S.H2#HqHS*63.S9k_>:V/H@Pr:17nSt/AO&NgrK7%#p'Fs(j(D*&s&$)iGPIc*e<Itq3BG;m)2':ijHQOZ
%f>N/(kpcZ^bEPS7_c+$BpRIOB]2I7:Uo2e"/Ahkq+\3$T6PCrfQ7Q7LU$F:7+t6aJfOt-C-]TIfrD@`fDPUUM:<@AJ*M$oO:<L>F
%6R0,B.It59DL69]D7//Neh\`!B)SuA/%H_e:Ht$`cbU[bgBdf`.8HGR[G(bFXa+dMNfB8<Q?(?T'V&NJUD[TU?Q@YQl=oXEZFa^>
%VFkC_,ZC">h1@SK$-d38.b*A*Yk,(I'4+4+1@8O8J'8>-$48Mm^Q(Q5%iaWrEco8HWAWMp`k9r@PY7.W69uCa6Z\PEmahqtIAW\E
%=tR3%e3Y;p\c!p(ke@!_^PpX2G3-$pPd(N$1q8gVOJaW<J83qT3C).P6D17U94`U\k\u^DT;pmX_na$qNIQ#[J?#XEWiGirWoCLf
%b.c]bToZP#$j2\2#(A<99P,-/bV43`JkU##e(?RUZ/HdQgpSr*D.>>KLOV$]/r.Ph3IEZM_f'QU9XD'XhsThJ#(:l3#8?IjY_O(E
%N+L!@/!GC>Ns=LB.Qi_EQji;7Ik_hl/#Y&s%P*6_0b%.js3eI`c+tI@HJr6/KU'EhQkaBfQ8M\Ms3eL=)^Jq,YZ02NMuub.<PuS=
%AnM?_5qc*t=\H*0A5.c-fqYYBX9+?/`Z6S%1*:U<OG*SMA6;A"Mcm<FA2S#Wq&P6/0H&Frk\8U)lsZt?rl%Z85pcj3f4Q-rp_T-&
%*UtfK9I;BnE>]!`AfqJGq*:*pY%'#g[`;p[nUe2X[:^5IbVRgPaXlnRgK9Ws+/Zj]"u;&NUlVjNZ`gWop_T,K=iWS/G$tpA?VH(e
%KZ=0D%n71I5#qlOoK\oKTaBe?1=&@C#t6O=K"bfuchM!ecUqf/8!slK-E&"r+-QliZg:g!m!JHPB:]Q3-J>Kh=Tbo[G3D.;b0fEc
%cbSSWk`*Sbcre[T@$2RiJOgF<j,l/%,<tJ\TWP!G5b<SiUlS#?'!N=Z*0eZ&AreF!9`O(P&!`%PNtD"boZI/I)Z(MfZ@DARXtruJ
%b5ReUq]*;TJ!S&;>?4k;jo<M7fN6HNqj5R5cd=9?#ES'>N"it2J(r`EF7dWSal,H+kHPQf0C*!=3V^O!Z&V5qBf`V,B(TGpY!-3(
%XBam/O8$oM][u11V$$$FaSastqRBX*Gbo6JFF7?[dCuI+2TCfQB-CN+c>Sp12.QGVa52jQMEHYGJ%%!*Q*02$Z9ZTK`)8t5#b$df
%2=L+Z`.fWgpNsR90DtId<q,XqV>F0"_hj&60[Z3TT7fL"s6j+*O$6qcU!e_0G*gM5)d`d&<7XmUkYB"0_N-IpJ.8e'$s&1V)5S:2
%HM7SB7&9IJcGA[Oa94VZ"1Ak7U=Z(,H[\aP%[^j\Z!S::8,1s*=ZRMJOKCAk9-:5>0Y#$D5u;2`kM[Tt%3E$+]k4"bU"G$/-)6iQ
%`q]&)Gd&*J1h-Pr$>(3SGF%*<_#^_ZgA%J7Ni!Fcd(UF`R=p>)62_jT<PMG,.Y_\IfWS]ISJ<#)E;NcSIE"7ie<`6orB:oJ=CXeB
%E+kQMMA/_;Bk:fVo0?uJ%iVYR=n"QfMNM$*_r)`]nIAqA+%;p!D:!eJI#Wd/aB8p(I38T6JlPp!Hsd<7o>ATCON5>\\FAOr&Z@Wj
%A`@k#e@<m;l8omJ5K<M#dHSH&?o@R6'<2ATUer(QWemG',i4Y.^r>5l'^Blc\6oS+bfYI)k@H6DY2===?].hlY#$(`)Z"6'-F*=O
%O(Z9;1Vlu$ZQ*6H;#Fa_8$`lS`lOOE_9=13CO6"Yk/38Ui?LJa909;+mR)HpbdAa%=snNB*q*ZMR!JH]r,Va;GeB6Y^Z(2dcrfY'
%$A%+bh50ajm8<]cTTKQW?.^-*T36O1rLOgNm8W%nb7Cs+1B"O!=ur.Tp<1%JoZTia"t)=1C$=Jco*PCRi$\NW*#UBg75278/hJ1F
%%;EA_`p56?KM5-,%#'T\qK'^'aS2,+E!;>8joK>lN2#>F._IV?-^,D(7iBdeA#WnnghYP1#bd-AeOfPhicSL-8]Y#p&abg;!S0[]
%b9Fi-TCEN+#"&U+KU>.;LTJ@PZ+uF>/*rq/9PdgKN()4JYm?%sk)S@l1O2R='hB^-V2$@c^0JXS5K)?^9S7eS2)IL7`kfL8OZ][o
%J'3H>d/8n3opZg*Y*Lqg_VnqB/W1*c5%nr5\S9od0,V!\h6D.)Yl;9Zp!j1-KQ"877ZLZ'1E"EHae354N0\$[E3;q_/o`5G/BOBl
%DQ=s8.K#4lM;q'UpN@n]S<%CE9H`s)W!bd>X@8LEi8Zh_a?(/0IS^0IM4Rlr8*l2<W+)V*NjE-9b*[tC@G@l1\FH-s*'Za;N!5Kn
%3Tl1>R.'TNF:JcZ<O[(s0)1&U^Z56Xm\.JWo"_ua(ca*ZffR.ATe_kCY$X6m5;m*-=4b)Qp^0'4+5I!DQZXSedpVf<&j^5T7a@tf
%2:9UA@!XZ4-Ggo6L#JbhJn=4JT[BJtchV-m@)3<<>fO6&Te%-$6`(<-`bhX+0+9#Y2Kj]0N#Zs[eqTMTJ)g]5\um.Wi#"u#AK3Dr
%pP00c0J4nC)*6lVYL`gtMtdW?c3FY3V^k`%B\4(tT<h"G0/)CrM&:dcRXhgJ[K6=GLIYAR_hX0Zoge07"U,!8U&Hr^eCi;3!H&HD
%FQb@2;qMH9\dYsE03=MdK8[#()95u8eIf.q<>.PEFP&F]V.s+mY/&BfNj?33/sH^?FkDf7\r5OVSYM5g8+=*R1Z?s.kg0qtLBp$o
%/"LM^5bZ!f#$kk2X9s7lq`a2(%GfO%;2T9`*_"#f=\+>n/]\.N!\!Q08OWb5i=n6SME]T3[ST^&p1<G*$[u)[[53A&XT[3s!6*pD
%`:'ecO_i=0$Mp/VA\Pc5T126O3tN<-7B+)(U9UtU9uhe*bko</aN4!2n!b_VH;n!9VTq0=(,9qRkBkqtEKQ6#R7$(u_c;/a%gn'V
%96I$5,M39`a2_D_[ESE_dUh,`+BL+P^:u\^(,d0X)76`E`J))E@jTQdTEQ#L)OM3qC?0[OPo+@`g7i\#',q.*GW^o='`MJLPsu#q
%5V`oI=as=Sj#!_gMe64^a,L`GbqiX6I>jQs2?]84`E-`F/FJqJk"t'1X_`Fj*O[ei!g%CmXMQV9`$$)b*h!SK@%.Df%'(>96<(Zc
%K:KCqkQ6Ca0jpc5(kjDG\ktH!%HPUAo\822FrfaP5Q`GPn#Sf"';`U&J1e4.@:hj*n<OOi2--0fC^GKE5RIAjkqGgST76$R;H?;U
%JeO)Z'U]rWo&A4rBN]?X2K!9mF#I#0X=a:N$sTEWNZ$__2_t"q/`9^Qa.>PDI>aO#,FTU_D32JK1mGicbp[)E\4q)WW`4ju"Q!%D
%mS!sP$=lW)[%Tl!<6AlS`(XWi1j=aD#Rku>U]\P&4VZV?^=`4/CJ`5`PO8_H=CW9.BW!W%&0OkK4`!bPrno/V-,mSWo?:#:-K#bg
%RjKG?a^.O^*V"olP0G1/;<*<>:R.P(jW]u;F)"Bc!%c9)/K^6j6k)V4fF4R-c!&#$$jPJ#H-iajn<I-^(*ZYr5QGFK('lKBeau_q
%U4QfNh.gR:c2rguLNXoZ"gdK'HEGqb#Y"qrJmf.S"g#<h%QQ'+s*,np_'GD.Ih65q;NqE$*gd-Z%_O[DNP>IdWNEFrdIB*`=`k!<
%@!4mn5uKC.N(f;S$;F#P:8,Nikg5GhJ'fF(iBa3),Jo3D?R[DQU8,T@KVCi3#'NJs'X4!S\!S!8VP2m=AgZ[,i2<9_%"PHKU!hQQ
%]QMUN".3?Xk(PZ5ZXcYJYMCW0h2VbUcZ=B#JIDYmJ^`WXZG76@T\97sRS4\F=^^e#k%U1:"(f;-&$RcR;<Y:,8.Ub1M@3(Bkrjf5
%iXd7PmDPPh%lZme<CVRT0tjGq=_3sO;"\Puj!*(Jh4>;V#Y[iA<kAd2^IM3,2E_BSo'=S0WoZSM*?I5I6QZ.[:CAqVfW\o#[GIJ(
%o[s`,[s@?Sc/UQ6cNr,<AtBigLBY!A2m1E&rujpR^V5tgA'd]te4GCI.q\)dbdPn*1^Ak0AZ4li^it0_:f&?&D<,mudkWpANdU-n
%6,EtgOt\>^$O,7N%*i>uJ*euq<,+I,W',n_1i5j^-8N8gJs-HrZ>'+pV2t6I`.o\grQuZB8u'^5+;5VUP5.jDZD_WX`2;-s,n"'k
%WROe5ank^0=.LS*03h[YUL1$0l/W35M%(%0b$WAF("dPs2^94r5uKU^Usb!ldVj\pao[hh)aFDiLG%m:O9[ItG5MB:Ycb>"+C/Xn
%isZr>%j*$<;V$2?NO/PI/tZ/%lCnq+Ur+b;L:6>01$/=U&I:j6aSo)lg5IA4]h2o_Q-BaUiq6+gaLmtl@9OtP^E\XgNtW!KFYFZ"
%,8QP$eub@3V>'5EY`hnRIBTbhCkk3LYhu2co<Vo!kSp-T98YnRlk,a/#2%9W)2YJPRf9(`2=t4t_gae9E^@7_1cS-d--\n5Je+R"
%@INiU$AG5%F7.u0#G&ucfp9C39>uR0#<J_grhI3jJ=-`KHQTcp#Wd/XIe98?"B,nb'uR?H9CJ83iNJ1R:\5<3d7[lfX%/LcciHDf
%IBl(m'*=*eD`I\;S8@]T]qB](Y8Mh;Pi&^D&Kf=fX!4Do2P$X@?K4uBfP>kJp<M[dPqMVG\9[Q<4)9lZBjnVW_@q_(gK^k47n)s\
%+Zk[.e>RZ#C]E/Q"9%Z+D7/^0@qR>AiSpL7&!X,>iphNuGJLr!/rmS&I(A"1[Hi1iX4mUQD`Lar?+R!k\(I]<b.lb1lL=?`Hrrrl
%df[LedtUeS4Q(:J7WQZEPp%%5GYZ.NZ#AT(qD!40Gs:\'eJa]$"%M+Lrc#PSS]dCs'?TdcF/ht[7DB*a/<kY"2\*2nPU.Yu>OR79
%F;rIc1^hQ^VWl0O5Q^@(Tq_$ACSR?P/sW+HqNNllc,ibZ<P0cF0:O0IjW)Ss?T4MO9t?Y62VQEFe7l&IKk9rP5&<Oa48K[U3Ohmn
%rT:+b/\-kj8\<buUN1+73ZbD!S_Q2I,Y':Z7VK9K.R)Ib,!huHe03:SZ"F1i0TOSuVg=U2?VXNK-Ul`E]ul.\'pdmD-a4<9=Ir_K
%28ee6a!b:_*_$h&qcDmbk*;F$Lg?$]j>:'%U?A-GC:;n@@)u/,[9'3_K.,-GV/ks8X&d'^$up`(MS5dC+0m2"AG1h&nXlL\&4IqO
%Sbf]%BUj[20RQLk/6<;Jdn7Q=IK>=a=%mCF6WKErZS,,"G'D)8$Y(KaL[S.\nEJbXiLj4ll2,k=L_1)d`igOmD5NX!X*@Y>EXfUh
%;8-kU>j/49O>,-s31Xc@2eB2BE2tf!8ZhH4^'MKl5HS:K9i&".p+A+,rPlBE<`862OEL4WT(Ifu[JdJo;P,dGVo"Ss&")S&Qms=6
%%'RT&JNE]I?PR>*SDg3K%'S%n'eUD?6_J>%eDmR*,)^QnNEa-2BaN9<83"_3f<6FpHMf_d4n>paC>B.p`)$+qN8mLI`+n\8<<h3!
%G^D8]3fL$_1A#%Ta!RjMX:MMeV:0O1)Xd@.>:k^TAk2];<Naki>dhI@.D!EtaIX;RZS;!U<G6VW)K)nKM#_+KE*Up:_s:3;<t:-?
%kD.E?iY)]O9g?X_6&Z?+_=$PAdGt!Ch#([HR?Lgd;07$8,ZqhrXGWBseaZ47?O"&5eEUqhJJj)*<MH:QN<J?X^EFB](c(gT66.@H
%l8fLo/q8]cC'tPb?p3sbV)G5`.]4Rk\R[0K=VHR$.Q;')P"atPdm'*2E8"%N9^\q>J77meeB6$H0%[Ebj.=F#=;f4c/t'm/F1Jn,
%5r+f(Vrr)'pP8(*gc2.ac^@n*>9bpXVc0sjRdGq(ae[7,K_jceR-u`Z:Ye8lT_J[ab\!o?GCPkAeK%!J2EprHl?2@!qe<'Wc32.$
%"me;;B!^i'Zi+Yuflj]([nQ^uWEideh:@*_R*jT!8OQ@>`i,h(l6'R9P^\U?X<1=XS'"UrTui##q24eSWLl-Jk:JDOo?.ee1&:(R
%-"6p[4.>QVPuDd#MN1em@`^!%@no-Citg1_G/&#QNOZ(2!YPaGDL5,gqnIHZl;g?Rec!SA.O\W<>cl^r3@!'-H=TVq*,G3GS>i.4
%Y7\$Sr"c6NmkIj1(TN2aKRTFL`_ijCD&'uO.8Tpa)^kV]/bjM,<#Rp:MJ(pKkfbU_N9IPbAPHR<7;^cV)l'NU9H!s<W.iuT'3)\%
%0[Y-#b3UZq3fS1GVW,$P.Pk(l-=A[fM?)>s1uR"#@'W=QW$;26Nirq!\OB<.cd:`U"I&_*?*%7pfhmdY3!gYFj$&>u)J=in]8^SB
%>B23q*HA<Nc2RL=>U6q/rnK,u>cm.")m9'B?k$T9\+g6r`0bLFi'26uA&^D^klS8\oR0D*ZB$H)):&:$cIQ=';V?+Z(<WPu:E^%7
%88gJaEa&\!K7r9bNI[BjS'Q5leu7J6kWf0D@03>M,.mb#*QA`]9#,3tL.VMR&)/>8E9]jTSCN:fQUjV?NR)r'f`aGLK3LTb9`3h?
%l-oStn2om]-&^D(8Vhsi#uMgs$<*^6"ST\[!=HgkB)VEA9U##ZW'aMUN5_.p=3Q8n&Me#HJ#A=Jd$P^Sc3Ps*k&-](eb)[BO%+%(
%=W?^RA6edh(0GVr]meduN*4orbK[W]'OAB/A`'I_VokEaTSTT*-e7ljM7jp9=o)1;lj4;"1*TK+G,dN`S\S!Pl'Nb&N2:7[e`Q?T
%nG](eRW*WfR-dR0^'TA_U^qU1"/Ad4Zp[0rrmn$?[*_pV<<ZVk:9iHSZj3Zpnh%^+Sm]sZC=F^WHe`;?ERhtsIQG7?ff!hiD)i%k
%H"AGFB)2g5kL.$Z6:X8r\>mtrl"i[or00fb]PgVWoRofV<@\)DkGo@4IR#D<]RKDCj/So*$>@sXm+9tdlJRr.Xs7m^UZcsArL1fV
%HS4Qm.Wm&IL&@t;H"(!B]eN-I!7mE'@Z7QkA"?a^eT++"!-n(D31,94CrKp4b%/_56ondl][LXsZ4gd^#'[?dA^JqV!d::D_=+0e
%f1b(K3.kF46ssG<</jG5]OW\<GiWZVp7_gp1/kIpAL;MYO@_8(HVm1c`md7mZ54h?M_Z_2B.!AI.0%(h'Hpspd^@Otm6qU)9?CM)
%#O[dYfS^pVdZZlEB6>kbLkJLWW;i'^1t/t47L1k@(i\O%bNTM.-a]3ol&"Y_]eMYjnQ37<-O6sn^G&G.X'GR2-gEPRY?;6.5*I^B
%6p-o^LmTu!?l^iA9S.&Ti0oed>(UNgJ854,Rc%A$CO6lP%A5!/g?cYEM]FlhW0UP$$*&u8C5K3]T\:*Q>%4NYW$[14r//k?+5Se/
%NSl/1"SZ3HS>lb.A/L:iN6GfL#rFq'N07W!3K0!@s1.!KkPVoYL!uF#SC.Ra-F-r?(>>;"V&`X>*rPH+BuIb(%Gm6N4W.@i,j<?W
%W0NND2Mmr%FSIAai-,jk_s8XsOd_tlho!sZoLF(=ehJf"nEN_J<0W,AWV%9'dhWZe&OF=^_P3!c*p%.Y]dd+\?POU1<HZo-jb52'
%V&ek1A<_m'P@b_=MHsXRl,N[<h7WL_oCWD*[XWQArrdPh`/gA$$r6,odE"t-PCL<Z<iO]>?jIa\q[N$D#(g)V];\1!!T2OH^\&GX
%1GI3uaOe?TRaW[oDCTNsAFrY4Z3g;iDahJ.G)TN]U<,FcfIYGurO-@XqF$m5nNTZt$Uq;1?[ZF4UWea]SAp8=&`kf/l'Iq4Ru$ap
%=U<ZJXT-:TR&p=2\T*i+hdl[E=oT4%;-X,KntmP(->U=/ZfX?52dmtI^:c%[XSF2Y^-2??=n<XrPtonXP;V6#?h5k7YHHS'<sMD]
%%/b-/YP*$^7D/3a9a_T8'f"@<5c$L`(n4)>?kBR!bgi^IJ#eHcUTPua2PC\t]lrECAl:"Nna'c--QDe,?7cJeU58M</G6Mf-&d;p
%osT^4/FefJ*jUpqOj33HlW,r1$b2Z[(G9(H2Lgs,T%ht8\>@GR_l<?8X-uN0R?2ERps0TQfjD3irqod%M>o-sT>gZH&6SRD4np;d
%W8Z0bD:hqlF`Mqt/+$BP)_Y]?*Ma[]RjML>ZeGOrVm5Yaag2:D_,lh!.J@/Zbd*Q]EC<L-,GJ=bM_LW:r3_^jP:Ld)c+!_R_^o*7
%]@[#&fIA;B<s!80E*mcQOuQb\a%PE:q3N*T^70g:?@4C7otMc4Qc/EW3*m6<9B(2aElX(s?lhO,>8@hV;W9q[Oc^<,_DB^`Uljg/
%'CV'Nd<H>2F/&K6]8Xad9M)Gp/:*i&->)Z-KpdoY+X1`d*c45k^[C1CZ:KI=HDCkNgcBJuI=9XE\J?@8/cT"9M2<5pPHGnEa%)j?
%-[EL'\m?@r8icFQE>G9&"_0cR^bjfgE>mH`8!(t@qGIrSBj>,9ft05SED!X21NE(_&u8'kO_3o=]0O<=j>d%T30U9>3;\YNEiiVQ
%2;K&A6GkA]6G_0=ciTPZQMP<Mf_1F,-G'`h2r`7R@ik5s<7_&f3P\oifkaCf-EUq[if`$fF@n;US$!X_/-O"!;tPe&eI^,E^]'p@
%k'0#,W[uLs2m1f![4pQM9:grF3(C5Nd7!ilB=T:pq9`!)pb=+'7V3opN5Uc3C#(Q7ULpD%(tK,j0gt;gpb=+#djBO&8VQ]QO-02l
%VT=hGEeH?[9tV8e=_AL`UuEs#X/`Rk<k25s2k,iPc7n'gfb6El+%nc"aqasGk+qN`R$.Y>gKZd6GGjDKDnFPoLq23$IU%$-C,j1u
%iuQXl+t#.uF$o7/Aj<Q!0JtXCOe>(lG3'8rnV7Z,n;4%Wp1H5/O:]W@2/3j<m7rk)X!TV>12/Z,%#HC7l&W>!9*.'#Zt^eBXZ!ms
%,]SHi-8f:l)jH!b)M6qs(H1Jq3IX`XNQ\a8W&pPF6(s/0Ueg<>TI1r^6cM5l7m5pu3(er68nRN9!hbI#B/$7*M'fN@-/%iH$!Y.)
%RG.3X;OL,6n0QR/s2KesRJ+VCP!$@*m+*kCHJ6$a=J6W'@ghYOq:ffRA1i':5tbg2%pbl>2ODYMmP(+D;";YD/t's1Zai0?>r%mB
%Aoj.jRhIcs5GaRS);LH5A(*F=fh82`'.dh=FRGhQPYC8'l($sZm^uRN>rNac0ei-=\MY\$btZAt:7nN=S=&A3qKu&::]?@LSD]7p
%8Op^%]50oD/s+#:8E*8>fq[O_J-/AnN1'0V9RMAL,gb^"^m<oTee=*J<ut%1fbN<^Q_%-gh+TP$XmQnHX^<#6Np10AQRCe"p!\o$
%Z@\W*D)T0>G1]cSU*bjuR@B>D,`2nlD?A%PZhA:qLaN*jVM?qWVT0iCC%s$(2s-oGgWph4",*7q$2E3s/EH-Hq7sN*-P4qKn'#%=
%8oJ#P0sNg4(g$)-G*+Z:N@UpjSeN2"9.lMmR</CFiF?gXg,lRhj/S@uq#)e81hkZo@biTR\2"2]fXMuM&p+\+Bu`+7<<8&#I[;R%
%Tp;$"jd=;jI$n`@K%M"!PJ>3F"bVE1m\eL%RroYuYnAD;8f6eZiMgh=MaTr@C;0XR]iK909^hC>-J5g9QlTUMdJ_-C)b#TXPh8D(
%SkX=dO5[&rMFP8@I_p6obdkIfi]cJG(Uq?9rK(;0TE&p-XX3S0JVhB.>\7V)T@53tDCVec&H/TF2%a71!OLN8@[[#Vd,a5m8:U8i
%9GZq)FaS?$b,lndgirTPQ*Y7WDX!K7eh'Lg*<1<G-pBg-]f=+9Ia[oKLf;HQf8Uu&P3BoBK]IVW2bp+Q3OrsF;N79_@k^SPJ,E;!
%VG\UM3ekssh(Lt8iFQXU,14as2q)H79u;$eIga2m4>;n\P5V"Zmm>1drhFC#qCY;u%3o]KdCnO)FolYZV?6X<iT]KT/SS.s,j<bs
%qh$qFZ=.4NCnb'lNA91#aJM-j`o$B)N28RjZQ*F`D&-SSX9hT!OrtF%ACjNQTV&ccFa$-V.9N[gV$*mLl!K?f4;/)K;p[H:%ge-7
%%I$f*:\,SQE8Yfk7a]^)e?brQ;:aT0\W*/#@uUDJ8aG?$F",PL;rQRW.02@eXmhaW0/]&Ab\4<2Xqm(r&k6J)a<WPfVe05YFqZSL
%\!SVN%qaM"D@W@=*'Ee>g2O(:/!6;8-;`hpZYCiD8=MX.a2eL^VS_l>C,K<j3cTT?l5dIt/`V,u%-OeaRV]8,4'O99&dKXfK!^Wm
%;ril(C+6e(M:-Jk>o_@o8!"+<0sp)lZgMtHb('#ts#[1.mk"1gOk5?&L\.Sd?mnsR?+R"OUYWRSm5n>2g23Vq)^XE^fU"&\D9h[a
%nhj>_IaZ\Kc!,t<mG^j$YLciRP0X\=,0nJ@W*1;BYQk%c>bV%f'LMiC1B$<`r]L3=q_$?2SR<`1-B-!se_8>!rIffDq'3t5"0hJ:
%7-=QgKT=`LEi&37@3R^SLjt">>PRg86-:q[O\F"X$!?GT@G6U@d5Ni-i/K<=RVqs4^<>FZ_3V9K^[T]&GkVY\5G9N(ql,XKj](Jo
%nDuA7#:QDObg7Bh.'gMPg=R6I[>)0:OlO!SQHLauF?']kb9)cgLM!SQ]u88q=H.O>Z1[*`r9sZGMX[*pp^'S6XeQ5bBrlBe/'X74
%;(c8?dk=LG<A&&.B(c2oOO-;\=+\b?^/f&O@/c73=s+Of([D)&AHtH>'H@ZDmFUCarji4FLYCg_ZM?kaoE5&GMh+KIiF7);g:[4>
%1n'n$2)Z`"08@c&6Z/@_O&Oq8QfT^RcSg.].AVYE4`O[2ZqU[lMbj=_+t?fN3P.gN]issW*?#?EEY9YrP<s9hL)=S?/R4,)FW"IK
%66ejnGK8S9#R\OoZW4((79Gq5>)if8)aD8VM.oJCoY2lM)bgQS0%?Qp1ua\p&EDn`pi`Tkk%D,WEqASZjK&#H(a_t\>aufO?diE^
%[sm[)hLI'dh).bApba4^/Q*gu)e:B2g`<]\YM8Q8%Gdo)8tV4A.'f[@0_;],ek>4U=is<X_s@NU0=@CReHXRiZIT'jWo.3k%NFNq
%i=8Z+9_Umf@ms4=A3O=G=nQ<m&YRr,JrbfDE_9_Hr;gNsHS[Hbnsq$m1<65O6W)EUh%Ili)4.lTI(S^p/fjE5XgbuUYeRG9)Dd@R
%lL!?>I-S-:X(V.HLr"K<nZP`(FoG$$f2^XFT$3dsEZ2('RaW[]BX%>tP.HT``("EP:Jk"U*E2'3c#[&@UibjS^14Z_Xt<nZXud(T
%(7r*TPY7ufq7#*%.c&&K/^T>C+X7`"H/$H2j->7JXSFkDAjKb'&[Y$`.0YoJ("FF$=fRgb:-<:BCTXOR1OH)p]2_KE43a)GLh`Us
%NEH,uP,'#T>^^:T7nJKuHJNO-1$ADR:=YoHgONn=[(U.^X?_NXqtmg*/)Jk2/L\6^Y)CkfB2j_!I+3,)DW?MA3d(I<V7'%YQ?-4&
%b,mqA'goCY0^HMYR<,AmSE<Dm!R\]Y\V=EbR!uF.W?#Z+Q<T%iTuFE;S9$(u+NX>lgUmhSQaU/afEDS"F,_#`i3;%;6XpOS`32Eb
%D[!%bh0,sWe5<=h2WupD,U2cJBl5_R4)N:O*^4WaL_B2o^L>QA*%.o`dV6PXKj)moYl7@cTJt/LWI\oqZ'UNJjhF%!3?AslNt"W"
%qOHNFFc>#2TUU6_:$@FG"D#/MaJl5EbNaY3e:+oe3dS3'4[bNaU?Im.+F6";rssk52=T)]mKrlL#4915+)\=end7ACd$*D$RV'%f
%Pfg*)4@nn+;CASM4ge?C6".HBA#<#TFf\%gFcP(4U^i$GoE=D02-N%+]OsZA*.$_HRqfdlks.BG:1*?bIbqFP*)rnhqnr*<gO`\#
%!7%k@aL.1EZ-?=EG3eke%>.=@<*SGuPjSY\FXsQ^&VtEI>-\"Ch$(c:6.OT\J#u7g%S2PY1mW:u;\j/.&p-aT1oAh7C9@:*!O*92
%q_LEJmH&]SeFq9].Yi&0oB#6s-<GS(OodKq+RSa?ICE0n=#c`F][?gg=POJ;iYicd'"2fb><,Tu>Tt@^\8tXKch3qcYM=*L%VLW!
%C(NlBYCER[BXFYZ<B:uqr@'n^a3+,8?f>E,'-.QL!'c;nS#=Yq0_N_=(gO8:Z/M:6%<junXn8:)8k7Td%'gT'r,p+VOQIfH^4lr8
%0V$ai.F%^ug8+p5(bN*I7G4(]:tf<Z?+VV>o5*9Ll^,s0[mP5=j*h"]8#9"A[+-/"':V%H2#tB09t*Ud+,K"qe;JCQq3D6mkH!=u
%?M1=aicJ;s^qX*/oPTn*b@@Wa%;t%,S9M00KMq++="<)-K]BOsn;i2COgsR*<L'ok+?S&;/("&(Rf`o[LSY2\eu=o/KLJT1ZfW@A
%*Koh;Q;4mtaVnE/KC^4J6/?kOc^4s[$;F[8.XT(/\`>Zlf2\`(_:DU43gUFq9+M`d!$Od&.'ZJK^-I?bb\d"9,m63'>q137%,(&t
%i&u,`\s;jll*`4,I^S2Lp8St,nLHMj4Y[[U(CSqq;u-kmX:G2!(<`pg0+#(6QuKiKXd:MF'7&B3lOS3i=FYG9OOoRD0a"I<8OWt;
%hHK4lP_i_a!Ks207!<+Eg2d!(/&)/$?7qRo3>Eoa<$8&4hP@+7#EVK3bEKT4bAoi#_u0:,eN4Z4O_27Qq_6&Ja+0\MC:2(3Z<Ke3
%Wkdh7%Y=nNZ<]$lB\EFN;U[SXl,A/r-k7tr3q=+3%?qO8MNa`!%#NY9-5n20f"bG/:lk_Z/(U_n5?d9](t9%_1c3WGR25tYd/.cI
%/\&X96_2W[GIm.f*frbTF=i23,54f$:NM6sqipEuR[XWnc1/gsaeYnneRk-_fhlX7ZIlAT>%LL*4eN"N;\,q/p9$]p.5c#`Y^kLp
%rEI%>gic6?d"6`Uaq)KJ5V%kO_*UBpDW8C>J`E1G@gFe'9k[_Gf2fEsBlf-p4^/0?!ktGK`bVTgX;2c6nEqS/=4NU9nqNeqc0,dQ
%n&#bq\6XoAqlF]n.Sf$4$!%aY9(]:l@eceKBFa=pLf)B>Lp\$p*9Ua4C>P6iW*kRJhY"dc6lBf`nOsmA];K;n2VXSC@;/>?]l@&1
%Ap%kWiSee%Q(E.r;n=O?FCFYeX1Hmm3]VqS75/V[6P=tCNB2'87RYfB*8Ab('jG;XQHLh"STfTnUX@Bkg5W@[Y8B=FoKN(VGNIGW
%I3U>Z4B!HhB93V=r4MSC\V([)HEfB(NW;N@Rp+kHY`,$'HBY3S[704?:@kdHW]5VJa0[BpYFZXj[UW6.JT2N"hfE>HZ>V\XI'#qf
%TtMi@RGc3>ZsDiWo?<=0qJ)R9anP1Hes97>_,CN-lJkJU5"1ea\t4eG`LI&U(WIL0-uJ&,K@#6j;K_9f2kXIJ%HhBJZ,XMmFaosd
%73WOL(GbZplSRW#XcAA6CHir6Ml(i\9Q[g044=5+gkbf"Q9Xe_?CU4LR#Ba2$Ja*")o:(^9/KKqNq,7JCo%Bg6`M_fSqJC3e\#pY
%?bPt@]+&i6Y>oAWRmsL]df$Mpp(2C?epn0\[5+nQE5;t:-Kin3Z<>jt$=pN%/HL9KHIK$%<h6N44@F:$csmOJ(PZAe\aJ%Lc284k
%^N_^-^a;)CAaHjK5d_W-JM[ABL9H7=X%=p!Am^n*KC$$T$Q=X:+n%=_Mk"['9j^bEgN4miST[[FqGtZ2bF`e_m6[m/REj?_V-t%L
%8-GoeC*/Q9PhSbfi/&G]/'>+ch8*PiI1[K?f$DtZSiLYP/'-4#mj8r0"DAt+392>m&.!6')&r>q\-4qi%)-@i.Jt%1Hg5"d"mXrF
%'JK:bn>E0B&"[?@nTFoL5[jVm2/\J1\$k53lqi8s4^85d>^VY19;(;"p0Ql$,Ta[+fW,bgTK?^q&?EKD"(06&4k_(%?!XH>Hl@p'
%*o99)FlotFc9=^]LI*gdm,P\hh_[&kak:)LB$a&^0]=j^X,BG6bInNj!p-J'jJ!rKb`<h*Y,e*^oR<[iW*MHdK(I0&FRF/f/60@g
%cY+nX)U?\7=0t=78#g:d8<8g7Om_Hhcieo/'NMs&Vr&PU?AYGjGlg#BX<pnXK4aJD&qM3JmTuKMh4MQ#'F(a5"jM>@JdI:_(t'*:
%eVa?:/Pq2"2^#:QYX;<j)`Qk3[A6'Vcr=kZIbqTb<7A\Z!SC:!Zt<D'F+NS:?'fT#pa&#9%>BHsd%hAC8!l%/D6i>6)?6_E;fseZ
%;h-;LZ]6IR/CSC4>YUKam(!gC83][3_-mOJW(j9l_i0IjW_E.@3%<0^ci(`ZDbdtUaMG*]M+>X<iOrut/gWuTZ',(VTNbf=S#Ta_
%%$d<]G4cW3Gt\,'Ku!=/2Tg0YWBr:n@-e4;S7"=nb\r:D*"C82bfA?pD.&P:oLHnh1Buh@btu3?]uUpJW$RhTQ`IU4>XUidR9BeE
%Zd3[NKX:-;pS@"l#5_^"CB0i1ZR$?%D/N8cS+lAODc:o)Rs0-s]1Ynh+7;<$ZSEY*VIRXK^W3e#I8G-f]ZZK"f"'08/(e.%U(?$W
%[%8iS<R72rp@^%#&(N>\TEP_fFF(Q9+2,g'Uu-*-WVQ5)QhKR%Zd<r_4h9:=0;t?Fl#brj:+p?8O'c]C^1c3]Sc)@!Xi'o#S"7OS
%6N-ZIhs'dUf6fXXG\Je$?@Fa:fii]1qs\h%%uNrB(QCA#$G:Z6^lPB2oCK?pD\h3FT/g[Gqnh0#*%g#T!r^*kkO0qjAnd*Nh#:L4
%H\EP#l,Tl?D*H"$LFhu[LZ/Me/CKRsl]#)'2p690q9t:Fo^*"BXZXL^VbkV*P*C4n+!+pl\`;M"gB/2I4ZU<u[r^ZnkrO9hXQk)q
%Gc_9jeeIuJ:<m^(a,b0/j4a4YXmaI.`dp@_Sg?=^%Jl4;`Wk9.]b2XDa^'=Dp=o@Me8McK:Z]-XVtkL*;@CemX4d0RUWhusk/,De
%p+_-l?N.Tcq.SeurbC]Z6N2+3rBa_J[\jJcdiMW9bboAMIS\cIq*uMcjKE4=naG@nogauXL@M9kD4IcBs$4$ACYABMb1:=S-h'+0
%d#Q*uI!at!iT&Z'N6$GEVua"V5DO*hH9mD_37)"u<L7$A!W$Xn83FA4?$(;lhs;@R%%C40Z>WL0>O&*g8_MA&s)=Jg/j3RcDQhB%
%PbVgSqYQW0r7:8AmD[eka1L##`n0SE7d8$Qn*eG&:84J!%oM1;B<DP5MmqS"Q.gA-kNU:KTjbSdT&n,@?>ci^mh_3)hk(_0ea:6!
%JY>8B(OuHk^O>c9]t2a/R!pPc?Ys=KT"M#ab1@qu(L^?.D+T9Tccthf=$,(O)[G8<f3_meC1cS&o!X1CrQW%<bJW^?q+3[>qYg=,
%o]N^6m$dn8@t(Vg[fkAq]bd9/p%3r2dp-ftWL64q:KbB=5N>"sHh.Te0%;X(mI\Y<G+2b(AsC<hlAOHGA]@o;k42ShT@A73It+N*
%A,RJI9niCeH@A:c9@'dX/*XUmbAZWer`fQaD<0.0kHA(1l($X>.uup@V,n/`I8<)aYTHePB>"[Er6`.S)*cC7/CuHK[rK.EXhJJO
%>[.!R)@Cb90g3#@Gp>KP,_(o)6rkti$RUhl`FjreNe4):GrNG7h#!IFfflC3+2?Zsd]7<KZKW`L?d@)8T=2M2V9?93o_N_+=^%sJ
%]h'_KdnQn7X[d*5rROO*Mbd]VN@4=)d\_'486[b@e[3#b]hE@W9n,`Q(2::FoWuMX1VL3hl7i27m+HOX79*JbB/^mpe%(P2([:>+
%`hW1OdJ"IAQOEI^l+P"2I/<M>4-M9V$Q&&[kGp,tUIAZGrT5k6:7pn?C[&>!]=7%2p:%U)]@rJ9oS8?;2d";%GAkauQT*d!o[d%?
%8c&#Ep`s-k=+?IK.W#pK2`7Lu^0Qt1VCNVS^Sbk&dVeo.nbdaFon9uJ9CFn.\bUPpIr6u&^Gr]MoBu#$C@8Vp\(4gZ3[aAXRrbU8
%?\)\KoPY\Pk,a33jgiWqlDM1p-0OOJMoPY_F1Ie#PI[5;YI1pSc[4MRiR>uf\\lk02L"N$WQr1oSXn'>QQ`,")/jE\iZrq,G?KKk
%Y;Z-r>kos^:mnM:SuWr9HWWsWl)c[)GLC^m^Sj<1R9qCMT$OU2(bb%eot<5d0<2)E<lJdu5Q/0=2?2\2gP>V&_5kKLQRD@LI,Y"s
%g&06q2qn2o[qBLJn)mc<k!.Vn\U!AZC!=3@-^FLGjRkG[B"iS]]:!RiB!*6#*Bq5a[.GVfrFklIm`cu%oC]R_HMVL?Oo=P(qkL:F
%p%5"a?<MUH;U):+g0["p+!!R[5'qB(D<sI_[!m2jaOus\pulJmp!'8dYKcd9H>?Sc88kr/5qrb*mg][4X6l`Z$d+$!>qfHMeV0n+
%Md$Qlq<DL!pZB`F_Z&k6.gm`%oO?eX>jL4_([q(p6Kq_-=SR(0ok:%J<NIaK99-HjFBa't-nSKbMjcZ8\[ZXTHsD%rc7D=;Mn@!^
%lc&gH\(/IH`@&tI5J5[_>]f&4[Wq3)*uD!RF(qnm[W9*hfK<MF>'&<Q/SSjiV5;EqS"H"PYA;k?hVh%?l0-UIo;2'LEdd1Fqdt?B
%b':\4<%70>/@BA&4@_55g3T&kQEKRubD'kM/3j#D[?e:G2W$+T"%Fo8<_jKt5CIR0bGA;5_QoMnNTF47p"[\feh+&+k>mXEbX,`R
%jnY7?['KQlhcr1)DG)MK?KKI6^=L`9=3=aF=Nnp3cdEmgjM.l^Q52^15;k^g^H[2H;S.AT;LRUiI^<-t*l"nh?QNR#cDS^ljj,"j
%[qZ^$='&G*5Hb^#G-SXSEpds*s&Hd:4a<.a<mUNt2--9Yk/-DmI7ma\boN9Mb`h.Hq<Sd#ZZkp"l!!K7PO7L-q8m'M3WJ1=k9KXk
%nZ08"UiLa-^,B%U]j4iHfNMQ:2qBa"R=jtkCTkFPg=hto8R;5il$S!J<][rtCL;RQV:FqQIE>U(oV<9^FY$".IC=MUSJ@_[P+:-B
%?V91UWjb1d8q":bG'n\JDO'AWoj%CUQhA7UQFd(SmAho++HH<ppS0C.o($h`WN<h)^QkGWcAqh&FYkbD?0BPqb;ZFR=.s#5@;i[V
%`@/mFb.@01AE?;6F6%c2D9X?KV37l.eX&d=ADqkq6ccU1<O,WZp;lRTQhTRs@qh9og_5m!0?c)K/,>C/C1o,)eXZX3Xa4Mi?`B[b
%7k`A1Kkj>N4$St'(i?sO>Lf<.2&EZ%moS\ZGE3iR2#$sDVUe]g2>,MSa"?+22s9hh>])iW]7.8a(Y>g$rVMf!VXaG$p:4T\?XF^5
%g%?$=o_@La\Fc(Mj1G8=d<tj`1JE.l["B97pWMlHk1LN\2+rq_A$]<)A[?l2DEWFDZ>RA$AMrekf&hN`If88q4b*6YfYi2dA7l_)
%lLp_7S#>s]pCW@3lfjUma6!&62E#a@dK!Y#G;nBj2t`1$l*EJdZh`gm=525F]/uMXr).V-2#k+j=ZV&?[+TK\o;D0M]`.OlmT]MO
%d7nWLWFL?[H2@L)_q/O:cemoWD*9MR4?IM"MU*p#*kd#'J#02M:Ng)([[uS65AqRTI_<.4nR3M.@&mV:00W`IbM>A>3bWniITS6C
%4a2(@jI\BrNr<GcE-M7L``/:2S1H=h?^*%Loh>5*kM(s\Hn8p=9CK&?kL\luR;YaD9m5dcmC01qVHq<XY02gkQgF-f[b`F868:Lb
%i3A`oOMY&dUt'dV]=Qc\b<L=)0'1?qK4b,5Td8_aTAO2Morn6?gZsc%jmB/BG\-d>VfZO_r4)<HBBf=uF(]Rm`ni^pDr9tf*k%NL
%l&Cs@]D@uhATr(S!/oP/]MRD@rP#kkGU_CNF"d,TNSBfgDRR#\<ZZV>HV[CDDs_+:<kdt7rE.;2IC",:Y?'B<i74,T^\[6Vo]GbG
%Rko9Sp%%(^k3HY%^7;lkBpT:e=`+t?XiC7TZO;B$[gFKURE(#NZ]F#;=-W@1r`2%KgHU*j-Mu]+S*>Q*oD7Sl@r-WW37m=(%Ot7=
%jU\3dS^#(M(RZ7lS81>Lr4[TkF@:#:q4kXdT@udOXY6e8l-EGu2qC`@m`hH=]E#p`\QUjkNgJ@YjQ#Fg2tQgg>(;!+3I(GdADLO=
%Ha:84I!P;EE2A#PT)5m@C7RP<H?us'I!Btn]"3:d\9Kq32Z*%;`nM"O0Aa?YS8R2Tl!L#2BDXVlqe&uggY^:XZ6pP)F.TqVH@,Y-
%>*qBi>]">m1L>P0p?lmBH1Tkbm=+U(lISPgqu#WdQg[.g,h@aX;ni+4EDq,]iUk5]m6bH3V=7?mC-MXl>.sq+Z1R-uldO"_@es#@
%U&<luVp"qfkO`D$&W6CsH*D;aq<aZ8_WTXPB7A5JA,aY[qSUjMZMF:_L%P*+p;Pmo@U9c+h5l'2dIu:$F&h>ql^*[7U@W'enrr\C
%`S%fniPj3$e)!04F1HRDFEDe/3]joh4MEp1=pM/c.&M7;<'D(5YP4QMn`9ONktP#mPU^;f='Y-XXLh!K5%IqP[s<@t^AM<M3]qoD
%^:M"(TjFcfh7Gj5=hM8YD:[,olC7)$c-^k!m)HYS1s4OMQ-Jlh[i6F4eUmoAVVd?-inh/.:TKb!p$9;(\+ZOt\in5LbhM9h]&Ps0
%IUdZlgPT4'HWSn#]Qea#WI,jNYGt7=p/6$[8bl=;Y05.+:J@`fHhC9"YMEH$4foCnE5$dCEq-PD>>;ka@_Q&R\+K.PHd5k@X\*Kk
%L%P2BEUh]:D6>Epg&Gt@RV`^UB$3;nWB<>&bWOX;(7hbrQ1cJH]QN-@4l^h(3O3V<hsDoOiokLfE*L*hE&a']*u@D,3f$p<5/e&l
%LOW#[V%>.GF<*R/81e*Gn,J\fC:qcu:o3c,i2p)M%6SdGO^b:C+>mp`q#Z_o%F7]kUDFcUO2_]XpCit9e:X]QP"][\K@2&7Z&,L.
%2jU=<(+!0D/45+MQ>(%_LAJe(eb%l<M?b@76RC*H*>M7Ch\B6U_#g7)j("2=Wc(N=-$2RjE69+=d%)bdHL86^)s?"B6qaeM507gt
%Y-YhQ]_p/d8k6IZr.=,&?M0*6Q2(\p*QaB4hunFYMmjWEC8[;>14`<BI[6I/4/k9ieJ_GsEU8q4m:MT`=DIYl]IUkFZ1?m3(?=e"
%A_a[_im7.k.@_q\Wib"X"mTC6%`XMsHdsn>hL<psn/,9ZdRHal%)1MRBeiRFO?5?KM-R!HY#,,VT%l=#%87G+8pDC5Q:XU/gd<`c
%C<:N9#I.qQYr$G7CfAD2$ro(pl"m)p(;;M'dq"94R"g>-9J%,*&)N[#d5@C;Sg%s-Ug\r*2:YM'3f/DiV?+1TZHWtE+=`OkR!_NV
%Q:t#lA@_qXA6D%6OCVWU;T8\7?UuFXk(%_G,XWaY3"@_l=t2'DhA9Za!l:W7%;X*a^aDLt'Z5kbj%6=CQ;'UQRI`J\IP&&2_RfGU
%WT$&q>W*kF,[qU.WKOD4WXt8mWlZ(l61`;H>nZT?aZg!m)XW&P+C4mOq6#tg1&%?lW&WXIYV+5YSVjt!V<#7Q`Z[F+A4msp@=Jg@
%8)]kpg_&VMD)u9NJ'4ob%!uieQ<-uQc5GX!f@!Z0Kh/'EcN'E5P$nHq!UcGW"DWR.6pO9V229Bi%8/Gbh+'uk#+:;rJ=ut:'Y$LS
%+KUFPjmb/m=P6_R@I>%*KuLt,@Z3l$:om]>8[WY0J5<&<fq@*:b]o:X-Hdd0L?s2*E_m:LKWqnug?O..DekYL&PLJq=/"[@IVClo
%T.#Z5aT-d2JAUT(r5+MR$i5Pp9X+OMA%utYbUE8De`J5IQf&GYF?Bql.KQ37a<osN\g*pb@T5%Ld6KA'1?_<jT"g>3%*#fWo^c>+
%1"*ET>EerQ!ca0`FdRN3fuAlHj.H!dR$OF=\o.6UPf2$*,B*pl0`Qnu!P!pgDfgY"?'Q_R;K\"'Lf"UQP@]^dUC;G]\`Y%?%P:g-
%VQ,[YL]&u'n1_\r5cSWlee6$lN5M?#'$6H-*=-#Ne/o)4@XLA6'k0"e;VO++E=_dhL/1$u@0dN`6dTP9!+>q^,!`(W7"QR>=M6%P
%3*mm&@1Wi#6afp<Yh,+^Q+kX>>GjGoBgBQh!?(-N"j*u#=UeEO"tf>JWC2q,9/en4pA9pnGemb;<J^n<(;N'HVE&b%8HO5Flm41^
%dfXr6J+4UA7^:@j;\`cj'd"/!4G,>H$VW\#+t<a]6a_b[:lI1="[;32SHX@7;f%^Nrp,`@)_+ANOG^)3R`/,]'b]L\?%>(BZABHo
%BXj(sj%;m2<HJU\aD<e$7"hPFAK+*2K:0#?A.qOB1>8C12-l>TPp>4mP&<h/;#"QBeckQj"LBeV)CAG0YR+A68+Kg!$q"LF[25aH
%g)5VO(9bif5`Z,^hoZKrO/gcT;)<st"P>J@C[ci_:``-17c]"JiF,fB'HNY!lt\lZ7!f+"1of82V+nbZcmTl/e)Cq$M.C;r?u'5W
%(5G?kYh<8%;?7VFg_$1kduk$O;%7-ub)2m.8n@>3'(-GVkRc*.2ZO)IJ8rL_R;.OC4.oJ"-NM5\Jg.3!fVIhj&,A7u`059L<"R#@
%NiLfrC_OD,cVn7QY#8gE(8@gl9GG?XRue=Oo8lSl>fSEn4Ol,[R.+&A&er3HHu<VX+Z835Mc9R(EeOW*dA%`NW?F)k;CoYt""L+s
%2)5+9Z(QLKh&h,N6%BS)qg*L5lNd:-"D\6^rh`LNN,)=1(Yp4j&[SGSL]o[f:'<CVQYf-=eZpbAhoN)u2!PVq[\f_Gctrk3&6))3
%VT`W]RK_#880bWCf4%t)1_&'pD2k;+@T5dM=bWua\O8i^>H>QbQgn:L;.L>a!JBX?X+nWV:g]kcf0Y9&WL0@cVQas+r8SBU5oCZ]
%kG?h;2YZgmW6eX=hu-_u$XU(agmTV![7`:&h*)/7$lri;[\`_LHo6*Kk#lfV.%3PC5NMI01)6d<)4'`,Yj9[!QE?VsW,-12$HUkN
%aq9n/AW@ZO-J5Z7I`B:*0%gH6ii&qG2GaE1NloG+@d+4ijgas+i$f6fpSc?/5imH<b3YelBL[%Eb7=s'0Qf0NIIK/6"I:DBQLAZB
%j$k^J`aDqN/4nGF,n=i5Q%NY>)F1//;g$:AEL#HcB+/Me75[3c+PRp@$t?.R-?!!V9EmpR":g[.Wfgb1K#prOaVL#?^8pN*,gR_]
%j&oPgdlK0c-^&=\H3Yce<$%5`WXkIXSd^P3]"06QVIFXTZDHI`4KS^L5n$IljcQ"l1+7dME2_PtRfo#j=IsD4-Aj7'3;;0mPi2++
%ij,]HWF]>\ZY`92$&)qX7o+pQ&IU=f@6s;g4fHS'9hE1=BY%W&?#7sN2[o;NR6\XI#cc"/&4LFFN+-#SW#juTBEnKY`+)mR8+N&s
%p8Z>hTe`:B"?eJan4YAa-`B/<W(_"]Ef>#*I(hBd-_Pj2:c8;u'\0MKTF>`J`NnNs*"dHmk,:IO)DZ7t@T[EeMF;D>FpsTEK!#X>
%5g=qe!E,j.9B@7VQjaA]8.d=qf-WfF"I5l)PmnI<]M+k,,=1F<TX(9-7uXmlTsCA,P,r*Y)@kO^,)=<'2$?TI1A)Ie)n<^Z-!CO'
%)apu+MfbUI8tiEXAi7V>=9qFV:q<VbIfbnS[`BbnS=oF[6"Sf6<'52eT^k="b.;:q!&GpMSd&9T/=f71$`Jar<E>f,Rk;lR6ior:
%T#0#=SV>l&)qgGjRkE!#RRT7L3ZLg\12W&+q3e*j)!HX/*fbIRMr7-bQ"&(N4IE+Lb-iQ7o&.kFEDRE4^R4e]s)h:ALnlHt]4b)>
%3UnWWbHEHiTT=)NY@U;&Ts+ee#&_#Y<K:7=;0BZLQ(8uTWIV98FX&E"N(,-?aU#pXZ>;ni89B:*`l$G^UO%kH7A5&f_T*lZ_a6>G
%cV:ZWI3&fcEO)Rc7-r9/@P9+M/FH`nfHI7D6fnN=mfCX_F,";Z*Pb>W8Kh[N/r)h9Q6Ti=Qp:Z^F<4J>#q2TlJ?l=N1-9EkK/-8?
%G2sor3asfpK-PB/gg-6LPS6lbDGXAM*7Mna*UimW62BC#8-k>7"8=qIR&ntuA8>?R.!&>tQ$KA?R@6hq6e?V,=L2"!<u%b<QO1[4
%2iS;P-48n1`)&U-1W'-I`8P`\I1fd[E-]TG)+3?'I=kWL\3,&HI/bKW![at"0em.WZE6[u\/k(Y;0d5NUP96_*<_5;OO_>anhJGn
%h22507Pl\,bQc'[P%EL/k1C(LiCOV8pS^jhbR#t!2_YoX64<tJ,f'?H!4.]@+Nt<K#4>clYs3MUMhi?(F2SVDD$d.'"QRKZ?.M)&
%=i]Vj\\j>6TF;HsLMDjgYRHQ1JT>s?&l;=gH-/DjVOB3Y'/.AtJF]<??UnY2E*3nP-sg.D/Asm/J`3YD#2;!OKl--IjYD(RBV--W
%e'e't7>mk7L$&HT@XTRHSc<,+*,fB6,c(%a5Z+j6`R6eE0q]<A<%-GNlja$^6]H,2W$o_(]<a`SotX#$gG'@H9Q2`&`IA=5EMfD/
%*O1VlC)e$E>T/"V5eu5U/r,5!71>$P>%.^U&pl@L`<6ui!uHN#a"T8IO01j]o2Qt'.d8d54%<#=(C'aNQ%/m)nLgW9Z=KhOX#7R\
%*RC"In029cplPC1s/@>,X?]"fZRUOZD4&uH5KMUb<X_+U'7<O^&HRq]W%#B)%M,gYGa'A*=,L,=-[]+;J57>BZ4.-c,_QnD\TQC`
%8+F3P3`>aM^9:GOJi2"6=l=Oqh9h0V#La/S*aZH0&\<e\P8"o@)=+2Q.BXKl:BBikbLFiW&QQbuQ!VSL&[AH4P)=9]0u0[obnIAo
%:l6u6""LS\q<@P.^Z]C+8@EF$Yp(BTcO/eO;$3u737Y2Q<sWSlY'.Ei\:"o)`O>ZCdB7Hcd)f`,C_gp'hfdV,F^XO^@f9q94Z2[6
%O,PICrWip-;8@V/1i,8t2GJt?8*GfJRGDq5U>lhsoWIC/1`WFqJ5;o?$:cZ:6q*AWN@5($0qrLJ7S:W2cDht==k.X@"nN'oP6jaq
%[6T]-CiD4lZ6C5UkD1:&61-jdnke[MKDWoG7Z:/V.fF9s8er/*7E)m_K`HnEn5+kX5+F/Hrmqr$n%I0P]%go0QoQEME1W_<EH$hl
%*"p;J'Iulr[Fs^#e5YoA.4pRu(eVTJe2S/sGcX`J3+Bg4OFN3%J8ocb&i<A1Ge2;T<,)-`WJ_R]T^gjc=AeUo<lL$8Yp-63A^Kgd
%*5$8j%Zo^MMO99[6(;?aXN3)Jd4@A>aU5nKXdO0*7SeeJ._I(PYo+;i,6bU4UHSu<-bqk+^hd,96DcEOIKIaf!G5!1<7R$>8jgEl
%?j8,^d5YTd-\@j"9@F_/LI;gEn[/CLD(pl*5@UR""+*SEAVHmU#fX%,L;d"Q`fEGcQ%(i(0e@r%q7IDgf&a_5=YVd*erqLQ#q5gf
%:c8Us3E'QA-UEj^"3RKuhI`SdPVjY![QurN3MQ)KbY\Jd`&1IRL:<$ETOl*X(1G]l,`UGK#;CcMWebWLit7bh+WQ=@k3i'k^ml7b
%;iStdN/+b9hSGc`o.0r!mYoOM@WVUVBh1.ufL@T'Ni5&oF4:aWnP#QI@`W:UPf"=lj$=GRfC_*W',8C;di=]?)*B@bjW;rDE&fY?
%V];']78b\"gt_`Z!OG*,M<J-I.hRC]"#/L!PcEsfZ+q#aQ/29!`JB3'%;:A+XSK]"D*0.TKDeFWSq<91@S6p=T/EDga:hrV;f.Q;
%0c6.jPC-,_4_sUrR#J;?<D=JR#<hT.-^[$%'19g"^02.aj'RCK<<`.Qkij%UKspK;r"R=.3,0U+eP4.d<'+4QMl<og0M>IJD:=QX
%X:iFFX+8!bacZKI56,>eUO%l6gBR\"`+<%?N's'_p8lPliA*mW0Ym7O:1H<#jiPJQS0)LceA\:XCutQ]N.YXdNlqX>Pr1FZD@r!u
%jVX*]VLeUV1n-j4'2&hp3!YO]6QTtN\imW1c;J-0*O-FA+/8s`gg,g@NY=CDE]=7BK,E=lh*^ig_sng.0VW`B0hhKs63DXVfG5&Z
%0TH_o=K8s.X+WEO<<H3SXi/$m+O&>FR-i:",_d4im?"pklT%93`EcJ7O>ubS:H9-LOV-7jan":&61OnZ(,-c7/Bd<t=f<Ygl**6S
%((lgU=i@8Q42I(je(.u'#7HT8fPsI%ofH.`Jr>@9$bVMMZrI%pLs</c(b,)[FOqmkk/9f^DIg1d"U"0f?%gQ-RI@QRJk2o9GM($I
%;pD]B%^-%+jcMPmAY=la/*.TVj%_J^+s!6_+sVG8L[0Pb+NbVk]AV<M$AjrJAF<<e"ITp6SoSA]OD"F^?).@Z,4clcJ>BHk9/c3,
%@hGUU"o#+_/Fnuj,<p;_r+?@B\J,7eDu.A1@u++"Dk:s-.:r(/G8'0rKs"Z%P]7(Z2DN3g]`!QIZ\uVj.<OZ,OE'C."=MYaC[*`s
%Q&=j.Qg#8XSr2qc<CpnZ,&%CD8nOg$hZ/g+0C?/-''N5,2b>kY5,!kMYZ0H>ZK"N*\bKu/2(WQ_P2`c'5ZCGh<j(5."OD)s##q`D
%6$>EV>830[]/Qr#Ad/MLD%8\Gar6YF)JFke'^0\$$]MTm=s.ran!!hd7U*mr0-LZ#H\qtrOi8]d)s<&i-sUpXaY28\Rbjq\[R=Yn
%aE#tMN*!I[=LeG=T&gdtW*D33m!@1UIUU0(b%BE"b4R+#oTk-OGa5%C3\3tW>D$(Y@^%?UaulgFHS]V?G#)::UW#"h)HUEKm[n9&
%al2Jq?0Rb2B#_fkYpceN>7?6)%%c>+iQ]W]Q.`=+po9-`8,r+7R^Lq!%,/-B.1/g.:aSL+'tPEJUKV&+j'jC-*nP+J7>j^F$'r#2
%WDkru,`lYs!/qa7c%PnO/u,1+b`!qFV;`n\W4;M)L@W7+%$fZJaH[X)E/?G]/td5b#Vt^Cf1?s3\k6'>s7lAa<>HF$0[EZhmu_pO
%!=3121)+3Aj8a#:S-Ppk)e^_#[]*IhFWOYjCf';GVTLml9MhnAGV['D+saI^E&;;b=>tnN1,(CCO(knuCc]-GG\SBkeNgoMR4Yab
%</inP<P5la@^.EtN,NE.bJ@0A'i+i:9aodpZQ'0>ooLOT*`S&qEbkr6n0FWq@aFo+cZu2BM/BLgeGooQ7L%cJ*eqor-)1.'>Wo1S
%^k=&cP4c8?oc:g^#_U(<K*?%rHj<WJqD(1f^4SWRbU/_MLk2QY=m3Sq\;]tPn`WD4V$N#YAXTHr#`1sh#q\X;kp4AYDX.ui,H:h:
%>fC:\bYnP#/V9?2'S>I!_*^U&2^,0A0cgrVUt_&Hds0FE'cl"*pAQG3"jD]**st"#6@rR6.)W:7h(<e7>77okR!-7CT,j8%=YP8(
%`"%RdL8<j9^Ic4i9u=#gUHlTh'B=q99_f@NAlBBsGoCgU\>1B"TVi,n/IXr(a$qsERGPuA4s`Y*23(jr;$hap#'qrl)>#1pceegO
%9pkl/67>FPa!t[B_h<!E-%X040$-g?'*4$59eHsg+]ou]e/Q8pTu/s[>/cq^!K!do+eTT[<#s1Tc(rNF>RnHH>RpM]EZgcrhd$A)
%:^"Da0`#!)EEH0c=]LZDrt8ER!fJBGCZ@IfQGDKI_kMjn[XTcnpn;mg>U%\^U38eudqAi\p85f+2$GX#P5Qt;6nsrD$1)o[d+OpO
%UoIfjg6Ta!N2T.M$km:F@3MWp=f./D`$%&?W>OYXTONp2N@1q!O2Do*_q74O+WSVe#'5a%!U!dZ)H8F@,]&;)G.aFT!F!KDLmT7!
%_^SdHZlS"54B9fgAAH*o&.%oMJ#g;]2AkD8nMh+M?uW-9#UWtlcLa(.7d,]^oHN(=TcMb!2+-g&+5iGp>Ntc%KN-f.&EV9.qI_nr
%QDF0/B:(Xi&ki&h3Y57^27:A#SdmS&L4TYT!<c+12\k>O#m7@F6D(8mdo-pWAlBZ&!8Nf#c:VaQ[lg*oVkpKRr\)]6.Dm^.a@=BO
%-9tI=L2oiDmGrd71Qt18BI/E;6rn?L8^'d:\`U#)K!@&j7Q)*f#.p<Q/;,6f<cUUiX^mG1e1W9sZBDiRn5!0.6<B@G\!9)0-B#f7
%*g;k*fTK[se$RWucWeLH*Z1[O&j.:lrY!m@/W3cR2S)RY79G*O`F@sbdg3O\W@S/TSi[$6XtZK&Xk5*nofX<6NB\:YOT\*MQ[p@6
%WnL%m%*K',-U(Nf,X]"m$mVL@C!?2.Q[r42)^\-rbQO_NN:DG`0rchGSd)\OFM0=YJu9Ib^:B=@nEb9/=l$s]_Zo=B^O'\t73]#e
%lnadS+idm+)1d?Y7jm?(SrAks^23P8(Pk:2*c4.[S@OQXVbnClckA45%AIoG#kP'id.>_PU2,FQW0UEck7>!c8O-pGL>RLjXdXf5
%!.ASnC4t>dAKG80_4^UCe,lB`bQmMKOeS84_FVVrm1,:'ZXXA*(&cDn9BbPN!I>\SMD*L-jl.9Ve,lC[G_h6(*(U:..9?^Dig>R"
%):r,:6/B+V-9(k<efX,_%5a/`F``:4N:hg!j'!6IQDU,l,X_>!BT*:ucUu/3;\_Ym`QP'Q>UOl_)XiFMnYgTJ11I&@R2D3/*QsID
%XfGG+G/>=^S>]mr5oWV#`D-bR+@GL!G5e:&7+Hgf&jIL?7+G[[#'Q&b2M7js`r]3K(gp0U-[&Af:EJ5;6HmisZoXhF@l#Zh,Pg+/
%He.A/DG8h.gG_=PN1:R^@2Nj\-TNXF%s]u"G#CS-VIn+U@>k.>B-O8m29R*L%0WFFGXj%)C+[(&"uch(5J#u!-qR7(LuV0#!m[5#
%S@1$&VP:>j!XcnfN_1JI`#.G_7o]R:9nKW_nKb@c!t.5J5^M*m7g/rD0hiFW`J[Yp8]-oK;'?(/PuNjcLmsK*j>daM^))r7#2uMj
%Hk3?REeX!.T,W:QT2@u$]f=QG@T5nN&3\b;IPY-M^q`*".pFLIH50TLquGq4;`4F)pCFA<A=+O"U_-(@A3:OY&K%%<M6%%!Z^#79
%qe(SRQr2[Yhi2'%%ukSZJ<6nPPQ1l-3_eWLL'f+l'b@2\3"i,-6>B1OE7@]A"GK7D+ljuI)FDa0W^2aQM(&jjg9tnhWduC7WZe1X
%<!,W"<C9SRU`-i!0i8C:C7$$l5Z^dZaiBgJ#0TmMh;(=Q>eUHn?s5J=%$keXF([IRd"7[<VTZF0mgE&:NU>WSA!u[o1"tu_&^dOH
%0^uf%/g4lo>8A:82.@g22;Au`T.=$R7UooE-oY-]n2N(&W)"k^g%22aM[>bFpI0`GRi2ZT`"g+N3*nRZ^iYg1?a6al&ICjJpHHC;
%+J<k9GTYQt-OGAR#G#6A'$Vrd'naYrHu21O=6Ye^Zji?td"5MJ;>]sd7I?-T;[c;r3%FbmrPcsQ&=sU+_GblKq<V4c\m%QN'GrP]
%)DdY/KnS"g(e<f5V;BFhfhEL)VrAYc1FrI#)'d^0'>\/._%&`>\Og;!##o?Wi8(Y_]4"61W>K,e0.brZUd9heCOA`._"t;eQ37)e
%9@+ep<JC6WkTCQGY2Fh0jEV/ir`iJ_kb&6\)IADsdg:(l##A]Ed)g8u%%-_I<51b))*s7ogZs:m&;m(9fC.0#PEe\W'TC-@Eb28!
%Nu^Hd"f/Ff*Q8)SO,.Wd)NP%Y!e\s5!NCSqr@9dW(=3?824GB.h3YE()%]6&q;<D2B("lOV/fOM"K<4W4!%W1iDHEj03(TQ/2]o6
%)6U+u.k%'"A.q4;L#j.KiLQ_%j$=hcE0ZNSG]8puo6>?lgbh]F%&9lEVPI>*`YH@SHuAk$/W:Tgm_u/S'r++*LaucuGgDI%TY?4a
%0S*pJ\Umo,Nu2rWl@2+d"DEK$(n<(X0R_,Y,P8ojC'C$P':^i7E(a/i^9KME8eC@m7I>V(!dmlDE%?/>,J,KCm9atA<`j;mR(F1T
%eRJWc1lWZN:Z^(2fZFEd1>ka$6nm\AOk2CH"nQ)(dt5\b5h0;cM"?M.&B2LZciL?qDF.6`k<,P<%&XSGQ(rBb,:J3mq:rp\9ZXa\
%VtsDP$Af[q],g@<'m.e03r/AN6,V&,emuu>1d!ESg0B1md^Q(eTbW4u9XMZDedB8W0q2A**o#On)t17%Cpe\F&.qSm[K2Ue<%*u?
%9,R+\MMW9KMCa"IMPm;\A@NLRMe*W#fG&o^?j'ac`Fjfu/h9s@UX05jVLi=jj$?^nh'Oj3[1&6/>.%\)h`3I"@eC3?*ENaehDa1F
%h&Sg[pWm[0j&,im&Op0Z8[Wag::4M:WiFi6,DlP*;,S6Y3ZuC2)OE,p7pL3LaY,S2i:&W?Jf@Rtlss,E'K]?55`1O]/n%_=0Y=La
%r^0&VLOkbM^I];m"BSPZX^h:f#'APFq!gj2FPk-Y5sU<g^F3MMXJ5&*P$`*Sr$f-:87LTi:VtdQMiE(U'H_g%_QXqUG$Xb]ZIJLo
%%[EtNhNN_aha,jdWog(H!>BVYpV2L5!i*U`:ZJBE1'l`9JL&4?oJh\5p(J#p?r(3FJt1al]H`FidO4/9m.o-4UOl_gr8Y4061=&c
%+WQ=n_@q</\X\7$FgoG!4\QKRLU_-Q`/+.Q8<*:-8<$dh8LDZ84%K?e<kKB5WZ%n+MJ#HK*e\dKPa(LpO]#]F&3V'mEE#Jf'QOk^
%1:C]GZ-%3ubsV.-_$+l(lKF.V)XiT7au(oILo5HY'H[l1U1-bR3k)ZTJ7Mh5iO^9V`Od=e`k*FB4DNiZOGLh0'-f90UYN_dFgk'E
%ScG58n"e:CpQ_cp?ms`(oQiH`nbRZE@]0`gUS@M*J@$Y].dU)rUhFkNT4['0><PFW#n;V^6o:Qa_U8Uul+eRI\9#XcUgfi_T8Lip
%R$M(G*'TCs/WIcK$Oboa&MkC]@%,7jW*4DgN1`K#O$\>Jm5UtTp^LsNJ!LC?6W#FqMBpG%rDF)1eegt)I^A>WT&8EkUZur.#I:8d
%W@44^p.<Wd/A%h`g%;,t_KaTsG\P]irKttT,,RgHQ/K'382<ms9P?5FV6QLtBUB:\U+#$&A0#9Q]#E*sQ;=ePr/kG*\kfPHWX4bQ
%Md6gQ9cue\$U.S@m@[lu<]SW03h!(D:%'urmU9,;(<WlL?bN>(Cki<e`Q]0OU^/hhE:4%?!al0;L':9:ZHA=!`c?\.4n/I,OD<e+
%,GK.fE>6/e]]L[h)UQqMB:R-Qa-m(cbS;%Xn1rjV]7A&S+ipfVAHr^$5C80J"i+k&F?>gt8JoDT=rL'tkSK4'(1KZKhBm-5p>T%*
%C%/L#"`e:1LCf"u$g#I<+p-U_B&O0?$qZhOA[,GT_ri6#_RqmlcU>$>,mk0+Dik'a,Jj=9'6P3jpl:d'1ub&UFO/El\mbYiRaZE=
%7//C9flWJY!AN(ML"QX0!QKme(`Gcm?ljAg6q\8uJ$V*YBQct49puR0Z\':BPJDtt2UsAk'fWIdIWc<_8B>mT!:GcMn04Q^OcWQ'
%R1?3`T5@,bAb&gD#$A9P.r/5i8"kmgliLA3Z59DCFULiu>+iM+*q1'm1^&T8CrQ.uoNP95__joY79>t9H]2QSm;r\8_?dH4W.a"W
%!G5i!@HhV!9lTDCWWW;K64B?Y(1L5O1J*rqNm"+TQ-8-;XthaM2N,U"(>F8)`$.tCjWkW3<8cba%qjW(`E*#m,#d(F7Hh%.c:F4q
%(1L6KP73Yo>j$.k:$$E*mq"stYc%XJ>Q&aaosi5E?bQgt-Eu^OU(4aMcg<$_pi!sB!Ht:]M]M.VS"ZQ'ko06k#?255\1p6M3N=Z@
%&6dPtkf;2g3orrEV#,ot3NB*a;^YnA$@1B`P2ZgGiCdD*;]I^sWQ6k:&2?PkPi/mn5HW;ul4q#ANoVu`1CU5`j'J5oe1`?tCko/o
%I)$Td:pco,2Ik`$g*^A@p0D18:\&eU)3*%HlSc(hVT4`OJuHnj+5uX'WKr+YaemJE5X;rs1lMnL6:Bp@"]5cCWIMp=0Z$ORM>n\Q
%PlJ8n!&k=K`)*$84M:,g7^f$`RSC91`[k\Qqn%e^9,So(ieY)_ALXq)R?9T\16adKB.3B$cqk4pM!X2aQ^F<`nf9NNEV1l#AqSKF
%&n8lijbUhoarrWS-qDe6:_!ki%-=WmI)%g.VqFt^_k!EVV*"rTfjIk^,aS#NBSO.VAd$2-qp-\e'0PDf0qFus?3Q7^qS!F[0+*Q7
%85]l@AgC)0lkg$^)^'_'`$_Q3*bA<'$j3LQ)2?7\07Fd(,3Tm'QjH=&(ukYI@oSqOapK3q]N,J7isXg:4u^3EnYn_4?CVj30Ie;`
%L@/)ico[6Z@7K%jhJ"6Ylc^BP$l\/s7Uh]:,s("gl@]aq@chdLT/_:3bBOZ8VYEb.(n6(cJ7"S:()YS$1lJ+Q#uJaY*lu3^X`9Mt
%Z?tZl<)"SGn>#?+SVib+keX/VJ&GrHfTNC@$MPYWjPOhkB$QSa/pODB/t\P=WNJ/TX,!:Vnha<"MVc_c!B&^=!L7G(+OLi=EKXeQ
%Ak*riqgf%3qZ-(";Jh?\Kn'm+LO^<3M<OK6M5*B]'$h"_p">A2$S0iZ2@jf,O_#DT52:r9*C*grP<!(q7ause)slbg8(I)=?7TT\
%BOZYakidPSQA-,93ab8u_i,4:?5BC_;*'`J0QW98F&D:(Mu1%>8%H`T>0d[(2]3pUbWfm;:mq0HVlf\WE=+B0SZ^s\1K.ml3=<f_
%Bf]%da@enVR2jboCX?dc!'Dj5!]J"g(m2^#CDBb;JdBG)B/rF\:lPUO4=C<8RkSu,Rtf.?Ua"-08G+!b.LUnF:iZ"HAo(LI##Fc7
%nX'4m2<<MM;uI%mAVA=TUD4mCZ3l4$a__cV0RKW)c<aIFS_sgBWOe3N\ZOl*S&/]1ddTA7LM"?D85'72Ne<m:'91$sYZ'4@>>?tn
%,Yg.Ke<jk+W4ljLbMY3E^e@EXKT*r.K5A@<-)N=DC9s9/Tk9*/]OhGJEQo%l"3hCC&S[!f<r<W"5q%V?U)>:P1X+]=7UT/([,5RY
%?']/Y45Z`Al+#Q,*Yl#$mf[&HNR;?N(Tmm?C>5dC4&\*_BC/p3,h'ZE*!sN&W`mGR_8<#d)&!4b=W4Gfkp`dbJ5hJI(f6>2h1d?]
%NGB.jDCBbm]#C#POZ6r4C;=tV?!+T(QMJ/E)<'-W=Yl;&Y-;k_6Eb(a])qF3@eU.]r)uK4\uG;/i^d>I3GQo9;0HA`7ceZ]_=>Th
%##%3,dpUc;q,DHpqTG6l+Zq45L8XlaF4g_^ld7V?ok#H(q5kV._@"b(28['M(smqj0b:54Yb?ii3MJr5E(D".%_S*iVa.jt^&p0c
%)AWeef!cV6Du68P<`"GM`eTG,hBQ&&;DH175kSd&L/%gj"]QFnB5,TCl'K5MHtG(QL`.u8`Moqj>T#gXoOu-,ESZc0ekh!,Um\s?
%U6C#]d:h:tPO"7K22)5s;22UJ-d,=)TdOI$:qFss(L@GZFbXE-,K<Q&55GUDPj!Q?5#@/+&0DXu>RN"o_\M_f)JdW/3[(0E:al;a
%*hH!V21\UJ;.,ZNRoip]ORm^%(<?_>`:ItO1l7U<jpU-=4u[qd(IeiopYs\qMI@Z*6Zfft"($1.]qJRs0;M1B3u[kcH0Wu9P3\.r
%I,,C[P%93j@TA(BM]Jfqs*sb!Cr`h,3>27Aq1j32'Mo:oQUc4\^bj%QLurZ,H6NW-57iWY2nE,ujPQ#TLmf>GpUWk$?XbUj,#Oqp
%pXl4KWMukS<b)Ej^eZ0*b!?u=U&4(/l9m,J%18jA\8XRsa,Fs(/r!QlI=.bslAcsH3j;n:2n&&&QA%Hfc!DeOQ.=<m+($+&a/i`;
%X=:&'Ai9J7q95B->BLo`\<c)49Qfud'B+^>F`^hCR\)+\d4Z>!n2$XA2ikn\Gp9o\Srh*#K3K#rq/_?he;X]j"EEJ&EPUB&+p^ll
%H#/M!6[(g,U4#]XDVfgZOT6YsMVB8SpH`[='9.2:Wq]nj7mL0=eS>`^4W:hZG][F1GLbT?/9>_Pi8C%^mur:>=Dfj[Z3`L8Utd3%
%8;\d:'(GG/-+BYZ".JnS"H:he'qFJlEUXH4iDf9!:'0:$G][g<GLbRm1"/k^?<qr[n5j/3\NZYC1YqsO)]WlK'L_qmf3\f-I?_:G
%5<SnrITcsi3j6<k_dciOi\nmC4g.(7e59>dpZ2h#YC'[N#+aB'n\\iU=iF\>pMX^C1%c?or4`/ZW(<-WB,9qe3D_6gb*0mE8Q<qJ
%]a*iCh]ZkcTP?K>lIZA;5S!K_\7'WI4dY3Lh"YikOO2%k`Y#m#g3__lY&.DNIG1\\+fcb6<:/KL;jXX5nl=^HNr!]G-\\66nsJ?,
%rY(fb`BOTPC$gGOb5$$bUS=(?LV4Z1fam'.obmDlgb_BBq&`rs\K5m0d+4EpWYQ\Q=eDkXnZB_oG3.Ra]TE.]cN>lK-/@FC#\=61
%Abe.aa<>*/3Qd3.'2K>UqKU[QU8J#o?QX<Z<Lf0$O;"YfmY.W5f+RmS3KI?4AlM2kHeA@^`[9QaO*cJN1gniaDV.cX\VYG<%rBP[
%&/+Fg;nY+(o'+khXLJBD^=kajeP>2aeA@':0m3CNEI?Bi2;R@T6\SL[#&T>[d+.EV\CJ'(ah0b!&U[WLd]8>D@LGZheF%W6Gs_Ti
%a076_/lk:rc[^+E'q>`?1p8"d2hbS)8=88G8t(GY_j4$k1,bBT9u[[Od<hRh46)%[Z,8qAlmY*D+!T/HTHTCLBPcM9HGTb-"\UAb
%E&[`W<^L>c6GHAb[p2[N//I>OK33`T5P-jHgOqYC0,Rk+?%0F^nKb%`M;Gmurd)8>?Hr:OR3Z!c+"ORuN0tHhjW&8T)n>"jfhoq^
%;oUGPUI?Mi`f8rk9-o)?_Wo,D"c_+_,u6r6[_@IGD,$Kgn'I2[kIM2uDig.F2CFTY2QlK1r$h)SFYE%,/*#o(_OJ]3_4<fb7JAqm
%cg*OMN3%d5li9qF8[#OBFoWt&S1Rb->_W`:l)qpeFX4-CTd)#4JK@C.G"`cpNZ+5\`mL%,qr;A`meoubbU.$oCNL>a1$dJSR?csN
%p8gA<C7RG$=<_uXJo?d:k9`ZcT@rnt`Y:?"8U8&5/)O-I-G1_fH1dT`^hf8f,OXXB/]d24irp[qL2Q@g>7$@cmn%f]8TfLtL&&hr
%s.*-`LY<PO)e`JBAn9[]7oGosgRVuOYq;`r!H-#'[dP;.hc'*YDi-dZVMKK+'##?\oY)dR3h'Tl/*4\uc:r<BGQ*hLLA,EWAG\Mg
%:Q5s(g9aQn&bcbU<9"q/;2t%Cd=?/#9X=/i2&k0Bf(+f9]Ri5IpH;MP9o,MY/+'EKK+>'S%GeP6GBA#uW+64o>)r&Vj*u.^]Q9)4
%4GJNLQg^h$LOMKU_V[K-prgA88dFB^]!NSF2+XGVh(/g:]%IG!&fsR#/h<!0MECUhK(,ooIr,Q[\F\[kZ-p98bMP30:JD_`*pHR*
%*`mN/aui&A2Vb-T8j62D2H?eB.E_t'/'A;`.E_t-PiYoeTe*CuS<W-cnrp@a`ntE7H0g\g]\,qZ5+l1_?Kas^51$,VcT2P9q+?P5
%Wq*d%r9L<(Xb"d[B6nXrRobk^SsH:O1_aft4`4tZ@)XNOm[7_3J.c,A;/Fi9HHSgrX>N)Hddh54QBl/R/S!(,a3:Tj2.fM)ZSd,'
%b6,-4[\MKY?-Ic$A:ooL4<&UBjk7K'_5!#:L2/6PVrd`lX241[;r6!o]UoN!BmIF,0GGQ4SM(dnGq(bBIZ]p$BPahi.%kQ.mqI'm
%cqK7:7[Z:">[6J7cF#,RcaeHrb6'<*I&,j)&9H[VnslE(MA*#PSdJDoY%@0(j)MO([^8/d1q'bRS'WLnM0A$j3C>S7cAl)JS@po*
%X0^E)Uug:aGbjHSKXX-07(b#&TWL(!<6a9WS"70Wc0]4jge`ep@Hg_PCK#2#g`g<5S8&\9BbE)LIZ0;A";.`'nM+8?!+I8p@j\YJ
%JHO]Uo'E;dc@LnQO%0mLWT/Se.(rRS!.L.0.=>N.*51g]n$][LZ?PNRb&cBqf9n@]Ppb@!a8BYh#B!;1nfC!a2e^B^:Wr>mddkm%
%a.OYdF&0MH.a4KuT9CqDh7kZ#F.ib_$C]jn'C=).I,R?bj9n&L`!AjR.so.\Qp(8^dI9<p!pkt#\c)-"^rLQHYp2d0K`g.p0C5W[
%n>KiRi=RNQVrda7"6&AV2Xea(^@U_L,=El.0;#KCj9sk_0oRb3\?)2qL9W[LG<,i1O6:tY]A*(pP4@i+p3^I6[%.U54e3!#C+$p!
%j#@oW@nnDhCA@%(i-hr@rFE^HSTKP;aflrCafs.@afqK1A6<so-c<>+hbSur:58MM4?pg,J=-2!IjVeiqoS?e>VL-iC.b_8jas2O
%mV!$^El!]dmTQ`86T9.;-<8`m,Q#WD>+1bZ\=(QPX*;_jZaFer"]MuSjd\*EPTK8(;JE=,2J?mNL<aBQ`N@EkbNA+;k(,Tboq@r^
%UO(]j0(SSKckV2f'.6e@,EMQ&fr5uQHG?4%VQI?WbbNm/.(0n/6\.2>UaX+QF\MBEF4IN]>@TR5[e_Cip$Gp<?SsDGgqc?'0?f`J
%Vdsb8OD&9"b>X-FSJ'%V-<e1gZk=#rD9\(\H$M;ibKI5eQ8<0S@qO<F)RCaPfc%RNk/!TIqURR3Jl'V%\5fh%7q/&!h%K>GW-Yu(
%0u`X<']1)hcV58ch\5VZ5cPG9p^=Y:OVfYI9Y#$?jqI@!igC0jG<'%$ZBVUC]!/*#TrJgp`jL/+CFOu7j+ejnc%[3PGo!o&jk2oB
%QZH,Fd'Ba=S7u,<X3\.(E%.o9:*5RpO?Dp/A;?2@49rGFjk3MshbhM8b]5#I[n+[5b;6L&RRqdR7<4]dm`"QV.F3p9npnN[K"^c?
%PR!.Mj%<0-oTPdbI*WbAT,a0(AqROf4PRli-0<fWA^":WXK4HQ;td"L8$hrc4Ol5[Hr'"5SK1bMNZ:W9[U";Sb-UR0f"[u?-&"j"
%p_HGHSm$^68U5d?'B/'X^7P[<q*]I'b4F%0gY2'.k^6/tH$7]Ck`f8jGKb7kF6sqm\pI>H;TGqB>!)Zo\!PZA`?!<f*+qbnMp>Y!
%jkADR4d,C&%9u+[]!7.)lL3>!b&^Ol-fs%.R76:Ps2qaUYnV+JGn,[I5FccKMHeGn*+qbnMp>AYbdFe-]-ZRl)L22LkhIZUWk[Fb
%^g#BT*OR^Q>Pi%gQ*$fces/rR`t+NlNoCQ4aF:FUKV_8na30XFliVTF?.il+qVa/)<cM4>I0NXHMnPK`8)WQ!>)gtML"Y(9Zl22b
%'"=dh!#4sDZLUtbOI=GS"=!6P\L?U[37g/HCRj-<1MZtBE%bN?OQP;`=lYIbQCLg\pf&)WonZGYXt0=JDp,5%aCEDpEQE!K9=-3H
%`<hq=/N1rg?gL3aHAoP[,IthN\g+c*P1fsJdB5NRk\/-WAXg0We?*MKI&dk3P&"n)fTL#dJt(sIh3kD)KZpM5-SX5WNhVmaj':ck
%YAnI;bcc"WD1\6jXbnni>B33di_s:PeK[EV:AHcI)uFBFfDV"BUPufmEgI(jb.':Jg;8SBbc-\/b#25Ud$E-i7kOPU<npB2Z.6Ht
%f\"ofA_<pk^Ra%!LfRT3c>q(eYsV#s2KUj(.rKOu&_XfZ_Zo*\:<>@c`rfl^)[`NIZRiWkTHP%C_(h-h&G;>!7).u$V^9sI$U9ei
%'WRKU.EP8d!ORPg">Mb&<X5*c0o7]s#,+e5pQf%dW)oSaR9W*DoTg#AOY`qE+Z$S3?K6GBQG6tmec7a#@A5XLe_[-j?Gtp3bOW*,
%F':ITf:?m4Et):9$TGAI8D8fD?+>TjIs1afq<RW:fl(5]\`0db-i'H3"qW`#YM6ohT(G$iB?kd8cB/dk32so,Gc0Es;/@6<d"r1r
%KS+1i#6MB3YsARBAq/*Ok^nMXI4XD6QB9"tNq4l9Jb/1J)],LkY\EQ6W-=d=GkN=7lb:+k+S"`Y]PcQg'8ZD$O?UT&5[H6sMJVb?
%_pJJe*miJY=7cEdUIVY\X$/_;3hC;<q%#tenZHF>\*=C;B<+bu7n9mu3ENn@>+Km?1:T$l&_B<Kg))j^e(`ifrn6Pg[9oR+l2@9$
%5H'%NK;r@6VPjBHh[caUF\ihLG*^TCKa\\+<%e'I!Y<lIg\ILG?gh)7qg4CeK*is?auGHaaK)mZISa=Zmdgal"/`YS#E#C$"s"^D
%%P"=&gOF>;aND']j27kVG/,(Dfbnm2G8sRPRge&?D<5$smM:FsFj2Yc8IQWrU9oC1%dSdd^3H2T8:a*WBpTc$VupLrZ;1E([X6fs
%@P##il@tRdRF)u-)P*>tL<-<h!Hq_%@tnJR>e'l(6ZRe]CBTD[Pu/T9^u'X%+l=#>?9]<r)"J?g>mKsMTGC`D'RGMn0a*FkPXl8U
%a,Q)0++Wm!>[qIu6!n*)dElm!7^u^>1rGB&n4?H.71)inYm/AZ\djd5_jKko^]8.AZd(g%5ok&/Qb:a[fHVSfh,F1^;/Q!'`!/SC
%\dRI->U>^uDR`(-gE5CN*QEm64H_mWnftoV5GNcodn@<jPKqV`^Kto]K1kV]T@m;\[Qe8VrH,71s+R1g2/Qq'fDk\k%hF0gr87P;
%J,UrVP@o/U)1`l93Ed5I?]!cgXgtf%WWV]/1j'$D+,G./Q$].<9-D@PHq"\a0i#H&=1V$2Y6?sa.e\1Agl?a3!F[?NFW@$Qlp"/M
%*`$2tDM,#sI_3r\->h*(i@5>/[#"D-lCAKIW7A]DLT;Ap\Ej.NE(n%E,mV]@E0*0)G=.]^1),qYfZ$L<oC=HiTr#Bf:-SkaU%9Z-
%DU9`f"'ksgMHaOOlJ:QK2":;!lGc"m(]F<Dncet94D%(s``:YN.<dUA]niYKJ">+hkL.][&mi=K&A's";%KS^_3R9-+"Q].XB'e]
%:d6G)I^Md8e6!T'doPdfpuuVNqVBPQ<S2G$TCX<m<1qa.8?XaOM/JiZpLK4aeeSn7$JK=ai`3.c<?To9=gI,s)K[Hip-cXnNO&##
%A3dXlWnST>i'^#Y%36<PNkaiM<\mT$E\UE:UN)Bb_[FuXl<gnfC?J8/57H47D#P"7+Ki"<&m4*a/E.D`N<Vc:7H*L+`*A']aq@4"
%ko#@#AkG(Dh5+%ege/WfaGlH2[.KYEiaI_]_4),B,3u7G3=.Ed@n@e4Y@sEtG7AF'^M2O"-F=<ZpT/d;gaZFG#^#8)(.7B@f#h:8
%+t$R::_h$]Lkj>"Xk&7NOBD:HR8n*\NN[6(SJ@sb@f(n[C"!ELY<sO"."D6ca=-M<6[*pDiUm!F&!h/Uqe@MW648U=irm8_oaL]h
%+@O1Ql^2@B'+C5FU[6Y1\CaL;^=M?iQ>iruAQ$J/EJPp.(1!ncHfK1uORWnE\;Xr^^L;4KUbT=<(h?s-L5(?lUR#mU*#fT5rf5Oq
%Hfmg@N<SEam/$)\ErV4`2o[7)h#N0de2"tn>r7&mN$n"G=]]6*hD4f%&!-JIdhaVO6R*F*]27?T,D`LLT(9]fm[;E-](p5>$B-]p
%1A>%49p5l?NQj]PmF2l`@e+@TZ4),7$P'>^6YZqol[]/u&L-SPFN2lrUr!Ds0lZ0c(o-2s(5(D4)?c(/LsS_`1"k*WkNOhcF40)'
%"tt>k/WVaQdk+Yee8^;LG#7)T&#ZY`mQ?f%brt\[F'6A\Dd3KN%QpUe)(;IE&.R^*$HF/-9O,D=^\sO+k]In=fR%oY"Y@F.+'(mM
%pG%eV(n2,KS_Md<K#t8Z7EP\6jt/P>2#-o34kcbdG5G940id#[EUt6h7OiZT^Q"E^PR#tq;A$>.(lGR+lV9Y+_O+b"CUi\THKG^u
%N%X5'fIniY:_SlfhnNb8r/l)Up5l'Nf06&Pf0L:d,Y]n$N`WfAbc$8pfOmTCcY.Doh(djE*qc@L,e0mc)I,CbJg$A`$4rIq6UcP=
%e)rX>kj"5(@&Tfe;jl;VUqUDniF/`c3W^RtW6Mk2V[?`_J7blI9qXI(3-`]p@3^e:JC)Jo5!=D0b+(dL?DY(jFS!jjRS&Chj#ebm
%$d,Y:2Img*7S2`t<ZuR$[Y7&mo]Vsul&fF^hCiDDe"/6O6e<4D4qn6*io!_N9sd[71\*c#%B!P/<9S-"DRA]Zb:u%,0NK3<RQA`N
%6EX)'_iN?$<K?l/rcM6SM\\U$R`>r41fDY@i!9ll3m["Ecf,cH*:H-sVfcdV/e:#[lfbuHabCbsXqN9YPH`"pm,JBn/sVWA6CaQ5
%TJ`?jM#0KuC1lm?<f,`Ti:`-7AXmWE#s*1`Fp&naU@Vd"X?bS\98a9cpt_=1`Op#M2=Xk-Y8Gbj>?+V]0h,nB:q8Zf^,UphPq4D*
%3fR&l@?GUlk=W<7aUpfnc:_i9a(:"]On[L2U3/PZ?"7,hE*d4ZS`:0%rpVk+F\PhU\Nn0V\3].s9#t_PI64)//,$l[P(AY84auV8
%M8R$g5]DCaM_E+W7V_:l$IA'gr#te0E@d/bN`eu_X0E'/W,K`Ma*1ahF!!PoLHVpZK:k=(rhud1lc?stmATnLQ%rER7_W=T9'$Pm
%J(h&r3Q;(m5ajm`(j..EVE^AnJpFoK$3:2=lZPY:S2BajTO,APRpD7&StMRJ5ano[i)$cF=C8&F7D$n'EDS]63GdP#N78IWJI]'h
%:1-=KZA59:=8<Of0h8,lTeXK!aOhgp!n6p]_6PHO(O,d3KCS_BMp;6WWLgoQj](%!=qK9i'SJl#$XIO4!%<YSpbRj7anmtBE$=I1
%:_#7,f"\5*n-[,PQ]1:qrYZ9a/\TitU0aW*%h4#)dBF6ClF7>-0OnR"R#s*)(-72VKNbasGtC/Jpq(6o;Ok4U;CXGIYb>J09W+rb
%r:Y_Rp")-!"0aLhi\E&4G2#[[:t3U0lB#f'd:jdJ_ib]O=*.]o+\,;c"]m?_1Z5:5<7HpZ=/3OWE>ib-n4H->ra5#I4C02_EP_CU
%)QaE)W?>!TrM'i#Orjpf\2B3WId7=9)XPjKHfe>l8iE:N/O!BT<?00t:k@[4e8QdOKQ=4]:lOBs9Ojg*UsP`RKcabuM4Onk.ibNS
%_j;=1N!<8&g]*e[qZV`=7>hQ1a0$6_7Y+LH.4WS11c?J0(."9.Ro[rXZbY57Fi9i]C1o(,6"l#5:/2([O7N>RkT'PZl/Skt'okY`
%7ADZG%Xa0LPi>q6+fm8R2?D$Z^^3iqLMUCEh7Gjn*$96&**n:BKkd<&XM^GM<T(0Z?fB!OZRtJ3eaZs0k#QPpNCbBP`XalLA>T_n
%'A,:jK"&?Me5Qd6n+j3f>YFe"T6$I7Ap2"`g<B?S^#Dkm-'/#TlaAfQ5V.:h>R?D72qVCpF+'L:Va(Q[[o[)a$=MZb>rn2;^G(pa
%]BI+k_tP#o!@uC(/<8_Y-/ol11*$PF:O;%qMq@U>,<#,;#Z(n@Ek:\_.hp60-jnSh3]0UpL,,9E7-/iI"NVDNk>;E4/5n6r\N=;h
%BfuY!E83.R/>$;[r-dHKR=E/R>W;$n^erN23X+4lFNgF<%*<L?Na@g5JX2q5V.1r8,qu5@>4T=Y??G>_6@I6)'l[%;>/atfZ\]Rf
%BZXR'&=9F61et/<Kq`egEnn4+[LX2u*Bu,`?gR\rC')C_$Lj1U;+#(L-NT1ZR8ZgHR77gegE_E%+hnr6LEJp\A&Im*][bDK'*_E@
%[WYVH9*!*ufV^#G#n9[,KeT8VGh!p9U-XaQ@W;g%!Al.gqR321Q&H_,ERR]o)h_A#ib4Y;`=j>ZcCif)T_'bOVj&`f+ss?K_;ko9
%o\V\f7TJ'&%+?WB/r/MM`KJ!2b/Vgp!#YCek_"j<mM>M1Cu.);YtS,6%'<bCp;Ni;+\M3Ko8`!F\'`LMUc$NSnr=>TF$bj]&kUni
%P)GKg!fXD;Q`7m\!fKBZIL]j%'U,kAIBj5=$FCC\8AE'^'c6!T-;UT;AqO2:HQA-TZ!5tlWUO+C"rD-`Blmg';RFR+]JumhV_KV0
%gZ$mf^A4pg7r?-J5lJj&#bo7:_j"*K%t0lJ/[7h[F=p:%`_pE<S"K"_9XDMJ3g0E'9rZqDEG_i/P`T^("-&8="Zf/K=)Ue>NGZrJ
%\5EJV:*DFQ<fQ(U:kEDbkDRa%QkjU(oD&)2od5^*H61#,C*=OrNQfnFd&E4],1IumS:^QeAf;#-3r:[Dm@Fc=d#Jq;p'@Vi;!*ei
%H#G&KZgAgMX"[G*;i>J;)B<LOo2DhQ$Suo9[P?ptZ)[b_:I+h3MY@<_%GmQ>YsT.]@d@a<<A],-]s7'g-c!I`BstJTmTK0Gm".>.
%,)MG%hMM][[V,q"`^qlf)G_D'0j&EU'Q%"s/NK(qf;=g\1_GA:Ps=VXNC>3MkC3_TdJ@r9UM;20`2^9AMm5H?M7;C0i63'UILV:9
%C:>]i^>akKR`?1M9p6?*[f*AF&=1nmA%P7["!C><E#l?kYiQR7[],Wd%s'0df.t04R+C2Z'':0)aL'/MKA>kKkaX574?`OD$*UO[
%>YnAgeekarpn6F[+ld;(QG1XcMoi"JQo:k,LO"IjRBHgSD7Ie1O("[G0D7%cED6gB-%aDYA3r7IXPP#pRe([QlhZ>!0?35CVa335
%OS?&[YVO:B#LtkM)]]g(UHq=J$W230XCp(tKu^BWJa.TQgI9\M<;E-$N]#9E'<D^c]stk[]]"o3dkh@LSnm^`-I%8MaB>%2Z@u-S
%H"S*(PFslo+"C4\;dPW0[u>',V"'cfCnt\&O[kZS?1i@*Bbee'M2A,F^MUr#U2q*R:fEO&c(*_%/;P''.spJ-O^ARBgQ+P,C(4V!
%o(XaMjO"nRa@k3>nQ<4p(^A\>ZbZ9L)mY\(6.-.@+5NN<aGuCY0b8t[1AA:4^PpQR3YDt4d:27L,P?dMrB=t5G$)H$3q'#%&8`Pu
%"&tF>W:K;kJa0nm@&i,XD3n^kDbIB_L$TdNjD=`kV5?,Ci9c@2NTo9o4\A;oaYRk]Pai+n%a/_3Ec)m"[&sG[QXdaq$^k?1cJ'ij
%j4;J1.s*?$6MahumW)GaP`YJ`J^HhN.5%=P:%L[.7Rg;VopN6VBSOdOU@Z#:T=/:2U>b!X[)ZZo'4]_cD>RXIerGXT"?GoOOh"X,
%G&fk.J*g=jmNf=)k#_bH0D0%?'5DdH@qe!44/RUs-d]_M7[OI9INGC!\^<F&.%KQ&e]d?q/uoAR^A59).afL6E<E4NH*mg;ZN_e4
%eHh@2Y&b_TN3TVCUq%XgB^UR$?%%7?.uR5CP?l@u-E%kLQHS*M,Ta(N3R)Z$K--+-7:JQ#m*Z45TM9A&9$Ae(hJ2A`iPo<tT_2hW
%E8tN%j4eFA<pZ4KOn:b0a_4V9G+pFeR#4T]+8_n1c6E3*X6mc;ajl[gB]Femc7.Umm@HuZb\tq5UQ_.:TQKk;6^Sa4Ht&/>%GOnt
%RbDbG:ltbFLcmt#NK]Y2LI(?/i8A'qGQEe)huL*d=C/qf.'P\Z(,_qZ=+T/m:gaHB^$XH)Lig1!9eum;dqt\0<ERd*ng;(11j66"
%ZZ.\\1I@q%Gr^tDj)"SZg22(pO"5C"bXVO&/(nN,]ngK'%nP40`j$On=W127ATFLVB?8nrbWHk!#R,P=%#C8%WH?:+l4@,6m>%YZ
%7*60.@i?7bC0T<G>a\Ln-kAa[>hjo:od6Ud0>W0n.\?:n;RG,WhAE)4AEu]^2LF,3S9a2WQMZ%@E9i:Yo:cEKRGR1k%U_Vc.2s7J
%0%abi)Ap)o)(oDaH5,Jh5i?"JkCmNE`A3E?d%C.cY].?c2H]jbPbcn27XM,H0%]nNF6':3+Ep7-;BQ>U4ILh-%:'Hb*8N@f#4L-1
%o6TTe%WDjOousq*3@^np7Cf"8eY025OiGU-Ok'P-mT;GJJVhB?Tt1'1TtHOio$bBq,aN+^4Z)aGH;)q59<ZPp%-qg#o23S/6)^2U
%9rC+YrnurtXeFMSJGRE`h+\,\r%L]VCEs8fZ7IS(j\i>Ffec('-/S\ffF+T#=o1d^>:SV?qqSo2jV""KYiD=@DC-t$[e4jiVug8\
%N)Db^P*JT8)1PaJhudF;XJ,@popY'E'49@U)$DQm8PTuY,l#O`\nMLVm4gH]#?gji'^6;R@JOY!6-eBU%.^"DC5/obYd]-sNQ\UL
%dQa-1IorDp?5>RDAI$^&/MhPuR!["[k?a2!d-?6)IVF<W<"$>W1Q7V>AO>Z??\gjh4%;g$ie/q[/>OXtJgH6E&2qNJ<jeJ;#MN7h
%6b(]!&UWoE$gQQo?DY3ApqVY!496aC'j6Rt'UuF0[#h21k=l\ipNamt0-_<h?MfGt08AVI,Q+GmO0[)o04YY,05HeXi@Zl_%ScO!
%"_?@1'K?AKr-TAVLl4#4l0>"e?Vt,F!@AU1pU$l*E>2TDHe^TtD-4-R4g)21rps+WGo77n<%rC!^%t6U/hiAHZ@R*FL.=DK%QOdI
%O9jrc9eRuSk_72K;^k-iB#eDk,!F`f/c0"SCSo4q-$^s/Md:F+1=gF?%tAN+\"n0`9t8L_Fb\$=$-7rTYK.YO2b!PR([^qf'%j^d
%L,qa=nZH^Ki6F2CTr,d""CVGcMa'gkR;SgV91[lF89unpN]@+&-EBL`qWBNu14T>r,`H,TFdAk6>aj^T!k.[bqaAKQ"uIZ+'dU2=
%&3#AH(=+;SUh=%40`mFu!ZD$rkmutWaI<k"*,@;;Cp[>7Zp7[p"O\&O]S-EeU/]%>0!0'4:0<3.?hA2*VT8dH(FuMP"p%%Sqpj[q
%.h,fl*U_VnLJ4<X9sDSKBsXjP/Ke`4dj%OscEjm7o+;;dVA;;k#sWUW02^*LAkdLBQ"`8_49gfXEFJ)2H<>&ElP/gIBF!Ka9lM+h
%+!RdJh55(@5)jLtQt-m)fWh;7-j;dt>5>W5JiV60+a"]A?O=?,1o^hflKP"V.&7E'UQhH?#;9D#raX2]H6N7si=FWB1\cg5HJ5U2
%ELL>W,;'mrM]DEk_.FR1Z0M1kc-S]9p4ESN(Is,bifd32'L%b#2+<H?K#ig8%Yc2nQ&fC93mE.&Z1akECLb6$OQbm>RF"Dn["gC?
%iWBG)A3s+i^kFJ,>%8]KHB*gNmo!W-jRe?)8SGQK*?W*:)GhVP"JCeHpCSR_Na0E\8_`'ca+//:rAK,#YqlomjbG!\E8enID,69E
%JCF.G-<I^b:HoT)!`D2?jnC:0/(F3%deL:Z=1EB4IR\JaLsEUkMPYDTM+%n_N/S84&K8dUlocQ4PTig,aLH(%]6BKZ?L.Nfb,e=P
%CtBEg(Z>DEU;.1q7&5Hp\9/Bt)?E-dVMd7Z9^7$F_%\1o*PruX'N)g\$XMbc>/O;\RD%#dKK)%[2>O4n(8D1L0^lrt9<:p4Sqd,(
%,9!UM<&?]^AQ/[e'Pj:[4so<O%eKK"I\Ur>M[2rEniMI>&sM/&^t-P6g8#Z8DQg<o\/+'_4?m40\hO`@qZ68:J@t(G)-9X:qVDaE
%?gn%U&TGD@mKR#(DSok0:bn!^8R#S7LS;FlM[WPOL/ACD;]qWEgla6$8^!d=^l+2r3=W^+6<^6`Ggt-9?KcD&d.N::!\KoSO/C3,
%@k(0V^T0(\(@PAGE<Vh^j,7!CbJ(H0,Xh&ZB5'Oclo!D.qu,7],Wt6a%Ln[Z,;/:=U"_PcIr63_EJQZ]ELJ()-m=un8If1)*Z[GN
%i]2OUEJaU%W80k%q^G#M)7#(n/h\WG=YCPQ=#JM_"DZK8RgkH^YbR??gUDQC'aihn>ipqj>D53\[S_"8pgd.r^6oQ@nKBcZ%EEfX
%!?di/aC9iF_UK#iQg!GAbaLs2B\2K5c%pm:[,Pb%7rbZThuMJmX^3rG:37Ctn>8EArG$RpH'NNkjk;mH;oP-"k.-Q":_D\hi4i@#
%k]2?.8LPdr.Zt%\=$B)C/X2i2\JmlQ+J.,097f\R14<>3Z2u6l($tn$#RY[t6tt/$!-oq6&"7+D^4kMmkQr7.MBs2+>*0Jr*9-`\
%YQi3"51m(&p1mEYo"e`WDJ8TBUk];N&sAM<_jHi0jJ+a/`faqpU[`MpK=t*kck/V@Kj@fI6N()_f:kC/rsVBbjt.&T8PmLAYu!\q
%)Ke=\()oTSg94,7CH5mLI8XH+h3m^8ef_gb16Ng['k&!%IMf:&"/8RS+hmS(En8tQ.StopI6`1>jR4f&)k$6-'o$0^WZ*kc!Ft*M
%):P;gmJnhp(]G&pKM_FDh4c4*@!@P)T)ln=]26*"d!V,UKr?V7HCGrHV0$&Z.q"e`A(L5W;!7G1`eq5:,o_j5>DRq`]a(,;ZCLfB
%en!)TnA6D8#6eG(nFFjX>ID\OHoq<UEmaPt<F_[d%)An65a7.C&l>db:1l+%glYk)!sCg4AdIH;oCgg'@jrQ;k5/A@qQq_(f@]HJ
%lg[gRLd'.OT.8_<TOq\h$kPToq:/YEP.D:jMk2;9(m%6HZnuq:),#*en;s7jNu,M0%u?_$)<0]!7t#/dV2m->oEGdK_-`W>;-^8K
%3$u0hkRFn1#/%XD_jJjn%Z3l2;XZ@BblC1.AI9!@#5pSX18tc[r766Fi6?u-A0O-F6+4t`%=Ccd1.5R")j-`so9TsB^[VAZW)n`$
%YSV7]#=Pb:obJ-1+*DT.`[*4Ygg?d&_I0Oi-UD*ua;5*TA2Sk&cOs2AL'dA2hXuN1.j!=j@8>-i#!t6$n`:HpLWR+pTK[<fLk\7q
%dDFa9-mFAS.R9L.,+52P'6uRFH(ppaf'6%<7l^NH6(V)H&2o4G/p'#Kdi"_T46i2"\<>b8/0*;*Su*2c><(Q4P2hn8YYGQ2*8I/C
%S:#)S#HoN$1N;.IanIQ0gt]];b.n%`,G1Uh<W3"4rB=^:IQH6'QZ'oo]!>LE*:mQ,V0YMkbUR6]B"4PTmm7&#j/=O"l2`&g@W4kn
%M&:62/g-_G\_<7mo6Z%KhW7#e7L$pM5"m0K!ObTc3De>E`R\K$J==q(0@1Hk7X9sqTmHnKEB9_-4+/L+P\<fXL*c>Tb'=N_2%2@8
%'VV#Y66.&c>b6+Xkh!Jg_;J2Q)',9%5"s!fU6Y^GY#o@A&@!:=;FLnH=A1`,\>[$3EVp_4i]s%?p2I@()SiFtjR["PXlJI.V"g##
%XZ286W;pbQmL?"!Z&N6\)P;0ZSYj3b4[\p)3<4X;EP@if>VW22_H,VEImk,nkWn;BH#chFl_JZ-KBXi(D@VPS88>9;!C%Vj?'4[u
%%O&QcO)XZ27[(uF`d=DUR5>Q+EqIEH`P`*j#jYsVTSKju%&IoaZigK$$\+;%g+okV0Q'S%8?sP)H-[VMCB4Vr,*:`Xfu_1)8UecY
%i4Yh+Pn17[_6MKmT*XsFcWTJ0)I;`^"&u-EBRtt9_6dfN[\dYg.ifLRe"!Q&o)Hd=hS7(6M!Ro?jNpne>+^MgTSsP=!qO#AjD-M!
%H^f2"`<MK=E\:`BHI*4I:i!>h?njnf#oYb1[W1IMWrV4o%&O&'Zf4Y'WEq%QD@W:hP'E5\6UMR+aR\TC)sRBoeg(kW%8]MAW6pFo
%it":%TpbSXAjVoRUF:YgckN2f_cTf_X^'$56D-!B]7KaXqmf.[U?LUX@#XA0'MsY.15KHDEY'E</f,3K/B*/D6mpJr=^1>('e]do
%mRSMXVXkP>nj!]cW&IQXG$Rfa6q0>Bpedt?7d4cu<W#\"A3e,g[uB?4CN@/t@8bO/g6HdnBQ;%*5DE:ab!'U+N\:430)%E9!a:$o
%9OdXZQ#'^P%qEm$ijt6;Mh\,RFtI&2:IT5GgJL6,ETciL=="ZnS\q]\1*+]T14"pS=ItoSL2pHBU]gE1+IO3/61c%[:he^#!SKUN
%W%GP\jk0hj5j-9@%MAj&MuAI?ViU+u>kaJ7VL$oJ5aN=(E;4SKG/e8>O9u2D@GIqPi;G3G%",Yu9Idb`6>*"+BPapKP51H.W1/\^
%>de7=*M,QIP`h?GKM+>!:@^O26cq:pmf6^/)JUNLO>MJGg4Aa"!uaNl0mYo0.Qgr\jdb^/W%k2QU1h,o->(eZX`"-"EW(RO:Q'Nl
%[;WB?lEQ1:c#[g%mqp@L)Yf9PCZ!'L/XR?2f7Ss3ele@$GPkTW5kba&&4qYrM[S8nTiNM"WWgrb-#47BjJ1lK'n?Z?+T@>q$q8eY
%B^Bh%S?k5rJO#g]f"KEQIRcMK_%/YjJW:*[**VuK#F&2E5CD19B%g$$?@DUTk_oC5^;?g+OTcO4%*BYd1-GR_K=2Ch-LEe)AB&^!
%=3sO=0,bgT#^RsbE08+Io.o59a3cg[Iiq`7+L(k^,.5V4mZtVj:bRq0Zn./S@">auYuYUT5jD7-Zgg_QSZYcM=AaZ:&MNL<^T.Y*
%800(58CRIVK0F-@8If.E!>QJEUD"mqDD8.M2>\-=ZB$>uTY(maJGY1\/p)pRo&J3>)*3WHAKug2_C^l..,s^ul:>s(:o<dp1FGLG
%\Jb`N^n;-snnKN:X[!,tGFT6gU]^"Wl;G#0H9sZ?_#tSf.>a2N+A#)@UReSX.m/!H,1dq5\c\\KhX3"LZ5sqN8[+%l2d*qVY!$SB
%q5EX+P+r21q5/oRe2m:lgUS/MB5M&k3`1Y4.mP]?eR>Om4_qqKbTO(t$UDC-IA-Zs"N;OoU8N;(d#2Hdd;!g+/^l>SbA:VRo0O7T
%257)uL!1gT.'S^o6h4Ug:HV>_aPp[!NG7*.+B*Vr0<Q6U0gh"22hhDYg=J<%%-Cn1j*m`^fj<.(BLZ5nVlBBa)&jN(_T2dpd=.^A
%(?l#:"iO7d\GY=L!T9Ms$#aa*.8Hld:=tkET(/c7/"E5.")s#)fm'_=F9!_5%7/O_GgNpG'4g;bN_H5sLm&?n>ab4uB:otiJ16h%
%JS*(o#0(Os@eYWBh%R7KgcCj\-Q*VMosX+-&l?m)Q=_f36H@)8Ls]6N8R7/EAK&ijg?HV;erpF-ZhaJW]l=tua=\\G)h^F8TJ1^6
%X->1!)@D)H*7Q!q.-"],Y$Kf3ELKU&mnN2Sd:P)2H+Zej0tB*WM[Bn\VYMh9G!Zfg)$m7M"r&6"q?M)i]n+F2?[-RO,T#E-8,&JF
%\Fr8q1UUXI:C3^`^WYk>=;OlKrG`&6?q<?f_JhZ`e?KrLquM-Ms!T#!Au)@gVf%al\7&s>Jl&J*\;GJEL*Gd-8U+5V80cY3niMhJ
%YZ%s#&18`&.GdME&![N60C1s*;LUXB!\Xe]aAiuX]:#C*<B;;[#\W1XhlRs$d]U4Y]#U)"dJ4kJIJW^<om^Z0Pmc#XHM3g[Hi<GR
%96T]iDs6.iKqD*#O#Pu=s8@HFdsqA_s8L?X!KBhnjd\p=U=>H3'',%c4Sm7Me'@33js]TeIHCpVm13#hG30nGj59R5ggVS=cbI&N
%r2g_XaGUqJF'=593nFh^/-9`1CN72IOa0@^Wt5J!EcGn[KGCQ]]snO*f&;1_V/m?[(>)LQ^(?>0Xre_@=N+S?pBOr[c,HP4r_b7$
%s2lk>O39J'>E6$*);Gdg(pu8-"O/SuS]K&6jlp'(1jAON`-G+irolC):j@209??=2%Y<(;9p"[O1;qZu?`7S^T,i1n='6KL+,:4U
%Uc84U'ul%>(alcPclaBbX)Z/j<u5I_f3Ng7_;"D.'#sMD=_,g)h18>#F?e5L9[Okbc6hMi9\*qX=]Qs=;:L0`gY;q05`V"ne@&(h
%'CX>Sou!R'ZaB%Irdf<$luH%c=A!KFLAHBXeC1K\;*YI],slM`=RKnf!sCdfgdWMu=m<-MOg7mR:6D\Za\[XV!M\hE&Dp*E$'$8F
%"YRndD$s<L=la6H+&k`aLr>uA).aeMVYa7h.e6uT2L3m@W0>]Q)9j:OB^/tTEo?6&F)m(P64`qDbb4hD4.dSfdY,hJXb?t*4nmf?
%J0"'U7.`*7N$<gqd_&eCpsU-ZCRlj[R2J-Do>OO4N;6P4)+PUD+W/4eD7&bf3Y$2=JgcM.rPnq7="$$@-cM$#59h3#5mpIiEVLe6
%cR.A;$Ibct`+j1:^=m@6+N($99Sk5!n$@HubnRC(0omRQ7E4L,n:DdE5Oc4[#pQW2>=6PSILai1;^B+(+,#h8CcT^RKr8Vo?kME2
%]569nYanq>/nQPSk0TI:=Gf,:j<Mn3'fGc8H$(FCmQKdgf"EZ_85`5G#W&(o7j$Xfroam;6-YT.O5_<g1a;ab+aimd6s`#P17aN_
%A<554!PtnCCg@SEV_:JIr#%Q^fMM.J&&ZaVTS#MG7Ud6YJ;Qp.U4AcH.g]WE!MYcA+W/'UfjGBTk'bko3=3e)GF;bf#\n5i)!1&D
%qi0Bde#SRb^O$'`Q:R-(!)SKjI[C_p#Uju4jtNW8QNJD;89#PYj6u!Wm93'"2CQj_6TWHf+!lOR-Tb83Pe9Ci0LnKmkooDk9YRDN
%X:)#aid_!@_oh5g9'ZY!>"0k`5/r9hdXs0GU`IJ3V$QmL@m`PZ7HC-&fV$ap8;peTTK6o<n$^<:3)53(3,df1kMF#<b[&j\4.%<:
%$d-i)YWqn\%4^3_EafUSUX0.q+(W73`VbZd+%/Z,,;9NaF4s-o:7WTe=_b'I?jFL;;.F+W++5<4ZV98*f^b!^/`s_:=f@H89p?4b
%h[+jpNf\=jVo?dE'9a:_M3<c%X<Jj+.J.$9+7uUCl9m9pKYoL;A?(5Wo?9Y!:pYef2`g;;bJ$4iR*+IN(^$]UP<F<p[$Ng:GuC-9
%3U('ljf`LB3&i\=`h_OpeKO3`PQWn@:!_opeHi@6nPWO,@f8p>ph1"J6HB:qjW-,]YZ0hb_%MAgSC<!V2ibs0LNhP2n3_,k1D%7,
%4SG*C,"H/1JRR:(-naGjpYGs%qC!=ra<S*BnRMq367M`4\R/Y[\mHpl)T?7(i"$keKcHK><^S2Y+4X:X!bQuu_$5ulX;"t"f%^Qh
%:-gX%.kJEM-=U4T$oOqaHg+5)9.;6!r.lF%(g(J<'R@l8D?2>0UT5"/m=TN7YsdL^7=M"l&AY@[YqER,4fHgak4"EDM&W0)TXkm-
%TJMEa.d8'ZI#oVdpqm_V[9":t*A3^r4!JVeID?Aaj*mJV8G3WE^<Ym$iQkMB%,Obg+hGe'*V<<%QMNIegYIk'm>.o=[mf9uY2]sO
%AU\1Ip/[f/!WQk^gZ?9g^<A;',2[S2L0r-?SQ"msQ18oW\A-Q[o(jSa?KBo4K2X$2NfXaQ6UZhhQ;[n)Q6-0N9BOi+l:GmUbT6ds
%]&_r'njp=cYM)s2#1fClTK)D>ScQ;rL.7^,<2A'TBg_i;s7+jYIeregqc`m];dgl2Dl'rAg:a`XroWYjgI6$rgWSl,Bod03mdV<>
%kQM-0^L(UYI7dEtm@_d?H$InBKGR8Rf@W2m*p6gj"eosso5GJE=aMO@(WJ^/>5G3NMrE48b9+;MDgk\_))nH('i%kQnq7A*NL(>m
%<<0""aqu6m5t.`_N\=44Bqc`HFg=Wg"qP6"@T$A85&&1mi_LYpmq`Ef&ED!2Lc:I5>VNerqn/;B$_s)BFZ>'jk02di)\k^]NsOl@
%)YMjEk8.UE$??ch8W69Uq9MB5DIl0A\S@?X9GiJ!8@RJe38?b/XXhJa.&_Y(WGJT>IP>_k5763hEYs;UT[4@1=!qU1^DGU;?4T0a
%52Zuq(;$4"LVn19FSN\^@NT\qa8%"f4FehY,,4`*%*'Hd8VoR4k$Cc%P:%'X8;^+b]%D!Y8(<AYr[arTJUT0a6"Sb7l4S?B:qDM3
%&34'/L\t6r\G8&?NU=NtR1(DDqH_@8C3Q38+L[s=.NgjKW&IT?j4FV/k#%AqN8b0'IR>."hA0c\osB>^X_UTT>300c)58Vrc>f'$
%XqY$O9BiZ:Fk&7eV0mN`F'iGpH<\AY3Mn^kYnc&G=0q%#D5cskbWC]re(@/=NH,4+rXaoFM!1G>Fp&#t3\XD,'#Me$AF;29?h.Eu
%c<rD1E)bT$bS<aW@QjlLP;OIV=$YhCd'p(4C/0QF"@A_o#h!O@AJ<9SKR,Lj,N`6\ON!#-jUc/37!91^CSU,!7%sn_f'7,$S!N\<
%0'e:(<gt4%I;5=o5th7]D,^"_BnDbrCZ6=c^D`eMm&^ODk`uJkWrmkD7\X<R#;UjLS`cX,F?"OP6-<11!jL6%4nKMc;WYh^WfOF*
%(;5!n&&!g@X,);RNj@<A`+#1_4"fI-=)/5Df#5Ji]b4/,S0i4\Gd=B5%i:XNc"P%b!+obA;?`/s[k<m&FgJi:naG*9LJ/`%&Nh#1
%lkrrm1WO,F@g+=_m_d.ObX!!Sq;NDbnH9"c[Nd0kct!\.@_>GNRl=1uA7tMFL3*0ga%H;>pMnEtEKg80h9RA/A4)b_7uA(q-5i8j
%$l;VRh2'_G?nSjoP7pBd$f-c(<2b]MqiPq!?iouW>^.L9ehEQGPV33DJ(T]!Q^Froqi=*\+!,qkcb'mP8Q@MP@*>5W%\h=7nZFP\
%"G9gD3,W![[ib2:]-]-CKJ]Q<BLhuF@@X3aTaaFNP6tZ`'mtQL"WXl,(U=m6J:0[/_F[c/$;*KCG&BH-2U+Yq4"hC*Z<YeX)#H"I
%*SP8%):4@h*2X&4W3l=U*cCuF2_Eb%]R4Z6$ja[%#RQIPoFg\e>keNGR>l;;9''&n6_%p+aP;6*5efN5g-8[V@hIi%2@JO[3SOp>
%%4b!`P1LE<*fQ!\>ct:A=#fg3S:Est?u.\5b,$hWgc#g?`2F&K3,nHXgT3XK5@u&Q,rhokAhtu>3W!=Ci<+[k.b<=lfC+1?lHFr'
%SD^PaU>.1-=`q-8GI/5F,\#KdQa-M7+WT@1J@q@i3)"`-4W-?j4W,hkJhDYt"67[i:8EoJYtpEQm2M(/FUd#2*Vm6kjL2<2GDrVA
%*%]kN\J%$jnVEdVekoh1j.L1#/)&Z#<6EOASj4DqlO+8GIR;76-`H7O#S!*C(gnDc%Z%[d+_<)hh@&Q_3=D5,<#=)JT[e#?N0-Hn
%7q""h?<F4+]EBBlLI3"mDF/dZPZ&34C/jA`)5u:#$c:<l;-b_BC\:OdRB_G\"LVmq.[`jcR\("s6(A]_,>a?1MNGAV+<X&J>se0C
%h&2<N#ra709Y"JkU^9>G/=foYRA@rf\>+3/F]P'C,k$GEoIaP;_G`JUPSL.Z^$<BHE?aKe\t]\t"DJtYaG=e#oTVFslc&YVV";RR
%3Sh]XO7[XV\s7(R/^]5V7h8kaq91FF-R:go2!r(fjsRJ[Sm+5B&/dI&j#Sfr3!4nAD/5Vd+K4rV0<[0[,f*bt9G[li*$tS:`?bZl
%Oho9PRhr"\K&V[SGME=G<nQ"5/oDV]>SGThO)HOOd'S'=F]<=7HRb>cV!gjBb/XE,ZUjf&=+N2$%$.E-$Gg"uM/O4PMX+W2G6k*C
%QJ3pb6&2BOo#8"nbk(R$d,/_f]!e?3M8:0*ZgrGLeW:VOOMe+FF'5=Wj"KU)N$\n$Bk!Y7</UVE/$g`<Z$8;t].'=Lk`ehs,6UXq
%s*Y$kNT5Q>MG@_Lp+:\5[i_?do2EAFs$cn58gbOI`^FDrC(b)%Gn"#frG*EtkSZL]<1;]uE\4tk"M:)Q;Ug<?03M=Z;P@3>feNRa
%^k%?1cqD;nMFsb-S!h$db8?@pS1fO0W]m(`ZTW%B-:[,_5VcmOEmDDceo,)$<_t=$N&D9MaC0@4\r$%`TXYLgHY/a%);%Rf"WJqh
%P\7q)Zd&dE"e^UTj0VN1NsP%*gkXiO+jrea`e%Jt5aXr@b5dg]2]cUgBC_u+CdQRf,*Jh*'\0_QA)EFc"c.ol@KE='.p\[gEWUTL
%+sm![^jdH[r^1Gn=]aL'+/09#P&jthqR:CIc^[++`nh"lAB1KZ:!lQB@IFI9)EJE/ePpqf)M-u.6(sQpKPSu6G1neDK%7*$*W77j
%bOdmD;QttPl,BgCJ@%V`1*NC:%B],''[bs$18?a"6oI+eU3FsgNWCR;bN^$W-]./bs-i.!or!TpApo\.aFL1`Oq"_Jbge1b[f"Sl
%SR"W9.)1]!>)I7W&G+C5lhU&d+ULrT\6S+#JBqPJ.]L\%FbbMNdqu64LUTj+:\Tq:%T@=`r8l^BE-5tm&(\oGF1ETG20YF#9X159
%*Th2leSfDe$uL[a*S?Fm04f)C2iugBf[0L/$<QFJ24IU_j60O\CV=1pgK7l/Kl?.V?8:js=1rgmR!6<4+(m*PpP\i>]-uRp6]t$H
%jq-m1Aj&`h>Ti=:?Wo8h0'>FBrN]N*Jt\h/4I:*A5\T06Ck$D0_):]b\a3#W5#=B;_q]9sL>+WS8mAD%4e,_iW9MpoNd:I`1Lj26
%le%l40dfr&hMReN]9^YW?")T+#Z"$_DBDEH=t.IqLW?(6!m,5a^quHTRWTRA'@R-'KKL>6"Up+T'A;a@02\T)f]p7nJ$kuX[S5o$
%VN2oIpE,:Ko2OKGZ/1Q<f$N*iqb,F"ZRT*@^(ed-/ICbC?Llgl!&H`Di;QNH][)pX0qr'KV==^//n(l9M.X;dOE3$*Zpe;G*Lp'd
%ee>imBa@Ej[*?JFJlbgTa]6u*OmJRO#0<&110YTY!m(C<\L4.l;)RB?<p>qNe84'p?2B`@K)eZes1Dq]]EYth_WSJP0QfJ]"*1=O
%jp:+p3-&u2+dDG%O75TA*01&J#Wj8a\_ud+M`HM;B6XDSIT`X:$<-\DJKB9t[%S^'c@E3GU&\XtGX0fB!jR;%MF.b=m;%HHS,K[Q
%dPD[Xj5SJDk4l%KGs8gToKSWYfF\1W1)$'!0r$7dZ@=[J4B&:gQoZ3X3L6nT'(Q@F7A(nob4u(sS]\'sMf]K(p^r-\a;EU)`[S`/
%_rm)@9N>[4N#f*FjFka1iZ3Kgk7;eW<n<5]<kPcTSVBG0*].14]:pBs0_QKJ7nQc>#1k'E&A4XPUf,9fan5uJ[9W?C+7KET`fTmu
%0;\"Y\7#=&/)FH<f=Va_+.*ZQf$n"@Xo6CVoV+2Q5t?qdEgpX2Ps?4!\kk^Q?k%^N_1[+`),ukS(8qik&]O>jgr+TD)V1L;A/c@Z
%$E."s%thb=1WjsRAJVq=\CnSNL<QejL]QXg6;nLKTW(<uCeqeOP)"gq.7$!'Shunj,d#74I`o6AU*-oLdQ86Q&9&#ME?pcJBefJ;
%A=o#BL6Tl81!)&H(Z`*e<+7*[,qs--$5KJ3R%9TGT_HQ2mcOUslf_h?!OJfaqo39BA=#JV5bZC^d,;c6Lb(T;L?S8)ipfd,ZOLHD
%U_Vk*NSGN3M@BMU6<QS@(iOe)Haf!8g=)CDhg'-,8NI2,85t*^+[DbuAoV3Cs/:A\AnUg0&1MtHjM(l>#]_,6SL-1RT.5Q2G!b>>
%e-&9DW$VSA&26$C0l$V3WsbW8q7+8Q4t#ZL#<Be:PJ)$S6NPRtdp'6i!m0-d>M]`Q]s_W.WcAQ:T0%)!m8m`"KS%(J$Yb9pTqRjZ
%(>p!p-]5/6,XP3j0cSPR@rfY+5OUYP]pK[fN1")c,P"udW3[FKXq[BWC\(/89g1ajR95t?f;kqgP.D4hRu^aK09>K;#\'8e#L"fD
%TQEP'>71Pn$%_A.RiE'"J$b2g!RJKBWEKmNd=anE+LcNfa(e.s*.1gj,+WQWi@XpmXW_DVd"$h1B(J_8OQZ0O;"dlYE92mrg&R!h
%:i2"3R"c]AW07\Z70Sir=$;;Q4R6ZuM8l]s5YGu.NR>1:+"j@3+kF-[-`^g.QS-^.V8;Q:q$dJDN3@n2StIo_Q4.E>O8@AT9*YN7
%?DJ9'l'2C9?9Eb*X?n/eW+f9-7M3c9Ef.;e.[DKk+$_g5M"'%B6CJ'CUcPchoW#_q*5+ZZM=rru`F4kDdDFN:Fr5Ms.%"?$PX4iG
%0r<,-FbVX`VXG><\e+/]NuOA4VN]c()12O[p_H#ANkM4A>_>O8&:.?l\+HeLk2&F:NmU\a;p*:U8]cU=RR0=n%77=#q,BVu+TWY3
%&kil]]fr+I\-X=O9_3>\[prT&<&aa`rYh0rbaM3W!83j9PSq)uJFP#AL(Q#6.)1H8^qES,3@6eI#OFB](K&/]*t_sc?T'PagG+f?
%86BnK8X-!m+dY\ep%J![M!(<f%>OqDcU,_bI@u+<W7GE,Wds:O!f5,N&,OjWB8nO83_D,1FS6L'EraT^7$,ffPf:fKP^Y9/E=[%]
%7Rodq#@:2IaC5)V9b'ZO>tbb12o!HFXNp_tAc#IrIT8YIcESM4dmk'Fd<Ykd:"C0_<-g>tkSdl!J=U4n+k/0*gRhe5G1a@9&Tmf-
%>*ol4>WHs@V#Zq'L_0NE8W"etd3q=t4(N"Cd0/`Tmdu3U6m[l?M,:5q%^g_"o:p@UlTbc8`2%/%MK[t*Vqt@)EjQkM"LM?#39inN
%VQr^*9tWSW/iL)4Q?B#J%2;ZGrciq@Zin=/]XW'f.$l^d[,bnm1Ar)a(p19LnRC]5Y:GS4i&I.TAnO=RKb3#mH^-@GBnT\+]W%$&
%96*gRc,j#Lpsc%;CRW:-A/AbQnOT_#o.:)\3h:]dP\8tZFVE'_SD2K<QoP]/7a-o=IFiLd=eg"Wp;<,qeeks:1`*Gi;jn1_(*84o
%4<G#kCceA2XTA_G4<RZ$$09f/1<H0m-E(@"SLmV`f(P&Zm5fVJqYK`CZAu%Ep%L+%U7rjR6nT4P_-s$.8JQ!3B>?p/FP%JXUEL,[
%bN<K(2on\dN=!uKC.@b8koR8s#PT3:arGP?O>Vb=/p'#Lreuld%LUHX#FHnaU",M:n_@=XT;_Ec*F)ri'!j'jAbbdI'b[VNZ@"[m
%TPR)s!DZ@/J-ihP@6@3JoSK)F5E;o8hlbd2c.Xfl%8Z066f_#1nfS;_'!q1VWZ2D[(Wsh_!sRc(PD<p4U'mVbb,e"'1eZ6s)eTJ+
%%PZK!]qJ2+Q/6n.!C\r(?L`>.W&nKi@lfeYIEO\h5dJOuR?g>S_m"PHeS[Zd%!\T/AiNXEVR@@N^-8_pgi-ID!t)2:Zisj:AT'Du
%/f)(P2*f1)C,5R_&a2i'2W]'7<&UI<YVkX1F%H=Wn4oI#S2nStF-pKT](69?QRoH4VYZtsG<[Yc;%-enH;W]#CU,lC*1;p%bYX<5
%o!934oYt@5=]eQogFn+3#:^=_UcCdkMIu[C1/#^!2#0V5C@r>bIr=1B-7`Qodf*H9=aYFoOqY3+F$eFD;fV0YQ!@YVGtoGiJ%;]q
%F6r9m."ST`R?oASm2;YQr^VBOka:A7(X8NbWjqOu#A=[RK5YUpd"=NaTp1HW[PIUT<S@JY>&0(jZ\eFCkj"(+ZM4,\1,!_9a,QOC
%fIl+;Q0)!n8!kI'`V)ZQT`aT/Tp\m)G5,f!PU"Kj_%LSi@Oa,Sa+!Sc=/_[G#;eJPV]9:1qWpg5p.8lP"[kQ<\PEN/*b<c8\Sg[-
%/H.'=2k,2G\s`:0*dEA`8%-hlhJ9[78A%h?dY2q^jltOa"@D`iD6m5u]I-[U]6LV6_>'s?<P6gnZe:%qkJg3t"P<m)RDMWQg"Ef(
%nX:@;kB:,*(+X0-l[>@'3Qh!H7<F&`K8h\hpNeX)D9F$D(dB*9k"H6&fKFr?G>%\M#X>l!;Z`g`6X')c=CP-Pbo&R#oSXsSc^lR=
%V;C`]N1YdGGcBaaeAiUMqZ4P8eW>?hDBQG'PdM1Qj0SRdAYrU7<"BY]*e6?";&Z/X.]G"#XV6"?2/o9HP(C]cK`,tf((]K)>a9-P
%esZ\Hbs%#SICkZcgNX[>1`l\lGQ7.3r@e3<TDmsPq7D.Sa1qM<O8o.8s1a&.M*o]I*pF98?Ka/&jCSZe[Q+#C]2:MCNs9.G7UDO'
%2cF[7L:,oC,d7YN5E(VO(^Pje(^*5h=:?l9L\@[8R<Z:Nc&j&RYc(E5,\qd+]Js6%3DGT+Rt4Yb-.rED,Cdfh$8d[ZTmpQD*>YZN
%ho-HYNT6l)pd<OSZ;)WhW0M0qC*b9aIhZeEp-i[%)2Atan$("BU`PNY^<U?u7\Wn@p&V3`!CJ=od#=VCdEmj,3fGP3lfa<oMIX\`
%dDD_Cp4#+j1ikdq`K,j)!4>?8+Sd%(q7E)#Pl;E>TSj!&?B"@q\-i_i-e@u3N5VXALC)r2s(1/2b2cs#9FRLkO-ojmCZ6b]"eojm
%@od!D#tFLkX/O`nTOa4]!-d"+pM=I'[;WVI';_N:ORc?n]H-O&5^9(,89n4(FA9TI_WkVIU6Z;'oIHf[C]hmiBIfhP3?J;5Af-T(
%FYtr</qK7[fb-lacS$"Oc=t?9;Co3gnfc7nq7aCJ=UWN@a&$7sIMKTejIcNGT>H70?X(=61djTFAB%eI7QaA/C&t*,WYT`PYoVL)
%(hE]ga't:W)-WDUlZCN`[(9>Hb[@Mp";Rpj>;ur$)&dD`7$D+:9++WfZ>90[2#e61p)O82+1)?BB-S>X3(]VdI1::4`MF--.$p%D
%e5CLR/u?0/P[]pO*-QTk,3#fbG*1%a#_#hJ&0(`mdZ`$-<s!2Q_-YAYT>B\&BiE77W?_\?#JG?&-BCShLF6o3h<aDo:WYGfG9?2Y
%-fESQS(YHL?@?PJ-o<QR->P^&:Q!+s6>$f%_rUX1P!J46A8$tD#(#X67,^8GLF::]g7q6M'uU=7i'f@Cd*\==K&2^<]c%W'65(d\
%`:D[<N)9mnbs7b:"X-Dd]>//\5kAp*[hlSn<ZG%8?>(oPCS5n#>n+?Bod8\?1%53k7%)6\,d;j2ABmU'7OE>eU!oB!$YHiX^ZD,$
%?C5-Fg#QW/^I=[XgP#hVEKRa/IG+lGBbTjI0TO<T@<<*9EDpfXaI,LV1H[^52YtAu0p'i!nU-*&DjEio4tBcrn1Y1+U/-j#r@OE?
%OQdOf$'%cZYtctEhAfCVeoV]>ZW4g#38P5eT9:SC[E++o+ZO'70m=BVbIe1hRC7pjQ=(9B_kAg2nY$ABd`gi>nhc]XeI6!*8mqab
%H_,H(8B#L/*i8qbSX^65:$gW>PLpD$^8jkjeKDq<"@17VKYm@/.QVXiA-[`/qG:]Z"N(uC$'9tKmmN)E[q@5%RLuCR-[[?7Bem93
%@%%3A\pi>1AtOu,!L:i\Z)]FT?OkA@YDCMo!cXc8]nk$dbsSNMq4=;8RqeRWVh5q3A!'q]s08J=&=+g1!'GIE)@sf'e4K6dkSW:*
%$7J=q76HB;A(Uq,#M)-VhkD2bTu5V:]K/SE'J/W>82g.\7]1GS,YqgR*P.Yq<u!'4c63'<gC0e<ddl35QTpt8[&Xa02@3pMihsaV
%lao<JdMj\U"_5?$A@7-6eLnHA+n(_'O(V7'V[u9N>H.oA@GF`:9UW2R&CT84$F5rt.^N.EesnrMCEt'clN"e2qMTgdAZfYa,!+T>
%0gABac?WmkCdR0/i^YR@k!\1sW]p&K6[ie>7F1u&na9q0Ib%g`+!RsSP>];')91g'2jE1sNba)/R\05*<.'G8ZhuZP/g]fi@kel2
%f3Xu9KG_LV0C?@SUX/MFUo9hEW%MFP+s^tk;@Q-5';,!/V^-=\6/.bS%lPj,I4.]5=';Om#GOMW1GXkh&1oM2g^NCdk..!%#Rdk]
%\.*Wq#RarKCu#R[?gZU8U\un+@>:@u`YXInLg0Q#.o3+2A_^O9LX`M^k9e++F(RZeMrcdHPXEG?(b#f/2\Q?oj4o*QmLkqr=<[nY
%R3-Qsk@m9*=T3Fr2!^S97uu$85\"tI]$B47'Iceq'hm4K1RdJuIL9$inn_VFJ0K)*6>Bgl/fjOL8kdpmm5QNVM$MNgRj@#@TV9Q]
%\O"+g,pTGpA,n!.#Er5\SL.&M+_-aB_Rboq=#l$k'+n(u5oqRHD47ls:6_Q*@T!C5/iQ%HN')Yr(%VVV5B_X#>Qpi\a'bA[&<S.[
%a\@b7I2S2C+f76!`dgYfNoR8#9rcS.,?f(h[>[`e=$(7Y,kL0sgG3sbo!!9>U3`VB`O<LG4!IP3>*.j'nHM\`&2BQ&PXB=RI%-M\
%8q,-$GbJ]<K4XQ2Q:K,P-1qT8<1>3Emn?^Q`e$aNSf2gh?]<?\Lr#2"G`m:sHo.`-(g`C#e!kW0_E95N)SDmKmPs:Nj:*#3kNWX_
%R&p+pncGPGK[D88NCq?'aAA=/k,0M-IO'78"0#H<J5Xgnp>3a9bWch193LF'N!`R^(N.UBQUKI)leXhg@!`8>6Jd2_'o:UIOJ=IB
%M*r[J;="mtR:FT18bpH:D"o7Cs('1BK0DBD!mcG2UaD\o]h3o@SssBVN(ue9h"Eb29lrfa.QKeq2&iP<R9@u)d^;J\15EMg,X>(*
%`8d4MPjW1+)ui)uHR'e>oRR&V%3hJ8n+$Y#^E3%7Jat:3/rkU/kB[G_]PJh?H_I`7*hS)>XL>W?Ee7>-:8jV0.ScPHQH^5djKI07
%<FMD3"]hXC#p2bSrYQ$h'g?$%aJ#XO*fNl4`sT\d@5GghJFNX@8/HJm_*p_bf%@jNcG#.lT?tL^4pKI(W9M;]Qq*c_nV*BAlls*q
%E+b`_&/1eoRhYmZU;-h#]!.r6.p!`1A;tkZZobI%2?>VhD)p+==G3S.7@d#FOH8BZAs8R%7en"&9b=@eDTdh/NVQ:T_A;h1d@8X?
%=R5N8kY7W]euMB:Sh[-l3g-Gr%(*4qQgk^O<YcL*#!s\2D<?ZuM@J#j&+bfRpD&p#]a6(-UH):k&!R)$b+-.tnCAF<ePV+*N3N+s
%Zt1ElHa>)Uig:6#D4cjgN=+*<j_p77_9s[?Rf)E/cG%OA%KThXmn58=Is_gC0<+ZCZ59*-!^tj+guiQ8$(08S5..o8m88DWmql$S
%n_%8s+7d5%g\2A$#L4"Aac?=M-c56QnU;TCINW/<@;2=,U+,[S&dj[-IbrHK'+1dCPIKXS_W0i\_CIN:&2cSlR<F^8\8#ZjAY2AF
%AoM^=75DY_\&ihL^isYkSHnY$p;Q6!=*B?q)uXSO/D:8u0@98JK6Wu%B/8;2\1Mk/_E@ZG^umQFFV*VIoW23Rr=6\m%-\Dm:Z"Bs
%D?[[^;hW[XhmOtGnBmI>2b!`m7Itq+I,>XG.JARn&Po9kIbtih[8#&?=m=.kLMQ=78IQmQ`*KsjoiHV,!Wu=_2Ys>eP9$i\4-UKS
%O3@?MdK.BkJHm+`\j*@k7ict6+&1DA180J%ZR:VC44rJ;fK\hA5c*k5Cll&Z,qa;Jr6lOS>s'U)Ek%:klg+kJS?+[&%q)Y]E5B--
%Opi_roMiBYep`.6V!Z:*$'-,1chQSu=:h(O^n8`%csrDsoCJ=\ShUkmV@C@c%t[I:Ak2PV`M=4[.3ll7D9CEip5dE^+qsD65_,2^
%Vq9X?4FgHt<mR!"i';KB_,8)0kh?pbaA(CGN<eounoli10]VA`/be^[nrL("L>l]>(6sagUS0'I;B!FqL2n7O+^s?AMe5/><1Rla
%TJe8Uk]Q.36d&FUq-?cc=EUXUSrDn&l;)`s!UY4(6;MpuJM'*2eT'fpX">\^Gr>Jp-R1&9X<qR>hWL)kHpG<4][2k2I%X,,SolS9
%q,2f_Td;qr;"+j,aj5%<GfD-">4S.ta[jGmIjWd*^NhEa7A&h)kf/?a@4E/l/2C*WEB1*HFCUj'P9tETa$DtP'=TpuAQj+AjGH9^
%%5g4;F0[,3$:nEWbk=4!fFbEa9Y6.4Ob$GFQ8_ZO6S1(*=;;ECni_KTg+o@W;nFFR8Z+ttc0q9K#$Cc9Oq"_JfEl&d2>ko@[/M(G
%/0S9An<G@&_Lpm.Fq_eb5H3dP>R:aNpqCY"`gcE"\=Ga)lZqK!E;M$?k<uNcQXBAQpmGA?ShX5o\J*pR8:CX2(l7#Q$,!$;k&fXL
%RcqEpMr&j8:d?VRWnlbOIYJ[JpRlF81a.>H>T?)fcd`*mGhGE6pB$gt%bJ0t8PfETWaLUBQL(P-Gq[E'FsWL0@b+jM%`rDHcf6_,
%o/KEc'5n582*OB$3H?0rA=R7YE<oPa(Sn`NK?b\rdIU0ST.^cuPoS0-RN8eJ+2tA-?-25@qPu\:<$JUS"OKG$FUG:4>GUVC;c0QY
%'r`5\8s+.s.j0+u*l-I/&CN^fi'7ma16aW+RN<kDPfEn8TPt\fa`ROn8,sFS7J$R^WD4SY,C`tUdB/P3M@Hl"4?V>ef3'mqEq6"R
%atFAi&H("&ZJU9>rmiZi0+/gD_ogl4^7sfjkRi(-8?g)F]9GrZ][Om*[H!o2peUjmjc(</-XMRMO[W;`6tsYuO(6YIgrG8*GPHl@
%P-9@CAqbpCO<H#kY)L0sn+@/Z;"&)8>UUT]ae8CmN.NFkIQ6Tu'k)opIlJ@QTSL5>$T19sl&iF#418u1G0`3-`7eZ1!('c!5Fp3T
%_,\N!L2/6PmOAVE1XIB%E#qEpH@5OW1!]rtB11t\O)Z;Pp@PEVUBeXl55@BDfk3/2Vn1#3P5ROh1]/DWL7:]m(Hi[ClPYH8.afZ9
%:PN8)Br@-qC"9iMc\p_soS-K*A)l@;m:9>_l"&FCgU1*'gW;,gF#k1>_bVW^EcKXYH,3cjCoQ`230=)LR-=?V37-?p<Q?8;CFQui
%%.>R]068m*jB_b[3VInWr)b=6CHg+[+XBn:J;s_mpFu's_U(*o)q)AXUl9Ds4;/oZ*g,<[)p@/P],-8PGG<USO^1RN((B$KrNT:Q
%>CK)0p+TiY(0Vd2QB&(rPm2"BaDSG$-hM@mi^D1]"CaaH0s/c1oI4=c>Es"9>GE";%CK4YV6-n+9BP1;dZdfA7AFp2]bh*pT[9N]
%+,OuPFf*>GRTmQibJ<>pV[_<K@RI&TNma4A=0;?b*"C[.U'5&!3PG^$XPPa7*?2?p`.hHjO4%(TY2s]I5kn/DP<(2R9CU;m.Wcrg
%25g(^%\7oE`VnIC#Po4X-X=8EKQ1t(2'Htf7&e[d6^F8&'+HS<#kam2UnLuY#[C6FbdjF$SrXfC%7QF].Trg4!YRMH]H<-$d)2jA
%'=I^TpIleddHKL$`B3aoA;@6DUVmV4/cTo^XbTCe9+9EMI%?]_WX/DlF5trH>*-\2Iee#jhL^r3,l\-b&nhK@ksPK0:VMmYoSa"R
%9PRIL0[YS-q]#H8C(a%rDqVSqR^]GKQa:tt/4(,5;upE?*hemQ(s[RSA0Em:21A/QUua[+/lfTu/lW-Yc'`33Oo;7E;jrt&>*[X*
%SWRJAqaAL,[o/O#(g2r'7*0afq&<iR0nL48X3mQbkj7-*j,h*B"CFaBP*'nUVPr4@R?FC0l*pL7-d/WaHoFrh>9!>n*="gf;qj)t
%iYO`f6MGk0o=i,Y!.V@d=+nIoPii)H88q)(irH0he`bJMRZ6J2Ehi9<U%ZK,HeuR:gd%Djlk&_L_j^,"+#$AOd7Tt]n;1ag5$<"^
%%=!W:kA&1l*qjb1Pda3gLo:4CF`=E3%`FgAT.d7qT2'%\m+n]"OMS=-?[!QAj#;b&57\ATD;(%k*Xk%nms=J^:VPG+&AjXOmJD1u
%:!\H]Vol2g*kW]8(AULgI0)Fna0j8")\:H(l%K+0F65CGE7u6W*Yc0n_Tn%W]njY]IYd&&^7C/9+KP6&kKlVZ9$,$_HZ@9AOA>He
%`-RIKXre_@=N+S=pEl*Z)[I:I+W&BMGG%Khj)a#Zbbmk)"5Gkn-Zg!jn\ZZ^UUUDpopu;F8'RJ7%<3*FE'4$/f/o[iJ@?UASQj'=
%p%Op^(d1/7ag6LfB,VjkO7if\cJ#7m'06MGrU>p'.W0m?hQq`pXuiGj$eUfX<7@i'$(V6Ir:$($X1550^/"\fD9MtKl-mEIYQ)Mr
%:Ka^kc.R$IrVGL5H[Tb(ZpkiR/,XdN4PkU<r:g6]:]L6os8,%T"uKEmf]B#(Sa$`k^SaSOG>`ia)U)(.L&UXb@Cq!^A4QXX5Q5Ng
%`[thZIK$PU)rtUN_:Vf/.b,_28?^6%'>52C(4"V1(hGc"5QWFn;E.%CfsAj.%7ol/0$Yj55Fh$co^T5H7.5gZg[t"r#jsi3*3Mn/
%ct^f3<O5K?WH6[sq76S3X$5mc81Jp(M@#kD@Y0A_JM<G8)&aH?3"JDr<N.qNdL]@udYGM:K0GkGB]s.QNmF&>O%M<DCX!/cZa\qq
%Dc^uT<l5L<b8N%R@A;q9R-5l)A5ki5[PKbK_2BU*C2;]jS4fUgcIER(GhGKZkCHa-+7btFS<29e'<4No8lO?E-1gb"%'2Z.!V1Pt
%iuCQ4MGi\_%64MN7VV(II,CPEMut1IL`pR_1XJ.nJMH+MmO+rAU=^;'BGmSa_*!TB5&38CDY4q?E,MGEBFXM9Q^OCHT-JJU:N<RK
%K=9?Ik\Trnh!Eh(D#Q\^gCFqrfCQatej/L`DgAOS5j>WQ,C3c*b)$2*,\+oiM[\6gC/^:'\!!3monoO/#`nNP@8@(^7GV!3U2>[4
%09S(H;mqj[,<aYlclSE$GUTm5nO^k@4F]p#G!P(7@>!W-1;Ad&#j42fI?_Teq])<^>9`.@+Z%^__qZG#7?<Q[lJ;ZpQ-@noAeIuk
%^-c(*@_I%5m9<i`FYrcDh??COBL]p\@:&cfF5\T1'!]=/L/>44<2bUYrk)YC`j=1?:'!(*-1hpehg]sJbYMTgYPMmL_rEtb8[/&5
%`gTtb-6X+h[rb=Z=_L$lcliZr)T09OG!]f2M;1,/"ZQnboOtMe;a,[o$gRDaI=2Do)uJfS*!eYXGAO@gqS<t4p/,?2M\XgfEDc?3
%4?<`kN0T//2bfo+'<Dj`nC7-!-=+1dO8WPSCEDGl6)BWR<#)q,RCfjPI@:aciM0]S[T[[BL=qZ=<6kE-)<e`eg[H0h8BK9"<XLbs
%5d3[F()PqkM`"-]7:@';"VL@W"YY0pKVIKF!T\TuT,*/!`Yq)Z'`#Y<4e%4@P>PR'RgV#d%;9D[@J)NHF-`t_h]fscaFXKa-[K=G
%c>7JdHL`'KD+;)n#1k!"CW$bL=;-Qg.<f8Ton5BTm_pqR60o#p"dc%rEaqjaN!>Ft8)#HUOTVD%-3o_E_1r#_YhD.cK$7438.R#K
%$OXsRrYJ7ZW\!H<c-Qd;&!>)9cQ@J#(Ojh<Bl$BGQ,F6]2Q)Z%.?9$kLW3;8KaQ=i1?14!\K+,VA)tT$oNe6X[EkF@EBS*iI+LFb
%d$j%/Nm)l<LB5n&[e[e!O+99O*_cc*6Tj"A@;9AH%6)l0WZ(a"-'Z.ARf2ofOk3uZ]CS:=DSFh.Xu4ti($hQ:m/uCg0IC<\G\8P\
%0G=!c4>Jo6&W^iPFHVW%PO/iVFTDs9#OMU2V`^X)l*QL;Zn]K\(,I@Kmbl*k,NJ"PA(/9\DXjm@<:&[2k$LI*fgH=sH@F<Ra2q=t
%c6IN8Cj",[p&R>ZBrK(%YrFgPCnW$\37O$$O`NKsg,C;$KDd7Gq\=09kHW50L*$n^J8p9VGEt=mLMYoe8?`@kQT03'dBYm"j0;.4
%7$F:1l+4`bG87/<[h"OYdeB0>(](u8a\[D^X.aY*RV<!JCA=/eb$@4m8tC#O8'JRCkCD/JA?CN4R11/;k:qSLIHZ-_>NX4em$;'r
%KYO:FZ'i!/q]sC.U=emrPB.!B)[,:EZ<2`V'm!r&3ILjcUCC^#_R>6O;;U.jZ]-;4;NNH=f8FC*R'rl4JL4o9A-YC%1raY$YiCt:
%Reo'c''i<Fp=X<Jqr;meo(r<3NV=*Q)NT7lAOU=m9_^.q\eI%:O>"*Z"7fhM,(rYRKNs``/5`OXTlM7j23>)j(I83@$WcS_+]UPk
%LVA`nSnne[L9Y4-DNAurDa,e--miX-'U_d=[,4l.Yli-K#<q^XNk70BeCn`Ckmp%U5@A`,l<l5\F[%.:k1bbrK'Hj<qP\fFH0-j9
%fSQ\5o/Q[#=63(>I0p:f53m/t0-I(4[nH[/G]#;3Hsr6i"I^u6g!G/3O\'H3?lrsA1dlgJb/e)Lj(X_c<&hXRE`&S)Mc%L5F\$Em
%jmg6C6YRM%mFuKF_4if)NVbCSa[?E4@7H/Drj<:.kZY2_ju?H5[-Y\8714)ibRBVPq_/h&8*MkSgS`d[".`q:_n:j)@XMK=bbq#7
%U'[HGd^Wk%W8&"a@A`1I]Z(d=67pJg1.E^JUI8Zt/mZJLqh]KIX2*kdrN9Oh"_=J9\>0i/U0uFk)EP3X,)*P:Hao>Rg*e(=OFqi6
%QDQ$YVB/iZp="28_/H2e<[O*?:E0)lph:BEasa2@UOjQ>@15=V#kkE\4++@G81(LS(FoH2#f=d'0$p#"1Gj:IO,6o8X</&S91G&@
%j'%n[5pd9E/9FRh[%W$4oL8auf_>L/\V92.7+Xbi-Y:-Hi]5bEF^IdZ>bqdu@Ss><?STCh8&YtWfW@$F23IeF1af=AlN'8uQ"D-n
%d&RL8G-EI%22.\M^K3?sQ7`7&=`=^aMKH';'EahV"u]gH&_p0%nK?]m;rI@u$(ZbGU9X78#IRC5'kLn2J\/4@BdfY6MNFM9-:=L=
%Aq>EXQc1u>np@&i:meRFKmdU953E6_W0)WDD?gHQa5<Au>FB]`RcU'jh)rk!o$[uheeD1ZKdE`nDX>&-8ZpM,lieGH=_SC`6=u1P
%=D!C(_#6Z2]F[^HRU[`/,gtH(1nJR7Ju(Y_mYP7gj5-4O2b3K3(^Ia#:Q65N99.$%hT%?!obFZBbZus+%r'f@-k5Y:U_:\+rVb,i
%^1cZGq)U.tnMOM-.g6$M4\`.Qgb":R(ZDd;LQE!\e$7..<BmP!GkJkKOOl;@-A"7!0Thsq84Ds*ZRg8Q_79"I%7r6Ba$NSD+lFcg
%Y;-(:R#A`D3n:gJB7PZFnOM=.7:#bLKR.sFWM:bj=//@s#(JU<gq3/3DeQoD=Ub23-@`m2Kq+;gG%/lZ0D,6sL*44Wqbmf^UK\&.
%ESVT>hig_JkP07GP(Y3("C*WlNS@N\1@<JYnG^%DhZ#6UCAnVm=[R&Rjm:5t27WfOjcY#^f6etG?]I$_G8P2oAf6B8Vdl5i[5#1l
%[)T"\5L,7_49B%cg"s7!&HLs%/gK\VKB@+HRcB>EkB."#0t]@o0+B)gMML3u4u"Z.60$<c]3ac1e&b)I)":5`Br@.rI)a-uae4<?
%=U^3!%EEqmE8@%&E>6*S0QAQ($NeOo1r4[m4fXCmP+IfC'g&6EpbV8Y\<NF6[Wc%uI(Cg7Fs&t3[3R9Sck@J*HTfGn=E6"!R0>]i
%n_R@"P]=\1&JcIeUpV.@E9lWq*+KZd7dtKYjbrJf9UnpuJanRWah;H^E,X\EHt]iXO56(54P[A<U<\<@N_l'j_IZ[fTCC88p.j)!
%hgtnpL.])giLr[nim*Sum_^9tr1Zp[N@)PMhr'V5VK`=B_kYo^hIJ2T,([:YI?*7H][sJ`)W,;P%pc$;j/"J5&QSpS?VCut$'MM.
%@FV<UKmML(BYoJfT.`_\4`Dg[QsBa0D=fT!j0"PHh99fUG"+$qqaXlj,sCJ,i74f[QG;#jcm/#(cVc-oKj]tb+j!XnVKZDC1_sL\
%-.MFKVSR%:@WfYU'X+4,C*jb2?^<TfPZ<>Kn^R<S3.6223;lMqntK,`&IT!lW^k'rdPNWmI[DaT,Cf"2lYn"#KSghbmC?]mej6'm
%>*ggXr/_9o@4W7MK&eRK-m!rU#7jbk2QY0N!ej&D]*oLpfV/,jOkXPON&LZ+o&B3-$nkA$I3KBl2q^2q9AX+e^b+M$%;22+&5%Nh
%*Oh<TJ7pM-W(4U"8],<[5c+uU@u@J`.3?lc2l?j"bi<n<G*_g:K)Rc8J8j43(IqQ0jnd^B5+>laX=GIs[#5AV3#.oG:>R]18dM#X
%#5KUeqt[:+B3*"#)Fk#=Jst.!;g)1JCf(&W"NJTn0?;B,HISIeSPS^o6-^Vn1FEHkF"lg__;FgV*MF/N.+1lWq8:Vq"5.*XM'$h!
%E$@2bZ@t?SmBE5s:"cSVoHFsuZ8rS$R`3*#e9W'8M3V"dFJClW1jb`h??=4GP>kDl%(fa7'NFK59;gge8a[AsFG"`$R9Mb#DA-e[
%@p$><%1Nn[\"eHn8;mhNR^M(EMtX4!FEu?ND'[;/)_]KjXRncAQFrR[S4K+-7]Edb."d"=)cpbI6rrtu8!KIs5['LF@4[/P5+?1-
%^BEAWH'b=i/UXNb3Ocmf[qs=_cDr>"<tgIO;[r>!)]YK;bsTFcTO^84h`;o&019q+dl/@,a97@%1c#]dr7QbYkL(QsrA*-r.RK/O
%6uPms[[dM+;_;#U"f2CikBNH&0cPn4D$33Ff85H'Q+_k]>'1n8>ENpI5VY*Gi5EELq*p7,3@Fb"s"kbBL6=50!Z*(H3B'#;EbLS3
%Cro.)k7m(.UYi]V?TA.Cee0@16_r'oIZi065ef9jIsU@"X2aFcF*J[$@6Tjr'mH@!&^+0F0'5a`]2#_RB>2X;K,qL[)&e'>D,:-`
%o`VI^Ta;(Neo%'3IO4;se!=p4p;:W$G6g5@)I(sL`\oroXaU2qo=_PBZ`XCN\:Ci,LbR2ZciR/(`e`._*MQdFgp+1dH%sp@eo$O^
%!6'nAHBI.d#kfkF:$3j0>FX"nO]?Vp5ac"0[N=#8(EA-kppLZn'P;:jp1J'5X_TlJL>uau1d1bl^XjmpR&lpn`3)rhTU2s%Eo-=T
%E(0$DX'KIh#5FEpLD"B$AR=hn%>U-=VhZB#Dl;lnO7In8DMcm$5Q10i[\(<aiEQS6WB0883+9MGG-VtmBPd<,:b9+A"*,(7hI<T/
%^#=N'/d'a+mg\B:0@6)em_*^e+>ad*h$?s,M%:B.dcUBCfD&`%@Tidim-p`*W20k/aWSaZStB;)ej%0,f^lGeHa5]m\4#hF:^p%d
%d%kK8c9"S5e5W+4B@JFk71KLQKQSHg(VRg!]le.S7S&ZT\^ll'-^P8Ge8gsK-1OAnLkdiNbC]-PNV\J8`UN]shU'&#*dDo:=?af=
%q>[quFY/n)ad);rrJ,b4/:qd;qr=q?R72`\Ca4oBH>82aTG;!sQI0S'p$^MY3G*7Um_)bgR?^cXe`qFJlr,he4PW*Th9:m"PH,u5
%eOfkLmUb!>fG>'59aS_?AZ>g)g4C^%TZdY7T']V&PgnWaDOQ`3OK8O2cH4GlDp=@\&+C!".u,A^dJ6P.?k+BRga.,LP8IW?5`WPS
%juYY#OKtl8>G\`<U"(p,%0]_*T6b.ZUF,PXm2uhCp:VE%bru.ZFXI8)\%lP^9k;iW8hq=jN;"C\);0JhL[phcR))K%BWZIG/VXZ^
%9+gFA510&33fu"P;brdLjX7s'+2Q")Ml6@_f'Cn\VY$n%*BfKCZXJ8IDBn(=7ju>ud8_!2qY'+9C,5rTO:Y]FB4q]`LIRE9X$MQ8
%'4P@5:j)qffu'>i5U-OFJ8EgXCWSlR&V&=Oih4uu>Vn]G+au%JM.]`-]#5f@NL22KdWt:QU^@ZM>c##J?p5gtC_/Q!dHCtp/tKu8
%@O;.=!Bc;LOK4iG/8K=*N,>8[Ode.'3a';Gb%b9^l8IP#,jUY*E,:;l4IT""26#-LWL%nXnJ<GBp>9c?3k6[QrLK@D/XIJMM!8`/
%OR"._Zrra8m]SNkC*sqrBKF-iIF$+Zn5BpCRg&>/0_7,_D%2^n(g3rrIM`GtaL(@1\Guu1D4e>_N"F'd8g#_?ZtS5cWV"1D#bZ(,
%]oI]1djA7RX+jGFp;;a`be,hml]^PhK;@!qoh)?t1f0g1OF>;^9^a@X@+RH$X[C]E7pF9O;]9rlk&ft/].%P[MoMJ66u+TNKjVAk
%1UI*qe)L)Mju^phD9d/pU$j-"jORF?:Q!cPlY;FAnXdW-FbCi/gn><jd*`@QN(gXPFd6ie)K9<3G(/[@$Q/nsZD9$jr^Sp,>/_un
%&g1ZRCF@@g9%:kVe=oJH(1T>Q1,OrHNGF0Kg%_`5YV^"R"D\WNL0+M;juo1%6a*bf@.=pj8P%7,?3Y"&G;>9Dog9X=(j_dI!6niY
%3Lr^1P_LgN!tgJalVsE]i0gPQm4d13rZ4BEp;7N+r(.@$[.!jl1&;mhR\O6=gbhX%[`+Fg1HEJ&k&:VB5D)8QGdn_!9YmGi>)RRN
%Fgu/,eHE7FFAnQc_7ra@7+$:;"H8Ae!YiWt.EVZDOr3hl@hQ+eEML*=7bNOM0,?AfWqNc(a=V@<J]'6!\1qJ#_lC4V?IR&%a<Mh#
%a2cCV-O)'6X,5=aV$jj!5Yj8\9VQ''Dd65T1H!?dNo2H1UV:A[g.8P%_p9j><d.0f&FIsZ+`L#NZrRdKZ2hS)PJNP;Ut+%A_ZTiL
%(\6<ZL-eOaZ7kMD`In5ghQI`'l@#%P,t4j6&bUp&19dPL;,r8\Eq3b!:*/GM_LE'mZSNQS;*$9k/U?$ED206n3860!"4q75AsF=l
%JPg%0mK#<dH2?;/LE6r-G*LZ!"\eC&jd>!NIVfVK6.VD.?#-CJqsf2Smrs6%ed9rVpn?X4a2q4.a^+YBP/qDhbthD>40k]]MYh[A
%m[d(<MHK.NVK9dNSu6H'bNR`pTRl!bc5kCM@X,30o9URq]ghAV"]OcW'>&U$\k`U>85!b>9bPuAei(7NeO*lY\P-b(I'tqp$)NKZ
%%AY4:I'nNaKr3l7i`rMT#3*^4"**h7JSa8QJSYiVD]i7W%NEL?lGEf-l&U/G5i@T>`sq)<m5L+94_u5[HJUoqLR^;bX$6Gu"8Qd9
%q%[`hbkh0Q"8UJb+J0eUKg[2E<.M4&ns8Se[%P"VVPqa#6HCQT*SV'::u"?-0hM^'W-Z&T0GPIE]A&l"J*qr0<#gT3#ur7[gECXQ
%;p]Q3Y!W`&g!'_mIs?E&^YSS[IL.@ahgS7C.]t\]:ece_"4e\F&bQR(#_nZ1%UAn_be[gsem0Vb:e^7"=%1eF6m=E=`=d,c![G&*
%R"Vf359P[S#6LZJ+\HL%5#bRC+#&"#!(*I_^ZsA;c;rCnUOItCLeKMuILi"Q:6,4+9$2k@Jc5X7'OO![K]i\Uf3U_!EJX"YoW),=
%07U03+&U`0ek[Ze?$X3AT7@iNg0:K4(pRAFH8$8ZItWS,aa\sX/%Y[;e6]j_DjmT]6A-_3s#PCQf9\mrY9t>WHBWJC_(s4YM;t/5
%Z3q+(&^7ZM0^+3Y,siua&9^TtkD$<RO7e[ah>'P+]:NdlGE4Q@rn&tn:I6j*o$/XpMo$=C-QF:Fa<%_^mdFa@Fe_<1j[4cp\)ho5
%R%mp"D*NeBn[*Y-q18_A#c0QSeXTM#]6/P68$jM)HM<L)<<U*\X`<Pjf0Z#&ieLe@6i5W/+[4L]A#Qm,FGXlg@h78-njVHKWf&+#
%">sJ,EGQD#i0VVaL-i/e8V%cbenJYm\uh!l=r4*pZ3+>gN5Pq-qbiUA_1[hZp2u?W$:)amfD7?^kE%kf31GG=DC1GZbI4o)]X&^b
%kIE9h@p#ib/oD]MeEiBmdIk1&?\GJqY'[ALjYbj%7cD#4N5-7S3s[;+1E++T#%\!nM;_9.@m,04s.o.5F_Dpc15YH$H)rg=6;0*B
%I0K5.UsSJABB>UJ$WY>,5d7%$JIg9iKsb"b+j5O7$l\!5^?6>Lg8/,dWW>f4^.>PB-PhL(lTAGC'5P\Ak%g`382.D\Dcd5;%QX7A
%#6uHeM7bQbEC_on-9%5jB!+XgK@1Gl&>jFghsZ%"&[OBp6s%I$ap6"n:q;a\;5?Q(YjV5e`J"q=gB.n13&JmqeV_Wb%XA:;MG0>l
%h06rN'g'cG]=X?AdWK38bu&CXir8J'5Q'>5^]2?Hrr.ZpJ,J9'qg\HtJ,\8>Uo[pcN\I,aASRjJ:Qr1SQ7ml;"\]U5,"O\lqlDbh
%G<sK-WTu[?,L/(f#nnnkMIg>Ul\C>n>F0>c18P)a8%5SiMJNNW07jV-:^I7QP3a'1W/Q-[3Y[i'Z-_"n6Nia[<[,RL.]HAWUCnG(
%ZP7*t(Y44nr-2@n1FOOXZ*AFhMe_:rb1XPWDi\6XVsd(5a$Xc',VF+jU"r4BPbTV"l_V`6,tFfRdg'5ZT,/'iM['^\)5J2;nSZk6
%4$GQi2XRc+6r-.=ahdi8ZRBg%pQ,L<NB)N(o\j\6[HjF[9M,r`+kXpdN<$tQS`(Mf-_l)fJVb0#1N5gMJuZl/^Tp0&J1ASNc<tfl
%OUA7f4^qHX@M4l]b"!/p6C(*p)6#i9`?%VIfbGE@TT3A:n_6Z6FTOc?cc2oQ!c;H^P$l`;@d:s0l`NZZLs)T`>$E+#MIIPrqOF@^
%;eX&.j@BrM;^"Kq9)IN=ZbP:!nG3TC2uOnL)T2e#R#,M^)FlS[3R:"^:";<Co<aekBObHjd.M+3]Aq]KGbW6V'"Yho+OT5TY[)_W
%gp`%YTWL'V<6[V^Nph/A0@*i;hI%0)PUYeW3#Hrr&;KU7GY"n"#c2(K<sLQ]b&!Yff@MGcW<g-!)K[\HL0fgl?bYi6J&hZE>&usZ
%m+q(,jf\LCK4FEUq3f`lM'QET_,rU,e2Tlg?M4RS0kC#K8ss."XZ];iPfK;oKk.V9c(>F/@;5^?6<p%'AHU36S;oH]#<p&eL+4+n
%D>CCWj>*0i4VGO"'Nk^G.XMn'Da]c?4/o=l$R[-JAR,IFV'09$!l_Ae0q\[D!`,gm_@Jr,<hU!"DUKe0`*_-(X_]j74naX;]%VS-
%2?,N<!T%['rtI.:3<mSOoh^/]6]OB.Yg@.u5UW$9Uo''@en@Zn$%$Kt=qZsXHR*%0rW7o8r-YM903Ag4gheY#FsLhIL9l&P5jR?-
%OH,"Q9Wd#lNPZMjRVCnrpI"%/<na(Fekn\0K7M\+Rsr_m>N=J2[9UGJb[Gr8M$@&g9$V]0Zqn@t:^ebjEL$<]-b$j?;2MKV";0AS
%9g)XB6L8KPU#err]80OLVVh];CD]Yc(SF7L'qg(&#sOV'b_5K]hHQaJoOm56S[\g:E/TJAnq;T;@r$0[Jo\3\g9;2`(5rSkHfh[T
%/arPt7T[8\-PTo^R]^I-RZ@[6K)=2oKT(Ti-lA2H6e,]`Q\dEK;p[1c8V298BUOUk3=2KVXdDPYBL".`PK?E%I*e_7lEVPeR6MY4
%@rX=bW5WAB4c&r-g+P0Y=+(7s/u`,T[?cbP[B-gR[%[..+gXoeZH\0Xe?&]?@+UEHMJjA9c!5<^]BZ;(LH]Lt_LU<n1apr9_'uP<
%M7%;>nh$ji+"Rr(N]k07"0]@'h*s]V+XPD%Ck)$(_Nd331(dK7"Ph`DrP@3dDe5;>?B&"V(T$cF]B:G8/4,cdnGQ*h",!6aD28\@
%i>ko:%sU>Odo)7Lg&\5m'ls@Db-:Y"A(OV1=/(FgH"pc#jd(SL&1DuSdhF^=28;&8mQ]dc.'Agl8dZ,50C/_*!%IWUdiuFi$g08h
%A^pL8O9/&AgnWJLr4;M]\fN77&$g;JmKZT5c\Bm%mO%0mJ$");eBii?WM[r!Ob/,r$tpuj8`GJf*BBS8/O,^g[=h`;9quNDU8iZ>
%HB,r2!@??Q<K2c%;R]47+Oa;;HAEn&+pkO-k-k_;;ZfXEEtHr4">"&#1-UKu`X55Qka"'Of>u$-!ApcDO4Oh1M],lXnO+80!L14=
%9n6OhFh8>9CsW)3e#uc;kcU76C3.ltkVto4)X)dLMk2?Hfmm5r:2!KWUn`IkG7b9nL&gKXa^kYSD!4Kbq8L&qThIFX==Y>TW$YN<
%G*mr-Pr>A)9DVfJHqU>ep,I\YGUs4U&@,%ujel.]/K1%GU_>;W,n4-F/:.FHi`*j3PGGL@C1PnoEQ=gbPUBX"$E3Gq8@!RRdlur4
%W,cDKq;!gtQYJFlD*TtHhlTcdHj\srLUUr#*VTG\0gMo]B@^>Q(EYJmVc`[l&gma0$Km6RLfo"liC-d"_W1LL0S3-/3#O1h;2cV[
%5nS["i.FXO*?^'0#XJQHUQ5sDX^%MI=AcY`U4CGh],)%-TK1;"L%"\X78+,l3H>*"<CM^\EIqoW<WBj!V!FWJ?jH`!#<KC>M3L?_
%Y]l3`C8r$<cg=Qn9Q3fA?#3FNj7.Z:-N(bD)mXFoZim>.*jn^R`RY(c0!K.%Cfh4j(6NtN\3'it3>4r8r0G``"<d1\]l>fV7e,Yr
%_G;+!ZKqR&fa##fD5L:B4^bdY4Ck[\ig^V/L_MM)c;h_"Qo;l*Wfu26B9_sGdQQjOV3,d9lO'LV&up"O;5)8E5pg.FdE-LfmhZ)5
%j,Tc_7[`+mmej9=[]U&CeAqB?fq@X'J)fnM&5W@u.!,Co,rO3;GQ?/-![t[6%`U!`KE=<!W+;Mo@4AaX3MHqbgK=YJF^6E6<[Et=
%Au8uo[<C@Y1F3=3TB)(+=jp')TC%9UbK1=D70d)ieG\Qn@H\7uM9/Ym)NK[tb9.p5.%UQN1$"8o<>l"_4JmU\@$&A4Ku(e.GB7mJ
%XP3Dn%,u2'hCoX`dRhuCW/N5Frf9"-oTdG&Q77>HoVN>0C$`9!W?^Pa"j,4(Q;&EdMN%2YTCG#0Mp[68:fhWS:!f>ClHY?@pj5+,
%\rjNDq[R:IN]R@Wi&#\keY!HH*)!T>jl%"Sn&AmpH.nD4[`u3g6+Oj3j@e()Flkt[45eB5)"6[Z`G@)m5@K+,hR`(Z])_s*3TBhQ
%\m_!b0`7]brK0=%M3P67P!Xo%Pdpa\+u?6p#sB*Pa'F!"RG1WfCq.4H7m<a"E+"-iljmWN_cC%NF(V4V5Z&l.3u[J:4&ueh,RrQb
%RWSjK6G^Oo/ZVdc85LD%P".;E5CPR::O^Z6_.!.PFjW6!@\s8DSEkB$BOXmH"f>Cg"Vn-4lnU,$.]B]!7E?V5/;$&q]'GR^nkRCO
%=EW=Wa`PaJQ]+b=FNlM"#LE-[1]1RE;^!ZG/8d(oYd'[(DM$74Gk738i0sE:U$>ahUO-DoW(ugR<Q`er`;rB<%bn:1?Ns578eM_C
%HD[!#No2^p4`U\$Uh?H#QE%Mp,J,o\"sK\_ccC3n)]u(g>VPlI3jR*S6`$.qQiqu\[n_A.`&jPPg`-6;o6%e*0VnA^XId)k!R(p>
%T%=cR%o=/M0CQ6D:dl7O,]^`nh4UbP4qOO&U7BRlJYXf7+HU_nR0IY\W_1kj;KYMNFCR,B%)k**U)4l9oh:Tu-rC7=[SSDc/U"MI
%Kf2:I5m8Ya*\5joZV4+[$9\D=.Sc#%o(^.l3'@,0KT]df1_6t(I'<+^c'`\[AL2YHRoTBof3lF><TAWBb=a5=G`YSXHf/JG)A&?p
%m\,=jGTEGdH<=9cMc@)GNp?!A>Ih,4&gSPq-OsEScOG1W(EM?5c9``lr=$#l^MEDh<10_9kVh#e<(WS[<CrXTKP(1eV%*"#4\gRk
%\/mkWio+u,>r@)&6#I1*NF)&_"]SL=&OpO#7$trg4j'ctGN@A@P+Aqk3kIb66Y3kR'P6Go:hP^[Fhl8_+<a?!AVQ)Zl?FG^EacuX
%BP&HRPDi%2=Yl^m;%k2oS0a<0h.tLtAI)-A!tPi4l388n16Pbd3&4M(@T:;Y-PjQtSHT1dd6(JH2neM[Z,BbQ]S&L#i\l!`S=OE6
%_'-u3+^1'%*fGmhU>3SYf.VmAZdK+u!ZiLfQ*@[=g-Pq*Ya;B5206'X0oSW;k'#5I4lC2.<kYBcqRj'([ha2&_[6n.B^jh.Sal"r
%7Z_p+o;+.'"#knjQ_b-IG?h@f1NO&.3,JZ)$$V%u-<l=>"9Sm&1Nro/R:u1#8.sCF5tt9/*XLY7S]M5]b[p/qf^a86"1J<r2gDa3
%b#Mh7+@c.4[NaCq5[3?:IFWsWNWF:sP,au'E+dqr,I3Q7Lg&2*6O<qBI@*Q/"Z1P0ELf\o&:qupa`:JH2D7LpnOLNY&=K*5R7Qmg
%&KS\C.2[=rR^jF31`K8_D%tTt_(<])YJ[ajVkmqlXS$S:p49LqP';V$O@'I+\nY'L`r[7>m$"'QZk%5G;2gGE#[SKm2R2KOP'WQ(
%P9X1_/KoI3Ks-F!7&W!/cQ9.[<-FupH4#F"5[hs=N^&QNBDq](Z?k-=\_=m27e8#28BX]?k;(rG.Yhcq'["X-7L#-1`n@UbEM27r
%`WD/%bpk6PTGFBiK(J\0XS7NL-K9T;6;+1A#e)W'^OYP>#<<967R0>=I)ld4.2m=YcY3$fA[L$ghVk,8^V^d`f]JiK$</oBq.ZM8
%H?&P,TuA0@1;S6$lPd;6!Mq`fIW7;P+WO9\VX&V">T9u8!07[H*[)r$Kk=]2CNK<TE6_S!Dq7Io!R^%;m6%QnMX8;PTi"B"n8j/O
%g_!"i_9.,V3i\h$>NDAZ.1_>2okK`+dM5CC?EHs`K?EY9AlXD+[*oIOgAqqi4VN[kX$Q>:oq4rpGA_T@+Z-:[GekcIS#(!)Q7X]r
%PY3+MFe8JDLPBNN8*P?>(e-"kaB@S6m<&T+9"G3?:asqq6SH?2:nGWVT(]_,[TF-g2;e'oj^>BABZDR<9;b)YR9(,]fOemsi;f'(
%CBPu/@iM.Dnf'V?fk]1"-rW#a$>+kXqYO`0So\$4"M[:EedW<KMmc]\GX3?3:rb3i@@`DB5+q1#=g^!;frI[LSm[);-_]lA&Ve<R
%K$GiGJ^)<>m>UamaC:A6VLn2#&8]B)3/hb:=rR0E%r/4$'8$`DQQ#-H69:)5[tM7#&B]m-d5tI"r@jpL!6l\o1NZC?1)49+CMP>A
%/Qu'U@RVORL>@g-95ubGoKgA(jjrdtk2?Q&;ZVloZ_AH9r5RB:hT5aN1Xk=$V*e"B3PLhkR!0rRr2M=U_?`dtd$qjl+f)9nklYT3
%fn@,5e0Xo="8Q/SRcft-E,$1lg_4"hR<3Yp/2E=k+"Q@DdZ;;,Jmo&U0(h,]+NW5'];[f'T19iHhRR\5$I'$8[#t6,lEV&n(rjTF
%.*+_G<)`;BMX>R@fjZf3,DVSo1ZB<nT']_C";2W`ppHfddAEm=WSUpI?]WHEb(^`aL>G(N<Fr]N'R=HDidq=@QLN:%g:Tn=!W?EN
%H8mN.p=R4/Tn*2RJW]I*ndR.@MY/tI088bBg)JS*7[`!ARs#p7,T1#=Wn$MQa"mUWd#N6t5e4-M34NjX=T<p=+U8&41?OI&X`uuH
%d[E-W,MJVH2\B.s2A@*_bF-3W,#!Z'mU-3<L0!8HKuXk/_4e5UXJ8q'"%<Wc^PEsII+c/B15TG*+%:-ii(QU)*_DNfF7B.$Z:E5Y
%`!3P+eA8]<2%AUl<3:IrF0n-jfO(-B3afWuAEZqu>$Ud&Z30m$Z$<op0Y39e4s4SKMm/#P&[5psok(E\,o>!#?-5%eM4TU%0jg4Y
%+ENQm8'8:-a9+6L@]H*2iCI+E7a:BS64Gli1<Rrs[fOh-An^$dqJ[@a<Yrtmr,@kuSk?)ZnM0)fmBTdt(s@%H#iZ![Z[?e'PLsOs
%97UM+7FFV!LUumMRm$HWJ*blDCQ*2nO):*@glR:]s4BBRaV#MGJl^^X%uYUsbrt4PN@),BTG[Rg#>*CbHega2&JA++4@2oMFE`C3
%IeE#ZbcSs9&7RE:6h7n6d1GEu>UrbSBmG4=fs:i"EXp"!I4^2L`)*)j%REMEpEFC81^YeS,&\[-%H"1&2.BX=63BRq-G`C'prjIe
%9X$;q!nsE_84RhDr,uAfRRlFn>lE!WG?OkF<8GXemRD,C`1hM"Z$qmtHY@8JX_-7eSCX+Pj?R>Z>rsA.Z#S\T$O6>BXB]+`A-YT)
%:2V]V1qHb&TROSrj26Cm[$@?-),BnXRK4jOV][gYTPdCn0ch-+=`D6>m7[aA3(8NqjH78$Y7!l[Q2$K$e30<aW>obF]9k,lE7#+:
%8Paf!;>f0MHERt,nC<]c)FPt0#u+W=*Do'FO>W!,'E/oom3k;kh_C@60PpoIc+l2?EKjEk_87*2`Eb&Nf,bXo?(9X]8qh7MFspZ.
%.>iXX3(Uf90A!@DW[J01`lT=r2!p&97gVMafQ.EqQ?MYkpQAaui2a,-UqHrh#JX^XPrbS<#RoR,1tPc6LQBO.D(Gs@ke)g[hXQ3m
%P2.0TTnR\S0WG3%7;6.Z-W4c$i"c#a/u0UE5+&f;d;@+*O`nc')9G)m;T"f%%3NNeX7[^j/p9`'<U;R8CcDCL<J+YucM>tTL;m_$
%)5VoZSb-d'Nfpc-X`D;."r*2VXq_\@rm//<NFGOY_(gOR_orli/(:TG.O0Uq[b3bq'3Q_6;:WETnpM]B4Gc2Xg:0(`b?Ss8O$cQQ
%5kNsbT"3/GFK_OOnJS*Ig]Aef!QFKY<`M[pBS>.S@Q7a(<Nh(5!$EDZkJO8W]'Wc0T<9\],I&?LRUYpu#<nl(GGA*O`4GVk?X4$H
%$Z1u70Nb3cCV+Qt[;3%>S.8q^gf*2V4XhkA,]9WWdh0r2fg5?nd>b<?[t`msd'ZIco'LH4[bj=0N*'$Hjm<iINBZaG7[q*Jm2c8J
%2OB\M9,tO0Do#WEW4fFKhKJ_G#MV&;qX=D8rKg^AT^K>sOZ&FjYqs5#1;S^:N[RYJ7B1%545<<OGBga>5IHY;7uZaK2L(Uh9qd6>
%C;#;m',C^\Y1EFZGc"Uo,OGk`_/uE&]RMeO7"QWu97)m\9#Ut$b6`m9B^:1"?Ft(*4EfKDQSi_iYK0DSGrU_p#dDJm:ao8WQ:s;.
%i"44X?jEN,AdrFF#\#!")<d.CV>-AD`84W>'L-E,8)n_bBEn"*@A1NaoYFL\%WSkb&uu9rjj4L8IDgG$o^c7F_bU(44#V"i\g7o[
%:C<meC^A_$@g?c>50@!c/mcdW#J6fB6&aR?V?k)'_Ou/Til'M`_dX1?)2Hh=r"2j;`A-*dOjQAkG^m0M&[?spT7+jbV'7D`*YDLW
%p*?(B9FZq"ThgCh!`tn)YSGWFj5t^-;$M$*WOsQW/ad.5crSSDSZPpB>\)AidLbhUZm+POD^UfZjO*::IlRo5KlJ"F:TL@B\b<f&
%,a+m)m&1nhBfK)9GH'$u+G?0OE@iusNP3U.^e&5'SmOC\kBAQa/"/D!9`10gq`'HC-'/1f1;InPUmi#P7F*s:'PKhp[HbhpoH0JS
%/Xc3lOf+BTB2Wr\3RK)J%kFrOpo?"2X@IK18l?@KB^7,,ep%hbekm5HqX!!q(CaVjU0&?)/A;c9Q$MaFTk&UL\fH;(q%D.Q]daCk
%eaE5P9MnZ'Y$.8;PN<O#;a4p"s#i?n499u?XVf#UMDc`]4+5oj4`09XlJE;WPMj+NeG)+*&d(IP5@S#do#_C5oB/(bKbDAE/YjW+
%CKHth/muWLngI]uEWaZ(mE3$58r"Z%RI[aSn#3[#S!C_,*fZ%9Aap]5h0q(B47`jK'5Y7sA^H0e7r:n=PYfSi8($;)!bBi0d+P*O
%mm[JiYY0_Pi89h>O]"&%M)Rt-9]ldR2qK@T?0p2,8Z2hn\*m3r,5/^%PpLRZZA[_##mUuZh.5$a&pX$YQIaA7?q!,i/A,#6=tb[*
%^ZqbYg3l'QK24NPmB%$uAjc/cC^b22fE66jALJl9',kVa2*&11.)ZGlH4Wdh9O#W1"HZ*A!dI<Z^^i5CCB$_XlkK$919r]ZRjqrO
%=Wl(_*Fe\NeI]nch/*!Z:92-S3V3^,MAKmS>]kYc@pTY0(!i?nA8t`=kC>f/#>[eT&X=:S6#^F947.p&1F8it4u-1;1@MA9l2F,H
%oIZ'Cl`:LCHo0/!8f%>cE#^/Sldm8.M1]Q>8-E['2u)+nS/Y\;"K#LX6Im\QaD@EH6!/2>A?3B_;GCBB1Cb?-mS<U*g@e5h+G`H;
%<Y_dU!glEe.'Zp@cku?6ieV$"6Hm4p^7ndC03b!PZu/n7XNVkk*>CqMBs2.G9o3'TYip?>'o.!>SeVrPVFg9?JfU)O,-o$Rc[MZj
%eLs+Y?CC-@`QJj^m8F2h/#JRP8gr<P:_mN*mK3O2_g)i)AdCg^&"dg_<oB3k<C0_#P@>ooV,l"Qe]*[hKJ1#^+2`bf0-U0gXWV(m
%DSA_q@o>]_)hH4D2&pn5f%s6)"R(Zi3X+6H.ZX/A%Bkj@W0eq]oPX=?=UEiO*4J#Pedfd\O8AJsH,l<eK%G#`$9muslgWW1.G.+T
%o2W7Aa6,GcP*`<;pnkZgMj;<l?O9l3NceB#T+4]8'jU\$,E;Td`0-,,`Bf/qlQh_3AEjncpCbX!b*FdqbA3U4dWKqX`=JXfApu+Y
%KHZg]bU#U.!P0)Vf<lpXq2',^?>g>9]5?@2"K;%&*SHik9W1"'UJsV70ObD"q]f=q>h00,6r31#<u2nRp*5k<kKq`C8uuNXNgt8@
%f?2OT*-+\@;"D.6Hn!*58L71\N_eqLPqrCcMk+Y[[,m_,^qD=u_nPQ;](Nj,s!?<25#tjQ7+)@do?5^L;G2*^a\.pqA;lHE=+`YZ
%)7@&DZiF(S\P/WAAQ8](HH\SGP_pV@G7ehpQP88&lCpp93,453Jn]Ak1e&6q^G88@k`<O\S4p*"8SZDd$m[=u/m^h#U(%F7!TKnW
%Ke'[fT&&:S)IKD2eWURq*t42hMrf&B8cTaR-PopIi2BUH'd4up6o"d('T.gIA\3\.0L(*nkU9ISO>5s+>=a=b0I\u?!AfguFZV"$
%(HgR%S:6#H'Mqm!'8REkKRf"p!O]/!cV5,$!b?TKOu4saL/'LII`.<ur!Nj%P06elDY2kB!Z`@9$ai`+b8bu2I+,>O<6VWNSl6C3
%E]aV<Ia55qnX3s^(a4:4ff.)@nWG8X'7C$qTjI4`hb[ISog')kAY1NXo_PjiVOmCIb!NdL^3k9=TtUoq6-`7eo=skO?5WmT.Xu`(
%ljV3O;qo_bJNaDmVBl>q!K7tnJf+`e9>ka&$"^W@fW]ESP#*DfM/:Nc,m#^7:"7/gn")M#RI7<sV.IZ[74bNrC+mR3BhUDKg,:..
%iZEl;P>/DPXQWLMU)hCI"@4:uU*tO`B_jAq9+Ano>N\_!?cpgX:?!+c_cfY*]@NATGL_IeZ"H2&P[K1D;1.Z<2ti3.55jBIN8M(&
%-ajGHQ9TaJq/+=MQF@8>(l<Y:ogbMp=Y$.&4Z-cY!;XEIbE.HeL(?!K2_nQT(13&obs)Q[S%RejE$1m&6/\2-.U'!.MMYo\4(:3-
%fGn#RNE,s#=^k%pS7GG_L)WRQYX&s8G8F4>mtc!Lj?c*gBLZM/=1#suLgW6*8etgq+sP\jA`aNqWCK>BE>Cl@L&q+B_je.W@&XAC
%6%VULOK#@6-HFVO#coIV?pUpRL=b8VBtFS^7.mNGVRJICqRfN)$3Tt#HCnPjf3%)*A@%o\24f6<0=>RX]7I`a)IHt*GkQ+S=5Pml
%J2Yp8iY&d?Xu'in!Y*0>5i!IMX._#jPLmGJQ^d;R'S?J?:f3WC&-o;4mo#,`=u45EX"H/!@=+eLV+CP]eFabM$)?@R>[,9We74b"
%L8/hT1/Gmq"tf^EUh\u41Br^5<Ual,eImi3&>?IOj)%"OU4'Z$3`I/I!WO5\=mspLEeW?V2/]q!J/D6!@0+2dg.BHB"KeA/ZJ+!N
%6,O?J\RVi`l$q^!/s'so6F3+].+P8aq^7",,o1.%nO?]4@8M26WkPK]Yn1EmKuJiXQEYhAXZMCg#hhpMD*SLAAa76J1"S&`c?Mn<
%\Ni`B^<B<)'#&?NB/U/seK8o#Cr%n9#P''YD07$sX'N2MWjW(ERbAEGX\pOmdZHR.R)1a08Y:V"S*UC@@cX-&D0fX?O,EN;"d;XP
%:)GcPc7#@H5=8NhPRCLV?k@UAgOYBT%?6M'ee)&Qk"Z03M$S."/LWB`9CqZB<bl5]@"M,M@4f]sMWPoZ<*Gf@D'crN;&gj_!TL[8
%LsdG_SB!3;R%D;?a@1YpjF,87m#P%M]<]^+:AJ(GZ60Xb!g(s8mGf`-7R!@eg=,W/2(?p+'YWWB]#$sFkG0[2=`Q526p*.H)Yc\?
%_)RD,51p(O(+,/?F;)lLG=$(C&2-p6IkWfsg@&Y3O@!Qj'S#h`E%6a;=j'rl(G/7uLRq(`JBk>l?If#![[]OJbU^R(dMG/&^LgKu
%+prqQ)$MjU*frNB5D\ArW8QJ2TPIbSH3!Pa.8lmc2Q0:_#rUE:J:d#-A#^ha:dJOr)X/?<.Nn$Z=ir4X2@LM1H?X.aA9FihGdA33
%Uujh]eqEf]%U8c,;Q<Fl>rIog42jl3'IhYLpL6?*@G8=?.<?HNR(b"3lPXXCnuZr;*m+*QXr`/;Q9^*c?]rSBh0q(BD]K4nbWP4O
%Jo\)]0u@*!B2k\#lp!n+@.=91UP]^%R+7b/j2"%;OUI>:rc`.nJ:;.gec:as,B$7$P*ct>NKVm,OeO*e\]*o%'_^'.1c71980V?c
%Lf'n-0a,*/R@+RT<mT1MN9P/3M@XQupf9)rE4qSEDt>,M-,tI*PJA;"6;ZgOkb^VaNf("0"68%32h_m!E]T+;E/N/<1=,5847>IP
%0IYE]R?9+V7A?p/DPg3uUl4IZ6*8\@jV;M>PmBY-n7fKDpVjdiT%LmfN`fa6C@cY'&mKcfG<$;1ic2GKEbmW7Q"EGY&aS5j=)rKL
%j.Q+b=U$1N>_mK+`+K4$@;OpRH=<I<'F&6B%/XJuUo8GO3md8G8T*MU*_iMb_=kS?9!\B:D'TFq]T#D4&Kb\Bik*_-8t-RCKkAVN
%RZcQ*8q9*bc5R=o1Pn/&"U!-).&V&-$Af26:D?tUN0U$c@]kIKm2$lAArN<>I+uo?aqtC0V.AqgL@-E'ZnbhPQ[>j7,RuB4YaWDM
%^b-6)bc7A5<m6"XXVA$KK.SU-@[XY@ZSj>ch[\8cal[FH[e$n;]2B^D47;@g6q!ofO1HV=@ggH$p;5ZWd=UK,%%</g^!(J/;qAOF
%]e+VSU-+TA>=OY(&!S_ie@'-Hd574R#=Eg[C147-cF7%[^@F`1m.S&5jq)8iNl1R<Y"*.3FqBZ:&a=_2.;R40<`5KkRo''EW'C4,
%?'UPre)f(q6+*o'#>]]N(R2Lm#PALg>`N@5U"g&K[LPo3A4gLY*TX9'WmNk"dNeB6BT[+tTA-k=A-Z7I*cA^9LY0$WpO]Pk#K/$_
%is+mBo!Zl'SP_*!F1OZT1Yn]q]YPDp6!raTrV`@<ro<%Rs6H"kJA08%q9c(qFFLsnKq<eM:$6-iq%r4a2g9^_SJseWoCE,!le?K0
%^9ts)e=p%OHc1N[9fq9)l4^!G&lbWk*P(N`ah&WqCreC'oPn!=2\^F;2'TmIjh1k"kU^okOs8ij6)o01i@'JKl+30_ksmak4%:KB
%d6G*GIW"<AO<%l6H+<Z6T=/D\H;U8(Gj,,'"=s=OM`0X@^5=3U*VO$jijU62CKRl>Q!uk`[!oDU2CI'S1sk-Gm&L--$gf\P0rGm(
%`Do=AL<a:a!_Qe8Le]QFOW7msTsq`BEo^XU=:&\d`<6>SJ7atqW5UO9$;2f)Ci5Gg4=aA)kYMC<f,:VZS:i@+"#LM`@4VXnQnOQX
%RUM6$eD-'*Rro$G9mWDirc)uhd1CVRW;0*(%@T-)Pe+ODfQ#K*@=C[Fme-,^I5;I4fWr\*V`CaeebaP:G?Z/UFESA/"h&R_?!Ch,
%(P?]I['r!GR;pLnV+YIm'ol0$XgQ?Y*M^8ep;<NIYTJ0u"?!%X+rAUQ=mUi?RJTlh3trl'854D0)J"ob]R5?s*Dee*G5#T+-+:,I
%"A=<okFAR:U0>a6HrZpsgfSR5k!MIQo:s[d(^Cp$hrj:$b1[-`WsAl,72&Rs^&&TgPt%X'FSdVVFGCRE:0A-S0ORD>,^10Wr0Sd@
%WCSPmU-jtaX%(Cq!iR0?_icc-lD%MM?tEcFeOSMX(-I`ogCCM_`_7%ipVX&jrXr\s+/ni<c,i$1c=5N'Q>=G`N>m*T(e^i@OEibN
%+!;eIU(jf44]u5[#s$(rO_U<i4&83/Ub<9V;<2TaLFSi$:&pfD5ZkQ&&A9q3]%!Im%("7!+'OZKKtnKtYmG!A4*5CoA5]cS4=Pp%
%6ms#Y'W!2EO.\*W4_4Gu&8e]@)GOnTdLtGr:lfbN"o%<\+aG$qY*5PBn%)NATW1td^:t_uK@E.d1ku$t]Kd&4LdU$m-hW6]B$bLS
%.+*?=hJ6-uiraUMhj4JoDG7e4MT"=;&FZD-@+D7t4UJOMfoArR6=\^-WJg-F@^_Zg%\1pSQhoO<L1($`KC4dp2"W&XQ"J;iTINAl
%Hc?Zf[N&.&H@Il#[2V:#XB<;M#=kRlfAkHl0MB1#-W?NNk=Ah\=Vt]\;<%L[QPtbPDK'0Z0%#3Rq!K#m\^7*uDMpjm]!b65ErSM-
%e?m!H)<,_>2."_Qg3C1s\!O@Tm,%Ni0sBm!**pL1f=d8PSB3sX_#\-S[HUCP4tWJ=RI&K#GF@8ZC"C.pjA;T!BZ.K76odlMKk;hD
%PDTAYNs#h+GTH!TGVNF2Z,$JDAF5H4,0MH!9kQaD:0e!lS6VQtCK%[u"fa&PGa1j-61RNjmp>\1X*Rj9F7%VlTt+p!57B7h$#d.=
%!h)'Q)$)&us.IH$Z0rO.e?@9+fOq/X?o?,ZM@>SH?t-9)A[NS$Xf]]16WV9@W4"B=#U:d#=5^Up`S)b"q0]-SDWgC,r-^j5_T?/*
%,324h]Sf;Mm@1`9X^:%j91W/G,)<m[G'r9:'+35SU<q%h%sYUCh-J=Fd=IJEN(i3?8"oA-e`6op/p-4n!`=;JV1p"*#s,]Q5p-Z-
%Jb*@\H.Y(&YX`Db%1*.VaKfE?d_^J54`kS_%eUV+mcNt\h('SCmQLFQ\1sV*r8A09pXAU2nYa/%iQ!$iq!%dMro'K!pR,l&C&(VQ
%%hcrQmXpn!$9o1m1_iDNBtU/A(sWqLaOl+VT[f>Q.W2%^Ife%8Y:`1BQ70#>paXFsF\=2Z*pTP3-3Ds"Ter]E^sY'/'rM.3ZWXD,
%)rc1a3c[YjWg"9ma]AK"/G[PJI=bGt/_3$P8I+@.]=iVYjUXZLWT$oNhC_OrU1EBd+FiS0Rl<D'bmdP7-^sZO$cm8qEE6q:l7IUg
%/>KNF'VLU'eHiPn\oN308LR.TG_?BL+^l?!+W_;].#ra,7TtAg\s/2tYe#l\Rd$pikb@ZHOUDpmCW.o;=WjFNg#[aoHO4Gu[("ce
%;RJGES[8U-rkU+Mr`(NWJeM$N9"aKZ+^ACOA3reo)O,X$.Kt(_c5SqE4Sm+A'mM4I"YH&]p,gl3.NV$0U?%F9fo:PFOmU"0&L?+m
%.n\N'iGtAmUTF)r7JsscR&69'2%uQu]D[i!"b+29SAu/lOpH>]n^#d]Htem]0NAS/=h-^uQ>3Zs*JU<>TUfJq(iamURiXHHpSMeb
%PIerb;)/JD1%&pGI6CjP9rKXcj+uaF5J<]^SO:k-7n5mCL4C$3iO.g^@c)6Q6"$3f[q_(El?g63bpq\PVBf[F!?F@m/7lrj;Gq+W
%:kOPM/4MP[iR##:A*'@@-qh^1UcOJKSPdLq*:=Z'rP!9gJ4c+g:<>&Mfe%K'aAh'(^KkBLQAnYCNtZ!1"/#U.8I\_,6/(?V]>4u(
%V"rb3W7<ShJ,k=iC6ipKZ'6Lq5rX]S:LPu+4d<$0>cZ*q_Y$p1gJs(;OJ`e&c.@?#aHCJ`Gj'7Ai;3oUqK?i<9A&Nb%oqWZCi`Ls
%_VgZ9'HjY3L*C?WT^kp&.J)XX4A;fYfNrqdDG<=<lWNIUoq'XFXa/;ub`@@(I.d/[E"..W++0WI.&_1,E+')'iNcL0q#&,A4TXpm
%_<)b!#K:`iX]^K:gE&+!d<f-1Tl$g&hs#q`:2\=Qh*Y#M%Bc%'CE0oM[+s%BdC'q7"tpC41XanQ0aGo@Uml8+\,LIMgO&@\jP=gN
%2g=\a3GDF@o.`Z"IE-]P_+M>biR7tSlj6-&p@l(VSo=-"LXAWYOY\@HX<"As.qhX(<esoP2--0`mWbn2N;qMt3%&JOU=rp!4-348
%#pg`9-T:T/W2\mN;*ZG3"t=Y_U%rncK'5a<0WC#_n/FCq>#`/PK6p6l,Wt,F2^Li@G7\[`p/p%BO*VbI"6Z_I9gf),Hc-f,VXT%p
%HE/,@6$p4dcl.Z\\E^k*9fH>^p[`KDTW*^3n6$q3VIG!]6b4`3\j%X]n>&T@lqaX^HkknC'*5(>>InN!.-t,%XFp&CnGQ9jLJNrc
%^L255F-6?4V2p)JDLau+2c/]E6=5Y_62=i`*$%-^5S0'c"7NG.NLk(X.C>sp6@*ZE*g]ERNIje$S0d`Y[lpmU0BCKm3$809,W*2j
%s77aQ1iZ*'+-DcaHqWIW)P(1k%-a#tqDGI2YBSW/fkPPs6Ok/P>dbK4ST.+@F^Uet+a?L)APq\D7+$t'<ocDSbN"5X4ei01$2`Jn
%!u,`k4[7PkLLV84[:=053`g6dULlLM"m:[-TlY"pkgo+lmC&@nlC3P>]C5H6S@O0dMi_96K=[ST"ccDaL0JSOh+<;P=T`jX)jkI<
%s&kTe]A"m=o5*hCTF,TC+kDK36M06nlWTurSaVtEGIg21h0+5QTS2%1kLOIrK;OJ<m<1]F<dsLb[iN>`hWmdc>6@Y;TY6.Gi:+;o
%rUPQQR9(IK@R+Ia^+>XC"/eRjbg8'dHhbu>k"&k5"qtd:kQP!pdi:'K5aaAh)!5$leG&J77TcF_4#S2r2^Z?[#6sj/qJ7/3>m#st
%O1p5gmEKD7j)>7!6&NBtIaS_47d7&cDm/YT!H2lqGctV\>kdQN1bBT$HG4+he:.1(q;=C5^Jr>=fp:B2VWD$NQ;AQZ:X7"aQ5T[;
%[P-MrRHN$WQ!n.\=F/RRU"Q;pk[GAjpiHO8^`a$@h;en;I$63qOKqL7f3sb)G?Omh+T7`<;CnUlo(*5AUq^'/T._AYQ1c_p3JEi'
%qe9pUBWW_Ud76:!LCsA#,uhc=PI@,Rd/gTHoYI[o_\kd$LHDf1*KU$ZB,gP`Co<tUp?kiU4Pp.7^o"'Vp7MM2DUT*PR_QJ2^ZB#K
%]aar,"l-CZ[>*A`bkI6>#\aSekW)Po_8OntRZ1Q^D3l(IS);u^Jmk14A9>D7;n^pK#=q5hY[*GNbiai4;\$PnW^XMTDiaD(pNE[s
%XdQ(;f\aakZ[_MG55IrpUKLEV&Up/W`^!R-i>i9bCJo&t7!3isi./h@SE(^UGBgcGh[^?ThKfc[Gt/tb.aZXBn]DVMhP$%'T6b&S
%a"quMBETdT!jt*PhRr:nm>0rk%o"=oK]*Z>V`r<2"d#n2M?rmNE]6j92/@BP?T6(@RikcVm[\E\HIGP";]K`$$@66Si@0<drs_CM
%Oi.C*!Np=@)0`D&kQCq'I=h$qJBf-uin*K2VDK[2*X$b'n<=^'DiNU214`W?Rgh%$kO-0r?\?f9[f\!,dE<7I\#,c,e1R1@iA?^8
%encE.RX2@Zc5He+SX*J+GH+SF#L!k.lNjma*Go+E+C<O!+u42$DKPlE81sdmmfaWaZ'`C?bX!3jV.P$V+M>_"$,G%7mg:Op;6tsC
%4X>'!'sQ9*)*IeX@]U-+_a%*<0=rV\qJT)p_.:C?Kh%ge2,ommFC54'ih.r"$@*8dcq3HeLO"5A"9"5nAdg/ZO_WFuMkSE7pb/Gn
%9dO!BX9T!8`&#O8H2Xgm+!uDU).OOPYXAuP1iOYVCiI!6>rEKYkH\u]]O"L_O=5]kK?:3"2Gi[#X)H&ZncBLNHTpYO9@[bpUM/0R
%?*d.hA2tjMiVh#pqT';V%R'-qGT3E(]u6]Z7Op?<SfDd-3Z!fC/%`F+d@/Jm&fQ4<i'bHm,gnSL.Upm;KsW-4O$Rf(c-of,.EIrj
%'+6PWg$7*F]o8gI)A\X_io-ashbb:-.p>NplBh,m5st!TCSk4M/<Y!LmTk9COK5'ka>l:THk'`2#IN[q[7J>"lF=$76'Ha_WJXA_
%<8Ca,G!_NqKPVWqYtjD>&'#%%:LaXhjd+kDFm>B%4L#_,:0G7*qL5gB?$4bcgi"gnJ0pHBUnHV,+Y\/@T3*eTV_hrIXB@9?)%`eq
%EM?\o3Xi!OFVp#u_Xk%E2I!<D-f95n0HS?,_R\?&=+/8cb0X`Oe'X)>Ibb6pAIDI27ckU3+g+<UU_-9,_fA]h8VIEdLoQ@_3*kWC
%BhXI[!\C]mTn,\9@F(rTb3(V'm<)quKOtumn^'ZW.\oNbjr&A-IF"Nt0QR[Ecj3noMYQu.%0[g&-:eC4d(S@@):&E"I9N+deH1Yj
%?;K?Br:(o_%>@$ZnNVqX(T9V,Zm!%&*5/:N]I3(RHO0!*CgjS3>%+L,V-!,bTPP).#5@&N:'dCc^4m9p@('P%U:Mh/%*HTYXXDTE
%5iSV0]t6/3+"8$'-I_LjUiTXN'@n+-]5ORc5*3Mm2*Dm(h!\@C:ut!+eo*.p+=^mF1WC6.mCOU#;OZoR!,-fKKN(fY2C+i$!sDMc
%l@@*54@d>\J^.hAhT^3+a]/!C/HDSYiaemK_15Dk_p<([$5U.[77JA=66u$K+,`NsZ6q^X:D*mYkHiVgm1:=7K3,4`(WXA;>`_E'
%;nk22k/F.C.'&pV3`#eZd'EPTTOg,r6'N2he0)DHY80p\Wu%4l/-nY/aFV:\FYMp>B,r9qM0:tI7``siN<sNXo_R896gV]M;':?1
%qUgI1QeETRd@Hg5qD))K0W-/<CG#m^-(35d#R[9510=u"TW(>R3.J&+(rtTup^YNH_uU$FNJt,COQPpMK@ILaFIg+l37po!s1OG#
%s!$K\R:`urfaiI\L9o14?NoM*n2t%mE$dWNeEj%G$GXe0d_tgif;4KO<D[^:HP@dDE=-@j2,-qrf*@q1iQGpR*:(h'eZ'NG9@R4E
%'EuMqVAUOXPi[RS2X:?t3;)fpOnH?XpJf#`m;IA]TA:O[bEjWtVG>5QMT`.'@Bpi]H6o>fl!/**DrCDk/grQ`@?4iG-rklGZrrSh
%Y]ajHRcV-p"dWofLVU&$b'Bb6kY-HN\7j<'5<HOF5eJMYj7p2#Hb_`/lq4T1+NkGqCkH`VKe0:OqDrl_VSKMr9QThU1C^#V3b4E0
%Gg&+tX07uKCLM$2S$:2RL;ssK`u0iAq@L0qoNZ!l#o"cJm?oo.ccmkA#8aJ2;^G!XX;lL74BWAS6.l=\n6jAS8P&-K!Qtg.Wt(&q
%RXF`5nk&&<bVOCk_.9^>Ymcmh(f1?G.cM@UfM&A^:fXD6Qc_dYXJ25mK<'#J;qA$!d)D&Gkh<l@J-8l5Amsf/e%OB%C6)]++e"b'
%U$=RZc>e/\JT.A[5BrP^BQk="jVsg`%4Sp>455q&\:%DY8J*,<YYI5kX(%_GMIk8aB!fs>U*b%XS9%D^l8Xr.2n^gco9$4uSKr"J
%Ugc6SfXJ%fo"\7(M0J=O>tjjM6p6g:0+_(&%e$G@$[c?_i-/?%$c*.Ma5&o^<O@>b3G-8\fbD2:csFWFND*kPTo<;g-Xf0bmM'+%
%"LoG]7&[9eqJ&@2gO,KjWF/J\L>qFM`7tp)]>Ku(W[,&8HjfQ6`qt4Q8CQ<-Per<B#M/rLBfIBqBgld8fYWuti.(hHXR(i$9h:8Q
%V/(KrrfN.j++hSd>_oJ`irE0)),6F!A''#CGqm-ALen^&X0%S.a@l/F8:j0)/I'jQ`f<KUWA&0/>(g$^=oY#@"D@MD9p=#*?Ok11
%"s6gnB#'p.npY^6j]:#_K!KZ3ADcj(,!\`&^!VUB_?,/1a/Mhn/"tjTD4/<,4`)U?9LjQ-I,-Qc#cYh`6kS?HM&37VF91XDDO+C.
%Rq]]7-q;Q$eZ^ZM5qui0>EJ.8JFG$(k[Y$B[!duZN;-So<5kMho2$Zbl"r@HqXhI-6]+EJ?rZq@JBL!\(SQ9ZJ&d4L^'N9o5eSFm
%>t\Jd/5tL?oF"3gKN(u_hc1J@qUVY]gqEl5#pDF`/`ML6X&FY%5bp2%.&TUl784$s./M]/+fa0)SO7QPKd>.O3)oBjU"Zn#8<.HY
%C8s@cm6d:,paVBG7rVU^SOXMh;[Ssu#H1^;#G%*3*FcJ!K%s,5eE\KM'H?L!L0_B6>PS_A$/3!oZ7rMk]c1$A*Ih\6kc0OnIJZmB
%.`B3A?9sJG4/#"\Q_T50)[Qcg/qB1O%k'AJT]6Hj:87G'<%Bp7[IQNnTWIXA""M%JiOf7<<ZNTX`'YX5L/kq6,XhfKIGE3m^K[7t
%#>HqMHQ2N\X9V6ojYrcVHa8]J[]*,:-9'g.d^J3\l<Qb7.%:Li]-36<9<GYB^9]G<p!!`E%[3dKqp(Z/4BRAF_baS%9$D:1!_Q`+
%AWr5N&^&ob1(NM'PI4)UD\j<)P7PtcFFVt5U:/dPP1/C\Tpe@GL[:^UC\F\aH[e,(\Z<GioBqD.W7W9*'K\Q4YhF\*kc&@=n^\LS
%eW#6fC:@41)>C_JL$>HKA:m[4-K!Slcg7U%4JLS.=?I1OY%C<q;_l4pcml:#D>YE<$k2-i8#QPP6#i+!f<s%gP6$g=!<Xo'!*HXZ
%o>tF:>pim$bM.5g;X$A_X52@-QLsGDBdC.JAY>8<.`t#t=u@F9*6h9HPTce8H+17W?8QFAIc!2ic9kf`;OKgk&6cHHHY(iUe_j&7
%frbeNQ6\U^6>LRUJtt=g)*?^oe!_:B\Fa!8>1)CZkSeegN;_N>fDY:64^YXTMGpFSG@h4cF[AI[-^t%P38">O>^(]bENeTi_q'e%
%VHgANBdkW3E[;uB@N;/EdLac>'dVB`'!ZAab2S5#."c^^BD:AOL1gs>X&9WF3i7@.A$Na@SIM`b][g?0ICn"Ch85V!m#t[knL<6b
%cns8hS2f*-F+`^>B:l84lcm;RSkHFB(.>,gF_9jbYE]c+W--TN`n$&S^DNOQc@AuR_4V>8kZ3Fr,$OFD<Ae)Q#t]9!:f\i4FXmVu
%1l&9$r/TE7l1e.*$<.YVOan"p.RH+agDjrX%#k%7i:7H=U.I9[!^D@LQSn(RCtG+(*a'rg*OU$G<)b_b33*aK\hDYhcf>G0=fZ%[
%lT4>=$o6ioLC[5E1SDoklrP_ppn19L.#WH],$KM!ifVIf-%un#>ol,s5?J"o(2d*j;F^9;C$3l'%bk<4L>Q;1c7PgdTEZkFZ$,6U
%#\L'nZ%abFZ?>=e*NI#PH_EC1@=](!:b`b66=fH<F.'XrYILQQY8VKY>U;^./=Y*n")/e4p#=BIq)/p`[<#^I2%?`.goURYV[$Ls
%MgI2Ai0T9mNa?8),Q,R9Kk.#n)^:HRF%??I-j@U-'Pc0k#gkX.JQ/8#:toGQWm"-NF%OikG]?qk\:@PlEE^%@?\q/D3kKiX1P9=U
%o4j.4c$><*HOBk`4rf:BWnIA"-o%A1Xn":FWr!8+/ud,T&ZX(?e;g3nZ0O'_kj>jf$#dB+WeJ(HSP]0Ec7%"=f#t!Q*d!3q=W=o.
%F?S8Rd#Ob2MUM?I-)\b7]7E$XTK!q6F'DqiL@X[8_5hJ0a+#<JX8N<o,?kN1p579b'90ES?jsg"kAlZTkKAZ=05/PjC!P$'@#0F<
%]&)#<HD2_7-QbJA-2Ms&oi)mejONirf64>N4A*bFX\WR`mA%6lP&5u7^DN[-9S-&OX"e+./_`bb8.^f1B3^pjN"6[m2aCdSeNdKb
%-L>5elqh_Z/-H)2-^o",`UmKNkK2^(@$ds3F0kkHTJ<b?#TGc\'0<1u"jWWKOAZ_n0F6R>'9-:e&SYW`^8$c3YH8*(O:REl_aG6s
%<`0>+cH5.9q0DZsBf;rhGnq9Q14uID4CMRRlEN!4IJn86@VM3B:+&L+'@IOkUdFpun8;WB/d]L?X84SNF6".-hi"1<_Fc<Ipo0>@
%LW5fY?*qBm2.VfG>8-J0^`$u0)@2$YBnQkoQb+4'\G%pdroFu8T>2urO?'(O&sSmm7L#:$38c'W&S2YJ@h&QuLO]b#4p;4G'/[St
%[3Sh*e"pilb/sfio3mO;dh01mUlZ%b)TfGVeVeuUC@FRp;Mah[^_3L^:>%<0MIO9ZP\-3b>1:P2JNF"!qO)"O%/l9m+L#47Zi^76
%Se7]"H!F7g0>Wg2a=c\#ST!]+1TE=W$\0,/Cm(f$N#)V_$(hnmF],^^03=UaBM/,pW#$B*e'l6ud8g&3Mo#1?JYGs=Ge]uPKP`hq
%I+V#<SrBb%)*<GNc8@spk8PXgs6Cc+hro`haVDoZd[SK`##$hU(2/'+5t&$mpTKU5[bFC)EMO+?([e*-KciM%H0.,C;%[<aHD>NY
%GA@oEiBu]UJEB86$W(Ld"1!e%?>>7W./ORI%MlB:I3'`GPguKF=BgJe,qCQC)(pFbI>kf=">#'[USCVA/DJakW`)6"p'%?41aCb,
%%7DWFplOQ)0-H`^9,S0YVR'Kobp9OPMZZ:IpULrToZM;]6E_71Uod=*lD'1"loI2(JXO/@!O^9*,DL+'"G-"g$GVo<?m_Vn;X6H0
%m6Wh'Ohm.f]Wu7ol\A/pB%@5APu('A^LUo/a;)dD+?4J-,XRh4+WDgT_p.P)6[J$>Y8(r1+>BIkMV35j[Bi5hk*/:*=H[BHlnCit
%$<C[<kpi]VLNi,dM.eZdcFY@]NHdC.PL+6hIpn8)!=1L81J@68$**h'b*%E=p\<:cm(GWn#@4iQ2lEVagaL]nT&c2187eMg.Mih5
%iicPWKI<;`+)K:O'u]U)37VtEjPe8:2Dlm`h?=JQS%XrpoWib.!-qL.;=7%[</l5iQoilWMNBVAMr`_7]ImB2X7lC4mpG']HHi?2
%1TSU@W^Wb9.:Xr0F%=?u<d"QXA$A&q105BW$S>,(H@hDCrcsT$IM->E+#7TcnU:Lnp(0WI`2$\Jrennq&$f'-Fned@Dc4B>Gp@jt
%U]aXrQoGV5q;1EPRL7Hm.$*dfBP5R]>*U?JZI6n&[pZa"5[$8>p?nInrHjM\5dJ"QkbI&0dRAA/c?0Sj.=ku\1'-TkG=&'*"\/Rs
%.?t^@i0?X/-ra)]!oq>%n4ICu!,sJt3,1`MB8<+5`BU-ZQK<8Ed\U+'($um&XF,9bU@1$Cj7!&[e!6t7r1QiNHH'u[%"tnQ2V?<b
%30!376*LC#K-&;@SmTjWJkPT#o:;Xk$^O1+bJn!Ec\UV6HH@Y<iVa?rB,Z=68C;EJZssV^]!3p5.nR"7jIeZdl\t3,r*jX=.iV@u
%L2X".`0,>!C*.Ya&7),aL7g@DYnCaNX`+PBjNM*68<5+9M@:I<kn=hC8sJ:eVbIZX"ErJ/F[bC133,ZUC,c6G!r(7ZNHnW[a\hnC
%[0a`r_HAaD_GJP(LV7ufoP#+PP$Ym"Z'/M$*e$/`O#c+Ad73UMVMug+RAK9nOA[>b(_hlSUn!Y\FH1^pV6nd;7#n#H#n!(MP+ZWc
%)NL0or,PX+enekPC+DdkVI>B,2m<q6G:6D(%XA84CfLl]W4ePh@-TiA0FY7QAUNVY)5*MhJ/F@48L5PPUL6;q"3_]mB>8>ujjh>n
%r9"t...M32C\7*t\N/pA>fgqH_kJ5(8J'qjHbGa@H%Xk'n@bK,&7`9%2.n`nj,@(C#GfIpaaYoS1:#?cCe195^PC4haO7$?`\*ng
%P_^8PMSd0:\WK(_"*31r!*Yf6Rg!e-^a.oQC;.W'-?T$SNjFNHn-eG>!MA=U^3dQ%lgXJ28?SEViB*`l3M')79UI+oAgecnL]Zj_
%;]mJ>Qph]H\]@S,7*2+Ko4rnIR=#0'_iB:AbeSXOmD_;?Rl]"("=f.0Y^$F$A*jB8W]!,*X`HY(YRWt=`V@'D7V?R!JC['EXY&B&
%$a^)`,2,)W\lH07Us;hWkj6b8=1R_L\rPDOk6,jd&Rt30I>1Q?A4KE0h6:\*@/735l#%*U%>A%r7dgL(A!K%c6dOT-TKB2">@(Q$
%M$ak6LUnU"#\YE[:RQ#Q_Q?([(qmmbEmfo=VMK+:QXjVg,'4cIaqAY/g&!B-LN&^hbg+SF75tlKZAh&3,CmicTK$ekokI59>WY(4
%O&aKh1""UYT9L.up[`hc:ePI9@UTgP'm,!2E[*LWl27<3BUOf-4%ZACq$+KZ,?+Yc;!Ss_!#W!E'_/<`WEI?,fTT<eQ5U4n"fZ^*
%=N]&ao`$(^#rdC.$GQXB[f\+rVAY5,]N,Y3aLo:q7O'<PU.@)"YECGkC\&.qd"6LGdd;"(?lP4];#P`Yk$A6a3\i&`8si5P+PQRk
%1Eh2nV'=-AWU9h4*cOZZ!0UK]<=!C7l5GA$[8maA6!$#A1TGW.P7?ab`DN.4W/38+@6C^triH:;n=hC3%3mgk.t2+Z^Q&c"qmDnJ
%XK#MjEqLMS/I"I#2R8e'k!p\9%u1;q.0TU*q`cX_/=N(Kq`KKX`;!:I'ke$/.R20E#o3dI9X"?sq`\ih(R+Ah*cu*Pk6UiYn7r)g
%F9$%r_A/qT21'/ZH-I>U7d,E;##(2DTc?e@1R\TJ14Oc1<>U)[k4/9bh>CA%4Eho#$,K8&3]`tD<V4"rp$O6i+_<X4012[-XIW=5
%$34Oq-W\/R&8sidB<1Q&Wu4BX_&n6(Vui)c/d3[^;uT35`FQr^*YdtGEjE1hJSiDVCfGDMBa-;ULDi3jH`6IO;V!"Tc`h_:CR$,S
%J6B$c5p_0nNLC\m"[qs@%BY#ZJlDlT,?5GRl(>$q2Qqfu8[>L`/HJ]k;G-$g_\n"d610f'k=^TYD"1UYdJVfYJulEc88\\U4_DH.
%'R6<=^Pg#.2]CiEq=*NFDH]>#ecHdmCJBk>OqB+,iq->43T-Pq0Hl`Y2lIiPiSL`fFN&.PX%TS@:eaTZo)f.lR-[5`X)L+O:!?_5
%'N^/%Eo>_j2lp?"WZ'6Xl:+#k@6AY1Vg.=s)P/ES(,OK\n04[!ijiN\GphD2QOe9<;>*09amNKqNpm370c@D%Ns7WiCqc<@W&b3b
%EZd`s<)_@fNqEGa'uU;OWc\Q<p7U#gIQW,ulB$j_Y%@@VAAG3KF9l&NcIbDnVPLpaV7)!uN>iKV]AW1mRJr]YAds'rrC3D-%m6][
%p+50F`1[#!oRW]GdQXl&qK"1<E;+^b'%nq;')X5uoj=C`E63nIs&)j4?6ciVJiWMK$*A\:&GrpQ,-b3)?u[1h+C!I)7PU7jSK#FW
%O1I'8<KY[*k/kkV9,sIF6s.ZtM]SD5[#Q@H^cN=]9Ja7e6CE6%,:*ZdZcF@3+<6[RojBXI8VDK<rF4p"H[qAL90J^_Je/>O5a`VF
%%D'SA6Op>br@^qN1RrH>M=EEEIZ?*o8F9VLfE=m\mD;ib`EuK0_IqF9CstH"-)k*p\"+KcO4a>rONrL5.,5`[^$g=X$-OBrr^Rp\
%,k,eGVR+0;o`F!V>E^SMH7/B0RpH^"N*b?8-2d18ZZ15+Bs(Z-2o[UK-P*Hl>2H)lndT.[-4OJ9ka_GMBhn"YT_(Snmj=sVri&<R
%Y?FKlA?[7$NY8'HI=B<Bk3]^0dI?0*q0'5.k?6Z1X%nDb)aiKZ:S+d-be&-(b!2<n^hDk8?m42#h,&JIjC=^_i.@0?mQiD8gEaN#
%D;)3!]A*nI]:UDacBuXVmP-n2NH3[@HFcGh0;Smo?iHdl?IRf)i6nHG>[[l-Qhug\LglD@e<)TsBH%RTAm#Bg.fP4r"&so:cp3r(
%<hE>+!o0)4&g\*;)Td;Sm\4d1q'r@#Rr_C;93fVsJ'u)?9:6O-)UgjH?p\=N4:.i,Q[1V-.@i3P=)Z-hkg\g!(RTG#H>BC[e%7Xf
%1V<##<u6;]\kaIbeM"]4'Oid+!5_#_oPf"U)[g8a$^8=GDiZRHhMP43FW;RO"]#X"4g]-dW2e9gS%'+D-"9#R]9=Ed6nK$3BO!Eq
%C+W&rL`1aA:<OEEh;km#)p*ZLR=sq,PJL6sD0W%ZQR^l7G5b^ZoR+RG%:Y4aaP9Vt)PW5[gilBrC1ZOol((<n'hLoaU+^WYn7)11
%TcODKndGU4f4(<gLrNJq>U+]em!^3mj!ioYOWKsqc-aX?BLin"935>]61B4bW6nSFjgC0QUm<pe-YSS#&5>`):r\n2LBj/;ni5Da
%Uk9Eu*OWs+4sUrd%N*ef6N]gdU>4*S_a?1X]%LMG3[_rhr"'&$j$kFl5Brl7(nhfM"]2Fp<W+FWKmUsMrN]HP`b@PLinUn-?Z=+?
%;uQ"c%K)NlIoWL*N=T+QI?cr&futfa.%b=?E]BY,os\e&rjV@S&-Or_CQY/ScBE!3efpQ;Bap;I5UfWe]XO8O-oLrYNuMm)/L2e3
%+S`@6A_q8PBYpu.*fh^Oj+o=X+&X57P9^9=X`<R`cuMW*?joXJ9\&arP:)X,J&i,*eelll:iH0i&bT3f5@j)9l[Jc[S&t7aRU=l_
%o"6XS\'<tM/gZo.+#-!-@/7C(RkGV8Df[#Zs5(%Xeu.s`_c,L8T%gcR$RMRu5pF>E"2ssJo&T$@"]S1lZ(&ZA-1bQY!AT!.j9?+B
%XK(Ge!.kqtQ\rW^1bsI^a_ZrVE$QB#Js%Ta$9SeQ+H>g-aM4F)!VRk+[r0ft+X@EQZ.TD95ZR7]l1'u:Z6k/M?_W?`A3PPJeMDbq
%,Z?NDg;nhVL#jS9`\!n2XJ]MUkA00U<F2(!:a.>0qY`B;caHn^:Mu%5B=RSm0"H:@P9(ROe/c[V5mQ:^O&Au1Z=gDs459p"W'b+$
%6r/ncF=7TDGIpV)\'k0@\ILbB)sK%$SLD"q;VJqpK6NZ'_4Peac7RbfhY-n"r=s6nd>-!XgCF,@%tFAdT76g$5Q1Nk5Q:Gq:\Xn]
%&-)R>Q[eb58Jj_XGG1lhr$-2N=&Uj1];(N?+ru=/$7Ug0r%eJ/YNnJe:(_bJ_iTm9ADpHn!IEmR:erKU_DbD6/U"XG#o_/<_&!=*
%"[P3Y9G8C(9rr!CWDWRsa]8Gm2[=2<Q#OPM6^0ciAbH8UZ$aoLQiu9ZIQ14B<@)C&@4`i$6rC)))S2N;BTs7+SW$/l,DgIf7^5c]
%.Q(4u.A)MQ81f.?asg8r<QSP9G>p1^h#sj0@4H5)Q^[q0)IJao'O)siUZg`],%-U/@nAN(65+tQ6WB^jfX<>rrIA8!N2P9pdsk`2
%oS;>UT76OtIm*c#rLa)[h008%Rih\*Dh%W$?iKihCG5VO^\YG>r8Z+Q])1N[s,;Bn:]Ge?e(qe;j\PpPJ,\I]J%GO's7IK6%gXfA
%0)1pNq;))K++O5jruY3_Db:~>
%AI9_PrivateDataEnd
